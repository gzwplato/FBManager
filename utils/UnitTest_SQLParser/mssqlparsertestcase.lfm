object MSSQLParserTestData: TMSSQLParserTestData
  OldCreateOrder = False
  Height = 546
  HorizontalOffset = 709
  VerticalOffset = 224
  Width = 625
  object sTriggers: TRxTextHolder
    Highlighter = rxSynSQL
    Items = <    
      item
        Caption = 'DisableTrigger1'
        Lines.Strings = (
          'DISABLE TRIGGER Person.uAddress ON Person.Address;'
        )
      end    
      item
        Caption = 'DisableTrigger2'
        Lines.Strings = (
          'DISABLE TRIGGER safety ON DATABASE;'
        )
      end    
      item
        Caption = 'DisableTrigger3'
        Lines.Strings = (
          'DISABLE Trigger ALL ON ALL SERVER;'
        )
      end    
      item
        Caption = 'DisableTrigger4'
        Lines.Strings = (
          'DISABLE TRIGGER Person.uAddress ON Person.Address;'
        )
      end    
      item
        Caption = 'DisableTrigger5'
        Lines.Strings = (
          'DISABLE TRIGGER safety ON DATABASE;'
          ''
        )
      end    
      item
        Caption = 'EnableTrigger1'
        Lines.Strings = (
          'ENABLE Trigger Person.uAddress ON Person.Address;'
        )
      end    
      item
        Caption = 'EnableTrigger2'
        Lines.Strings = (
          'ENABLE TRIGGER safety ON DATABASE;'
        )
      end    
      item
        Caption = 'EnableTrigger3'
        Lines.Strings = (
          'ENABLE Trigger ALL ON ALL SERVER;'
        )
      end    
      item
        Caption = 'DropTrigger1'
        Lines.Strings = (
          'DROP TRIGGER ProjectTask_HistoryTrigger;'
        )
      end    
      item
        Caption = 'DropTrigger2'
        Lines.Strings = (
          'DROP TRIGGER safety ON DATABASE;'
          ''
          ''
        )
      end    
      item
        Caption = 'DropTrigger3'
        Lines.Strings = (
          'DROP TRIGGER ddl_trig_database ON ALL SERVER;'
        )
      end    
      item
        Caption = 'DropTrigger4'
        Lines.Strings = (
          'DROP TRIGGER safety ON DATABASE;'
        )
      end    
      item
        Caption = 'DropTrigger5'
        Lines.Strings = (
          'DROP TRIGGER employee_insupd;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTrigger1'
        Lines.Strings = (
          'CREATE TRIGGER safety'
          'ON DATABASE'
          'FOR DROP_TABLE, ALTER_TABLE'
          'AS'
          '   PRINT ''You must disable Trigger "safety" to drop or alter tables!'''
          '   ROLLBACK;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTrigger2'
        Lines.Strings = (
          'CREATE TRIGGER safety'
          'ON DATABASE'
          'FOR DROP_TABLE, ALTER_TABLE'
          'AS'
          '   PRINT ''You must disable Trigger "safety" to drop or alter tables!'''
          '   ROLLBACK;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTrigger3'
        Lines.Strings = (
          'CREATE TRIGGER dbo.trig1 ON dbo.trig_example FOR INSERT'
          'AS'
          'IF (SELECT COUNT(*) FROM INSERTED'
          'WHERE salary > 100000) > 0'
          'BEGIN'
          '    print ''TRIG1 Error: you attempted to insert a salary > $100,000'''
          '    ROLLBACK TRANSACTION'
          'END ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTrigger4'
        Lines.Strings = (
          'CREATE TRIGGER Sales.bonus_reminder'
          'ON Sales.SalesPersonQuotaHistory'
          'WITH ENCRYPTION'
          'AFTER INSERT, UPDATE'
          'AS RAISERROR (''Notify Compensation'', 16, 10);'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTrigger5'
        Lines.Strings = (
          'CREATE TRIGGER reminder1'
          'ON Sales.Customer'
          'AFTER INSERT, UPDATE'
          'AS RAISERROR (''Notify Customer Relations'', 16, 10);'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTrigger6'
        Lines.Strings = (
          'CREATE TRIGGER reminder2'
          'ON Sales.Customer'
          'AFTER INSERT, UPDATE, DELETE'
          'AS'
          '   EXEC msdb.dbo.sp_send_dbmail'
          '        @profile_name = ''AdventureWorks2012 Administrator'','
          '        @recipients = ''danw@Adventure-Works.com'','
          '        @body = ''Don''''t forget to print a report for the sales force.'','
          '        @subject = ''Reminder'';'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTrigger7'
        Lines.Strings = (
          ''
          'CREATE TRIGGER Purchasing.LowCredit ON Purchasing.PurchaseOrderHeader'
          'AFTER INSERT'
          'AS'
          'IF (ROWCOUNT_BIG() = 0)'
          'RETURN;'
          'IF EXISTS (SELECT *'
          '           FROM Purchasing.PurchaseOrderHeader AS p'
          '           JOIN inserted AS i'
          '           ON p.PurchaseOrderID = i.PurchaseOrderID'
          '           JOIN Purchasing.Vendor AS v'
          '           ON v.BusinessEntityID = p.VendorID'
          '           WHERE v.CreditRating = 5'
          '          )'
          'BEGIN'
          'RAISERROR (''A vendor''''s credit rating is too low to accept new'
          'purchase orders.'', 16, 1);'
          'ROLLBACK TRANSACTION;'
          'RETURN'
          'END;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTrigger8'
        Lines.Strings = (
          ''
          'CREATE TRIGGER safety'
          'ON DATABASE'
          'FOR DROP_SYNONYM'
          'AS'
          'IF (@@ROWCOUNT = 0)'
          'RETURN;'
          '   RAISERROR (''You must disable Trigger "safety" to remove synonyms!'', 10, 1)'
          '   ROLLBACK'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTrigger9'
        Lines.Strings = (
          'CREATE TRIGGER ddl_trig_database'
          'ON ALL SERVER'
          'FOR CREATE_DATABASE'
          'AS'
          '    PRINT ''Database Created.'''
          '    SELECT EVENTDATA().value(''(/EVENT_INSTANCE/TSQLCommand/CommandText)[1]'',''nvarchar(max)'')'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTrigger10'
        Lines.Strings = (
          'CREATE TRIGGER connection_limit_trigger'
          'ON ALL SERVER WITH EXECUTE AS ''login_test'''
          'FOR LOGON'
          'AS'
          'BEGIN'
          'IF ORIGINAL_LOGIN()= ''login_test'' AND'
          '    (SELECT COUNT(*) FROM sys.dm_exec_sessions'
          '            WHERE is_user_process = 1 AND'
          '                original_login_name = ''login_test'') > 3'
          '    ROLLBACK;'
          'END;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTrigger1'
        Lines.Strings = (
          'ALTER TRIGGER Sales.bonus_reminder'
          'ON Sales.SalesPersonQuotaHistory'
          'AFTER INSERT'
          'AS RAISERROR (''Notify Compensation'', 16, 10);'
          ''
          ''
        )
      end>
    Left = 48
    Top = 38
  end
  object sDataBase: TRxTextHolder
    Highlighter = rxSynSQL
    Items = <    
      item
        Caption = 'CreateDatabase1'
        Lines.Strings = (
          'CREATE DATABASE testdb'
          'COLLATE SQL_Latin1_General_CP1_CI_AS ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateDatabase2'
        Lines.Strings = (
          'CREATE DATABASE [ columnstore ];'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateDatabase3'
        Lines.Strings = (
          'CREATE DATABASE SampleDB;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateDatabase4'
        Lines.Strings = (
          'CREATE DATABASE mytest;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateDatabase5'
        Lines.Strings = (
          'CREATE DATABASE Sales'
          'ON'
          '( NAME = Sales_dat,'
          '    FILENAME = ''C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA\saledat.mdf'','
          '    SIZE = 10,'
          '    MAXSIZE = 50,'
          '    FILEGROWTH = 5 )'
          'LOG ON'
          '( NAME = Sales_log,'
          '    FILENAME = ''C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA\salelog.ldf'','
          '    SIZE = 5MB,'
          '    MAXSIZE = 25MB,'
          '    FILEGROWTH = 5MB ) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateDatabase6'
        Lines.Strings = (
          'CREATE DATABASE Archive'
          'ON'
          'PRIMARY'
          '    (NAME = Arch1,'
          '    FILENAME = ''D:\SalesData\archdat1.mdf'','
          '    SIZE = 100MB,'
          '    MAXSIZE = 200,'
          '    FILEGROWTH = 20),'
          '    ( NAME = Arch2,'
          '    FILENAME = ''D:\SalesData\archdat2.ndf'','
          '    SIZE = 100MB,'
          '    MAXSIZE = 200,'
          '    FILEGROWTH = 20),'
          '    ( NAME = Arch3,'
          '    FILENAME = ''D:\SalesData\archdat3.ndf'','
          '    SIZE = 100MB,'
          '    MAXSIZE = 200,'
          '    FILEGROWTH = 20)'
          'LOG ON'
          '  (NAME = Archlog1,'
          '    FILENAME = ''D:\SalesData\archlog1.ldf'','
          '    SIZE = 100MB,'
          '    MAXSIZE = 200,'
          '    FILEGROWTH = 20),'
          '  (NAME = Archlog2,'
          '    FILENAME = ''D:\SalesData\archlog2.ldf'','
          '    SIZE = 100MB,'
          '    MAXSIZE = 200,'
          '    FILEGROWTH = 20) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateDatabase7'
        Lines.Strings = (
          'CREATE DATABASE Sales'
          'ON PRIMARY'
          '( NAME = SPri1_dat,'
          '    FILENAME = ''D:\SalesData\SPri1dat.mdf'','
          '    SIZE = 10,'
          '    MAXSIZE = 50,'
          '    FILEGROWTH = 15% ),'
          '( NAME = SPri2_dat,'
          '    FILENAME = ''D:\SalesData\SPri2dt.ndf'','
          '    SIZE = 10,'
          '    MAXSIZE = 50,'
          '    FILEGROWTH = 15% ),'
          'FILEGROUP SalesGroup1'
          '( NAME = SGrp1Fi1_dat,'
          '    FILENAME = ''D:\SalesData\SG1Fi1dt.ndf'','
          '    SIZE = 10,'
          '    MAXSIZE = 50,'
          '    FILEGROWTH = 5 ),'
          '( NAME = SGrp1Fi2_dat,'
          '    FILENAME = ''D:\SalesData\SG1Fi2dt.ndf'','
          '    SIZE = 10,'
          '    MAXSIZE = 50,'
          '    FILEGROWTH = 5 ),'
          'FILEGROUP SalesGroup2'
          '( NAME = SGrp2Fi1_dat,'
          '    FILENAME = ''D:\SalesData\SG2Fi1dt.ndf'','
          '    SIZE = 10,'
          '    MAXSIZE = 50,'
          '    FILEGROWTH = 5 ),'
          '( NAME = SGrp2Fi2_dat,'
          '    FILENAME = ''D:\SalesData\SG2Fi2dt.ndf'','
          '    SIZE = 10,'
          '    MAXSIZE = 50,'
          '    FILEGROWTH = 5 )'
          'LOG ON'
          '( NAME = Sales_log,'
          '    FILENAME = ''E:\SalesLog\salelog.ldf'','
          '    SIZE = 5MB,'
          '    MAXSIZE = 25MB,'
          '    FILEGROWTH = 5MB ) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateDatabase8'
        Lines.Strings = (
          'CREATE DATABASE Archive'
          '  ON (FILENAME = ''D:\SalesData\archdat1.mdf'')'
          '  FOR ATTACH ;'
          ''
        )
      end    
      item
        Caption = 'CreateDatabase9'
        Lines.Strings = (
          'CREATE DATABASE sales_snapshot0600 ON'
          '    ( NAME = SPri1_dat, FILENAME = ''D:\SalesData\SPri1dat_0600.ss''),'
          '    ( NAME = SPri2_dat, FILENAME = ''D:\SalesData\SPri2dt_0600.ss''),'
          '    ( NAME = SGrp1Fi1_dat, FILENAME = ''D:\SalesData\SG1Fi1dt_0600.ss''),'
          '    ( NAME = SGrp1Fi2_dat, FILENAME = ''D:\SalesData\SG1Fi2dt_0600.ss''),'
          '    ( NAME = SGrp2Fi1_dat, FILENAME = ''D:\SalesData\SG2Fi1dt_0600.ss''),'
          '    ( NAME = SGrp2Fi2_dat, FILENAME = ''D:\SalesData\SG2Fi2dt_0600.ss'')'
          'AS SNAPSHOT OF Sales ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateDatabase10'
        Lines.Strings = (
          'CREATE DATABASE MyOptionsTest'
          'COLLATE French_CI_AI'
          'WITH TRUSTWORTHY ON, DB_CHAINING ON;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateDatabase11'
        Lines.Strings = (
          'CREATE DATABASE AdventureWorks2012 ON'
          '    (FILENAME = ''c:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\Data\AdventureWorks2012_data.mdf''),'
          '    (FILENAME = ''c:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\Data\AdventureWorks2012_log.ldf''),'
          '    (FILENAME = ''c:\myFTCatalogs\AdvWksFtCat'')'
          'FOR ATTACH;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateDatabase12'
        Lines.Strings = (
          'CREATE DATABASE [BlobStore1]'
          'CONTAINMENT = NONE'
          'ON PRIMARY'
          '('
          '    NAME = N''BlobStore1'','
          '    FILENAME = N''C:\BlobStore\BlobStore1.mdf'','
          '    SIZE = 100MB,'
          '    MAXSIZE = UNLIMITED,'
          '    FILEGROWTH = 1MB'
          '),'
          'FILEGROUP [FS] CONTAINS FILESTREAM DEFAULT'
          '('
          '    NAME = N''FS1'','
          '    FILENAME = N''C:\BlobStore\FS1'','
          '    MAXSIZE = UNLIMITED'
          '),'
          '('
          '    NAME = N''FS2'','
          '    FILENAME = N''C:\BlobStore\FS2'','
          '    MAXSIZE = 100MB'
          ')'
          'LOG ON'
          '('
          '    NAME = N''BlobStore1_log'','
          '    FILENAME = N''C:\BlobStore\BlobStore1_log.ldf'','
          '    SIZE = 100MB,'
          '    MAXSIZE = 1GB,'
          '    FILEGROWTH = 1MB'
          ');'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateDatabase13'
        Lines.Strings = (
          'CREATE DATABASE AUDIT SPECIFICATION Audit_Pay_Tables'
          'FOR SERVER AUDIT Payrole_Security_Audit'
          'ADD (SELECT , INSERT'
          '     ON HumanResources.EmployeePayHistory BY dbo )'
          'WITH (STATE = ON) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateDatabase14'
        Lines.Strings = (
          'CREATE DATABASE AUDIT SPECIFICATION Audit_Data_Modification_On_All_Sales_Tables'
          'FOR SERVER AUDIT DataModification_Security_Audit'
          'ADD ( INSERT, UPDATE, DELETE'
          '     ON Schema::Sales BY SalesUK )'
          'WITH (STATE = ON) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateDatabase15'
        Lines.Strings = (
          'CREATE DATABASE ENCRYPTION KEY'
          'WITH ALGORITHM = AES_256'
          'ENCRYPTION BY SERVER CERTIFICATE MyServerCert;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateDatabase16'
        Lines.Strings = (
          'CREATE DATABASE SCOPED CREDENTIAL AppCred WITH IDENTITY = ''Mary5'','
          '    SECRET = ''<EnterStrongPasswordHere>'';'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateDatabase17'
        Lines.Strings = (
          'CREATE DATABASE SCOPED CREDENTIAL MyCredentials'
          'WITH IDENTITY = ''SHARED ACCESS SIGNATURE'','
          'SECRET = ''QLYMgmSXMklt%2FI1U6DcVrQixnlU5Sgbtk1qDRakUBGs%3D'';'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateDatabase18'
        Lines.Strings = (
          'CREATE DATABASE SCOPED CREDENTIAL ADL_User'
          'WITH'
          '    IDENTITY = ''<client_id>@\<OAuth_2.0_Token_EndPoint>'','
          '    SECRET = ''<key>'''
          ';'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateDatabase19'
        Lines.Strings = (
          'CREATE DATABASE SCOPED CREDENTIAL OracleProxyAccount'
          'WITH'
          '     IDENTITY = ''oracle_username'','
          '     SECRET = ''oracle_password'' ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateDatabase20'
        Lines.Strings = (
          'CREATE DATABASE SCOPED CREDENTIAL HadoopUser1'
          'WITH'
          '     IDENTITY = ''<hadoop_user_name>'','
          '     SECRET = ''<hadoop_password>'' ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateDatabase21'
        Lines.Strings = (
          'CREATE DATABASE SCOPED CREDENTIAL AzureStorageCredential'
          'WITH'
          '  IDENTITY = ''<my_account>'' ,'
          '  SECRET = ''<azure_storage_account_key>'' ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateDatabase22'
        Lines.Strings = (
          'CREATE DATABASE SCOPED CREDENTIAL AccessAzureInvoices'
          'WITH'
          '  IDENTITY = ''SHARED ACCESS SIGNATURE'','
          '  -- Remove ? from the beginning of the SAS token'
          '  SECRET = ''******srt=sco&sp=rwac&se=2017-02-01T00:55:34Z&st=2016-12-29T16:55:34Z***************'' ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateDatabase23'
        Lines.Strings = (
          '     CREATE DATABASE SCOPED CREDENTIAL SqlServerCredentials'
          '     WITH IDENTITY = ''username'', Secret = ''password'';'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateDatabase24'
        Lines.Strings = (
          '   CREATE DATABASE SCOPED CREDENTIAL credential_name'
          '   WITH IDENTITY = ''username'', Secret = ''password'';'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateDatabase25'
        Lines.Strings = (
          '   CREATE DATABASE SCOPED CREDENTIAL credential_name'
          '   WITH IDENTITY = ''username'', Secret = ''password'';'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateDatabase26'
        Lines.Strings = (
          '   CREATE DATABASE SCOPED CREDENTIAL credential_name'
          '   WITH IDENTITY = ''username'', Secret = ''password'';'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateDatabase27'
        Lines.Strings = (
          'CREATE DATABASE TestDB;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateDatabase28'
        Lines.Strings = (
          'CREATE DATABASE AUDIT SPECIFICATION [FilterForSensitiveData]'
          'FOR SERVER AUDIT [AuditDataAccess]'
          'ADD (SELECT ON SCHEMA::[DataSchema] BY [public])'
          'WITH (STATE = ON);'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateDatabase29'
        Lines.Strings = (
          'CREATE DATABASE SampleDB;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateDatabase30'
        Lines.Strings = (
          'CREATE DATABASE TestSignature ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateDatabase31'
        Lines.Strings = (
          'CREATE DATABASE testDB;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterDatabase1'
        Lines.Strings = (
          'ALTER DATABASE AdventureWorks2012'
          'SET RECOVERY BULK_LOGGED;'
          ''
        )
      end    
      item
        Caption = 'AlterDatabase2'
        Lines.Strings = (
          'ALTER DATABASE AdventureWorks2012'
          'SET RECOVERY FULL;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterDatabase3'
        Lines.Strings = (
          'ALTER DATABASE AdventureWorks2012'
          'Modify Name = Northwind ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterDatabase4'
        Lines.Strings = (
          'ALTER DATABASE testDB'
          'COLLATE French_CI_AI ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterDatabase5'
        Lines.Strings = (
          'ALTER DATABASE AUDIT SPECIFICATION HIPAA_Audit_DB_Specification'
          'FOR SERVER AUDIT HIPAA_Audit'
          '    ADD (SELECT'
          '         ON OBJECT::dbo.Table1'
          '         BY dbo)'
          '    WITH (STATE = ON);'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterDatabase6'
        Lines.Strings = (
          'ALTER DATABASE database_name'
          'SET COMPATIBILITY_LEVEL = { 150 | 140 | 130 | 120 | 110 | 100 | 90 }'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterDatabase7'
        Lines.Strings = (
          'ALTER DATABASE AdventureWorks2012'
          'SET COMPATIBILITY_LEVEL = 110;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterDatabase8'
        Lines.Strings = (
          'ALTER DATABASE AdventureWorks2012 SET PARTNER FAILOVER;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterDatabase9'
        Lines.Strings = (
          'ALTER DATABASE ENCRYPTION KEY'
          'REGENERATE WITH ALGORITHM = AES_256;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterDatabase10'
        Lines.Strings = (
          'ALTER DATABASE AdventureWorks2012'
          'ADD FILE'
          '('
          '    NAME = Test1dat2,'
          '    FILENAME = ''C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA\t1dat2.ndf'','
          '    SIZE = 5MB,'
          '    MAXSIZE = 100MB,'
          '    FILEGROWTH = 5MB'
          ');'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterDatabase11'
        Lines.Strings = (
          'ALTER DATABASE AdventureWorks2012'
          'ADD FILEGROUP Test1FG1;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterDatabase12'
        Lines.Strings = (
          'ALTER DATABASE AdventureWorks2012'
          'ADD FILE'
          '('
          '    NAME = test1dat3,'
          '    FILENAME = ''C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA\t1dat3.ndf'','
          '    SIZE = 5MB,'
          '    MAXSIZE = 100MB,'
          '    FILEGROWTH = 5MB'
          '),'
          '('
          '    NAME = test1dat4,'
          '    FILENAME = ''C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA\t1dat4.ndf'','
          '    SIZE = 5MB,'
          '    MAXSIZE = 100MB,'
          '    FILEGROWTH = 5MB'
          ')'
          'TO FILEGROUP Test1FG1;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterDatabase13'
        Lines.Strings = (
          'ALTER DATABASE AdventureWorks2012'
          'ADD LOG FILE'
          '('
          '    NAME = test1log2,'
          '    FILENAME = ''C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA\test2log.ldf'','
          '    SIZE = 5MB,'
          '    MAXSIZE = 100MB,'
          '    FILEGROWTH = 5MB'
          '),'
          '('
          '    NAME = test1log3,'
          '    FILENAME = ''C:\Program Files\Microsoft SQL Server\MSSQL10_50.MSSQLSERVER\MSSQL\DATA\test3log.ldf'','
          '    SIZE = 5MB,'
          '    MAXSIZE = 100MB,'
          '    FILEGROWTH = 5MB'
          ');'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterDatabase14'
        Lines.Strings = (
          'ALTER DATABASE AdventureWorks2012'
          'REMOVE FILE test1dat4;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterDatabase15'
        Lines.Strings = (
          'ALTER DATABASE AdventureWorks2012'
          'MODIFY FILE'
          '(NAME = test1dat3,'
          'SIZE = 200MB);'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterDatabase16'
        Lines.Strings = (
          'ALTER DATABASE AdventureWorks2012'
          'MODIFY FILE'
          '(NAME = test1dat3,'
          'SIZE = 200MB);'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterDatabase17'
        Lines.Strings = (
          'ALTER DATABASE AdventureWorks2012'
          'MODIFY FILE'
          '('
          '    NAME = Test1dat2,'
          '    FILENAME = N''c:\t1dat2.ndf'''
          ');'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterDatabase18'
        Lines.Strings = (
          'ALTER DATABASE tempdb'
          'MODIFY FILE (NAME = tempdev, FILENAME = ''E:\SQLData\tempdb.mdf'');'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterDatabase19'
        Lines.Strings = (
          'ALTER DATABASE tempdb'
          'MODIFY FILE (NAME = templog, FILENAME = ''E:\SQLData\templog.ldf'');'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterDatabase20'
        Lines.Strings = (
          'ALTER DATABASE AdventureWorks2012'
          'MODIFY FILEGROUP Test1FG1 DEFAULT;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterDatabase21'
        Lines.Strings = (
          'ALTER DATABASE AdventureWorks2012'
          'MODIFY FILEGROUP [PRIMARY] DEFAULT;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterDatabase22'
        Lines.Strings = (
          'ALTER DATABASE FileStreamPhotoDB'
          'ADD FILEGROUP TodaysPhotoShoot'
          'CONTAINS FILESTREAM;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterDatabase23'
        Lines.Strings = (
          'ALTER DATABASE FileStreamPhotoDB'
          'ADD FILE'
          '('
          '  NAME= ''PhotoShoot1'','
          '  FILENAME = ''C:\Users\Administrator\Pictures\TodaysPhotoShoot.ndf'''
          ')'
          'TO FILEGROUP TodaysPhotoShoot;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterDatabase24'
        Lines.Strings = (
          'ALTER DATABASE xtp_db'
          'ADD FILEGROUP xtp_fg'
          'CONTAINS MEMORY_OPTIMIZED_DATA;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterDatabase25'
        Lines.Strings = (
          'ALTER DATABASE xtp_db'
          'ADD FILE'
          '('
          '  NAME=''xtp_mod'','
          '  FILENAME=''d:\data\xtp_mod'''
          ')'
          'TO FILEGROUP xtp_fg;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterDatabase26'
        Lines.Strings = (
          'ALTER DATABASE AccountsDb1 SET HADR AVAILABILITY GROUP = AccountsAG;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterDatabase27'
        Lines.Strings = (
          'ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 1 ;'
          ''
        )
      end    
      item
        Caption = 'AlterDatabase28'
        Lines.Strings = (
          'ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = 4 ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterDatabase29'
        Lines.Strings = (
          'ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY ;'
          ''
        )
      end    
      item
        Caption = 'AlterDatabase30'
        Lines.Strings = (
          'ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = ON ;'
          ''
        )
      end    
      item
        Caption = 'AlterDatabase31'
        Lines.Strings = (
          'ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY ;'
          ''
        )
      end    
      item
        Caption = 'AlterDatabase32'
        Lines.Strings = (
          'ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = OFF ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterDatabase33'
        Lines.Strings = (
          'ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = OFF ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterDatabase34'
        Lines.Strings = (
          'ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterDatabase35'
        Lines.Strings = (
          'ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = ON ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterDatabase36'
        Lines.Strings = (
          'ALTER DATABASE SCOPED CONFIGURATION CLEAR PROCEDURE_CACHE;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterDatabase37'
        Lines.Strings = (
          'ALTER DATABASE SCOPED CONFIGURATION SET IDENTITY_CACHE = OFF ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterDatabase38'
        Lines.Strings = (
          'ALTER DATABASE SCOPED CONFIGURATION SET OPTIMIZE_FOR_AD_HOC_WORKLOADS = ON;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterDatabase39'
        Lines.Strings = (
          'ALTER DATABASE SCOPED CONFIGURATION SET ELEVATE_ONLINE = FAIL_UNSUPPORTED ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterDatabase40'
        Lines.Strings = (
          'ALTER DATABASE SCOPED CONFIGURATION SET ELEVATE_RESUMABLE = WHEN_SUPPORTED ;'
        )
      end    
      item
        Caption = 'AlterDatabase41'
        Lines.Strings = (
          'ALTER DATABASE SCOPED CONFIGURATION CLEAR PROCEDURE_CACHE 0x06000500F443610F003B7CD12C02000001000000000000000000000000000000000000000000000000000000;'
        )
      end    
      item
        Caption = 'AlterDatabase42'
        Lines.Strings = (
          'ALTER DATABASE [database_name]'
          'SET PAUSED_RESUMABLE_INDEX_ABORT_DURATION_MINUTES = 60'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterDatabase43'
      end    
      item
        Caption = 'AlterDatabase44'
        Lines.Strings = (
          'ALTER DATABASE [database_name]'
          'SET RECOVERY FULL PAGE_VERIFY CHECKSUM;'
          ''
        )
      end    
      item
        Caption = 'AlterDatabase45'
        Lines.Strings = (
          'ALTER DATABASE [database_name]'
          'SET SINGLE_USER'
          'WITH ROLLBACK IMMEDIATE;'
          ''
        )
      end    
      item
        Caption = 'AlterDatabase46'
        Lines.Strings = (
          'ALTER DATABASE [database_name]'
          'SET READ_ONLY'
          ''
        )
      end    
      item
        Caption = 'AlterDatabase47'
        Lines.Strings = (
          'ALTER DATABASE [database_name]'
          'SET MULTI_USER;'
          ''
        )
      end    
      item
        Caption = 'AlterDatabase48'
        Lines.Strings = (
          'USE [database_name];'
          'USE master;'
          ''
        )
      end    
      item
        Caption = 'AlterDatabase49'
        Lines.Strings = (
          'ALTER DATABASE [database_name]'
          'SET ALLOW_SNAPSHOT_ISOLATION ON;'
          ''
        )
      end    
      item
        Caption = 'AlterDatabase50'
        Lines.Strings = (
          'ALTER DATABASE [database_name]'
          'SET CHANGE_TRACKING = ON'
          '(AUTO_CLEANUP = ON, CHANGE_RETENTION = 2 DAYS);'
          ''
        )
      end    
      item
        Caption = 'AlterDatabase51'
        Lines.Strings = (
          'ALTER DATABASE [database_name]'
          'SET CHANGE_TRACKING (CHANGE_RETENTION = 3 DAYS);'
          ''
        )
      end    
      item
        Caption = 'AlterDatabase52'
        Lines.Strings = (
          'ALTER DATABASE [database_name]'
          'SET CHANGE_TRACKING = OFF;'
        )
      end    
      item
        Caption = 'AlterDatabase53'
        Lines.Strings = (
          'ALTER DATABASE [database_name]'
          'SET QUERY_STORE = ON'
          '    ('
          '      OPERATION_MODE = READ_WRITE,'
          '      CLEANUP_POLICY = ( STALE_QUERY_THRESHOLD_DAYS = 90 ),'
          '      DATA_FLUSH_INTERVAL_SECONDS = 900,'
          '      QUERY_CAPTURE_MODE = AUTO,'
          '      MAX_STORAGE_SIZE_MB = 1024,'
          '      INTERVAL_LENGTH_MINUTES = 60'
          '    );'
          ''
        )
      end    
      item
        Caption = 'AlterDatabase54'
        Lines.Strings = (
          'ALTER DATABASE [database_name]'
          'SET QUERY_STORE = ON'
          '    ('
          '      OPERATION_MODE = READ_WRITE,'
          '      CLEANUP_POLICY = ( STALE_QUERY_THRESHOLD_DAYS = 90 ),'
          '      DATA_FLUSH_INTERVAL_SECONDS = 900,'
          '      MAX_STORAGE_SIZE_MB = 1024,'
          '      INTERVAL_LENGTH_MINUTES = 60,'
          '      SIZE_BASED_CLEANUP_MODE = AUTO,'
          '      MAX_PLANS_PER_QUERY = 200,'
          '      WAIT_STATS_CAPTURE_MODE = ON,'
          '    );'
          ''
        )
      end    
      item
        Caption = 'AlterDatabase55'
        Lines.Strings = (
          'ALTER DATABASE [database_name]'
          'SET QUERY_STORE = ON'
          '    ('
          '      OPERATION_MODE = READ_WRITE,'
          '      CLEANUP_POLICY = ( STALE_QUERY_THRESHOLD_DAYS = 90 ),'
          '      DATA_FLUSH_INTERVAL_SECONDS = 900,'
          '      MAX_STORAGE_SIZE_MB = 1024,'
          '      INTERVAL_LENGTH_MINUTES = 60,'
          '      SIZE_BASED_CLEANUP_MODE = AUTO,'
          '      MAX_PLANS_PER_QUERY = 200,'
          '      WAIT_STATS_CAPTURE_MODE = ON,'
          '      QUERY_CAPTURE_MODE = CUSTOM,'
          '      QUERY_CAPTURE_POLICY = ('
          '        STALE_CAPTURE_POLICY_THRESHOLD = 24 HOURS,'
          '        EXECUTION_COUNT = 30,'
          '        TOTAL_COMPILE_CPU_TIME_MS = 1000,'
          '        TOTAL_EXECUTION_CPU_TIME_MS = 100'
          '      )'
          '    );'
        )
      end    
      item
        Caption = 'AlterDatabase56'
        Lines.Strings = (
          'ALTER DATABASE AdventureWorks2012'
          '    SET RECOVERY FULL;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterDatabase57'
        Lines.Strings = (
          'ALTER DATABASE [BlobStore1]'
          'ADD FILE'
          '('
          '    NAME = N''FS3'','
          '    FILENAME = N''C:\BlobStore\FS3'','
          '    MAXSIZE = 100MB'
          ')'
          'TO FILEGROUP [FS];'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterDatabase58'
        Lines.Strings = (
          'ALTER DATABASE AdventureWorks2012'
          'SET ENCRYPTION OFF;'
        )
      end    
      item
        Caption = 'AlterDatabase59'
        Lines.Strings = (
          '    ALTER DATABASE AdventureWorks2012'
          '        ADD FILEGROUP NewGroup;'
          ''
        )
      end    
      item
        Caption = 'AlterDatabase60'
        Lines.Strings = (
          '    ALTER DATABASE AdventureWorks2012'
          '        ADD FILE (NAME = File1,'
          '            FILENAME = ''C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA\File1.ndf'')'
          '        TO FILEGROUP NewGroup;'
          ''
        )
      end    
      item
        Caption = 'DropDatabase1'
        Lines.Strings = (
          'DROP DATABASE SampleDB;'
          ''
          ''
        )
      end    
      item
        Caption = 'DropDatabase2'
        Lines.Strings = (
          'DROP DATABASE mytest;'
          ''
        )
      end    
      item
        Caption = 'DropDatabase3'
        Lines.Strings = (
          'DROP DATABASE MyOptionsTest;'
          ''
          ''
          ''
        )
      end    
      item
        Caption = 'DropDatabase4'
        Lines.Strings = (
          'DROP DATABASE Sales;'
          ''
        )
      end    
      item
        Caption = 'DropDatabase5'
        Lines.Strings = (
          'DROP DATABASE Sales, NewSales;'
          ''
        )
      end    
      item
        Caption = 'DropDatabase6'
        Lines.Strings = (
          'DROP DATABASE sales_snapshot0600;'
          ''
        )
      end    
      item
        Caption = 'DropDatabase7'
        Lines.Strings = (
          'DROP DATABASE AUDIT SPECIFICATION HIPAA_Audit_DB_Specification;'
          ''
        )
      end    
      item
        Caption = 'DropDatabase8'
        Lines.Strings = (
          'DROP DATABASE ENCRYPTION KEY;'
        )
      end    
      item
        Caption = 'CreateShema1'
        Lines.Strings = (
          'CREATE SCHEMA Test;'
          ''
        )
      end    
      item
        Caption = 'CreateShema2'
        Lines.Strings = (
          '    CREATE SCHEMA sqlserver;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateShema3'
        Lines.Strings = (
          'CREATE SCHEMA Sprockets AUTHORIZATION Annik'
          '    CREATE TABLE NineProngs (source int, cost int, partnumber int)'
          '    GRANT SELECT ON SCHEMA::Sprockets TO Mandar'
          '    DENY SELECT ON SCHEMA::Sprockets TO Prasanna;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateShema4'
        Lines.Strings = (
          'CREATE SCHEMA Test ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateShema5'
        Lines.Strings = (
          'CREATE SCHEMA DataSchema;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateShema6'
        Lines.Strings = (
          'CREATE SCHEMA History;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateShema7'
        Lines.Strings = (
          'CREATE SCHEMA Sprockets AUTHORIZATION Krishna'
          '    CREATE TABLE NineProngs (source INT, cost INT, partnumber INT)'
          '    GRANT SELECT TO Anibal'
          '    DENY SELECT TO [Hung-Fu];'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterShema1'
        Lines.Strings = (
          'ALTER SCHEMA HumanResources TRANSFER Person.Address;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterShema2'
        Lines.Strings = (
          'ALTER SCHEMA Person TRANSFER type::Production.TestType ;'
        )
      end    
      item
        Caption = 'DropSchema1'
        Lines.Strings = (
          'DROP SCHEMA Sprockets;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateExternalDataSource1'
        Lines.Strings = (
          'CREATE EXTERNAL DATA SOURCE MyOracleServer'
          'WITH'
          '  ( LOCATION = ''oracle://145.145.145.145:1521'','
          '    CREDENTIAL = OracleProxyAccount,'
          '    PUSHDOWN = ON'
          '  ) ;'
          ''
        )
      end    
      item
        Caption = 'CreateExternalDataSource2'
        Lines.Strings = (
          'CREATE EXTERNAL DATA SOURCE MyHadoopCluster'
          'WITH'
          '  ( LOCATION = ''hdfs://10.10.10.10:8050'' ,'
          '    TYPE = HADOOP'
          '  ) ;'
          ''
        )
      end    
      item
        Caption = 'CreateExternalDataSource3'
        Lines.Strings = (
          'CREATE EXTERNAL DATA SOURCE MyHadoopCluster'
          'WITH'
          '  ( LOCATION = ''hdfs://10.10.10.10:8020'' ,'
          '    TYPE = HADOOP ,'
          '    RESOURCE_MANAGER_LOCATION = ''10.10.10.10:8050'''
          '  ) ;'
          ''
        )
      end    
      item
        Caption = 'CreateExternalDataSource4'
        Lines.Strings = (
          'CREATE EXTERNAL DATA SOURCE MyHadoopCluster'
          'WITH'
          '  ( LOCATION = ''hdfs://10.10.10.10:8050'' ,'
          '    CREDENTIAL = HadoopUser1 ,'
          '    TYPE = HADOOP ,'
          '    RESOURCE_MANAGER_LOCATION = ''10.10.10.10:8050'''
          '  );'
          ''
        )
      end    
      item
        Caption = 'CreateExternalDataSource5'
        Lines.Strings = (
          'CREATE EXTERNAL DATA SOURCE MyAzureStorage'
          'WITH'
          '  ( LOCATION = ''wasbs://daily@logs.blob.core.windows.net/'' ,'
          '    CREDENTIAL = AzureStorageCredential ,'
          '    TYPE = HADOOP'
          '  ) ;'
          ''
        )
      end    
      item
        Caption = 'CreateExternalDataSource6'
        Lines.Strings = (
          'CREATE EXTERNAL DATA SOURCE SQLServerInstance2'
          'WITH ('
          '  LOCATION = ''sqlserver://WINSQL2019'' ,'
          '  CONNECTION_OPTIONS = ''Server=%s\SQL2019'' ,'
          '  CREDENTIAL = SQLServerCredentials'
          ') ;'
          ''
        )
      end    
      item
        Caption = 'CreateExternalDataSource7'
        Lines.Strings = (
          'CREATE EXTERNAL DATA SOURCE SQLServerInstance2'
          'WITH ('
          '  LOCATION = ''sqlserver://WINSQL2019:58137'' ,'
          '  CREDENTIAL = SQLServerCredentials'
          ') ;'
          ''
        )
      end    
      item
        Caption = 'CreateExternalDataSource8'
        Lines.Strings = (
          'CREATE EXTERNAL DATA SOURCE MyKafkaServer WITH ('
          '    LOCATION = ''kafka://xxx.xxx.xxx.xxx:1900'''
          ')'
          ''
        )
      end    
      item
        Caption = 'CreateExternalDataSource9'
        Lines.Strings = (
          'CREATE EXTERNAL DATA SOURCE MyEdgeHub WITH ('
          '    LOCATION = ''edgehub://'''
          ')'
          ''
        )
      end    
      item
        Caption = 'CreateExternalDataSource10'
        Lines.Strings = (
          'CREATE EXTERNAL DATA SOURCE MyAzureInvoices'
          'WITH'
          '  ( LOCATION = ''https://newinvoices.blob.core.windows.net/week3'' ,'
          '    CREDENTIAL = AccessAzureInvoices ,'
          '    TYPE = BLOB_STORAGE'
          '  ) ;'
          ''
        )
      end    
      item
        Caption = 'CreateExternalDataSource11'
        Lines.Strings = (
          'CREATE EXTERNAL DATA SOURCE mydatasource'
          'WITH ('
          '    TYPE = HADOOP,'
          '    LOCATION = ''hdfs://xxx.xxx.xxx.xxx:8020'''
          ')'
          ''
        )
      end    
      item
        Caption = 'CreateExternalDataSource12'
        Lines.Strings = (
          'CREATE EXTERNAL DATA SOURCE mydatasource_rc'
          'WITH ('
          '    TYPE = HADOOP,'
          '    LOCATION = ''hdfs://xxx.xxx.xxx.xxx:8020'''
          ')'
          ''
        )
      end    
      item
        Caption = 'CreateExternalDataSource13'
        Lines.Strings = (
          'CREATE EXTERNAL DATA SOURCE mydatasource_orc'
          'WITH ('
          '    TYPE = HADOOP,'
          '    LOCATION = ''hdfs://xxx.xxx.xxx.xxx:8020'''
          ')'
          ''
        )
      end    
      item
        Caption = 'CreateExternalDataSource14'
        Lines.Strings = (
          'CREATE EXTERNAL DATA SOURCE SQLServerInstance'
          '    WITH ('
          '    LOCATION = ''sqlserver://SqlServer'','
          '    -- PUSHDOWN = ON | OFF,'
          '      CREDENTIAL = SQLServerCredentials'
          '    );'
          ''
        )
      end    
      item
        Caption = 'CreateExternalDataSource15'
        Lines.Strings = (
          '   CREATE EXTERNAL DATA SOURCE external_data_source_name'
          '   WITH ('
          '     LOCATION = ''oracle://<server address>[:<port>]'','
          '     -- PUSHDOWN = ON | OFF,'
          '     CREDENTIAL = credential_name)'
          ''
        )
      end    
      item
        Caption = 'CreateExternalDataSource16'
        Lines.Strings = (
          '    CREATE EXTERNAL DATA SOURCE external_data_source_name'
          '    WITH ('
          '    LOCATION = teradata://<server address>[:<port>],'
          '   -- PUSHDOWN = ON | OFF,'
          '    CREDENTIAL =credential_name'
          '    );'
          ''
        )
      end    
      item
        Caption = 'CreateExternalDataSource17'
        Lines.Strings = (
          '    CREATE EXTERNAL DATA SOURCE external_data_source_name'
          '    WITH ('
          '    LOCATION = mongodb://<server>[:<port>],'
          '    -- PUSHDOWN = ON | OFF,'
          '      CREDENTIAL = credential_name'
          '    );'
          ''
        )
      end    
      item
        Caption = 'AlterExternalDataSource1'
        Lines.Strings = (
          'ALTER EXTERNAL DATA SOURCE hadoop_eds SET'
          '     LOCATION = ''hdfs://10.10.10.10:8020'','
          '     RESOURCE_MANAGER_LOCATION = ''10.10.10.10:8032'''
          '    ;'
          ''
        )
      end    
      item
        Caption = 'AlterExternalDataSource2'
        Lines.Strings = (
          'ALTER EXTERNAL DATA SOURCE hadoop_eds SET'
          '   CREDENTIAL = new_hadoop_user'
          '    ;'
          ''
        )
      end    
      item
        Caption = 'AlterExternalDataSource3'
        Lines.Strings = (
          'ALTER EXTERNAL DATA SOURCE AzureStorage_west SET'
          '   LOCATION = ''wasbs://loadingdemodataset@updatedproductioncontainer.blob.core.windows.net'','
          '   CREDENTIAL = AzureStorageCredential'
          ''
        )
      end    
      item
        Caption = 'DropExternalDataSource1'
        Lines.Strings = (
          'DROP EXTERNAL DATA SOURCE mydatasource;'
        )
      end    
      item
        Caption = 'CreateExternalFile1'
        Lines.Strings = (
          'CREATE EXTERNAL FILE FORMAT textdelimited1'
          'WITH ('
          '    FORMAT_TYPE = DELIMITEDTEXT,'
          '    FORMAT_OPTIONS ('
          '        FIELD_TERMINATOR = ''|'','
          '        DATE_FORMAT = ''MM/dd/yyyy'' ),'
          '    DATA_COMPRESSION = ''org.apache.hadoop.io.compress.GzipCodec'''
          ');'
          ''
        )
      end    
      item
        Caption = 'CreateExternalFile2'
        Lines.Strings = (
          'CREATE EXTERNAL FILE FORMAT rcfile1'
          'WITH ('
          '    FORMAT_TYPE = RCFILE,'
          '    SERDE_METHOD = ''org.apache.hadoop.hive.serde2.columnar.LazyBinaryColumnarSerDe'','
          '    DATA_COMPRESSION = ''org.apache.hadoop.io.compress.DefaultCodec'''
          ');'
          ''
        )
      end    
      item
        Caption = 'CreateExternalFile3'
        Lines.Strings = (
          'CREATE EXTERNAL FILE FORMAT orcfile1'
          'WITH ('
          '    FORMAT_TYPE = ORC,'
          '    DATA_COMPRESSION = ''org.apache.hadoop.io.compress.SnappyCodec'''
          ');'
          ''
        )
      end    
      item
        Caption = 'CreateExternalFile4'
        Lines.Strings = (
          'CREATE EXTERNAL FILE FORMAT parquetfile1'
          'WITH ('
          '    FORMAT_TYPE = PARQUET,'
          '    DATA_COMPRESSION = ''org.apache.hadoop.io.compress.SnappyCodec'''
          ');'
          ''
        )
      end    
      item
        Caption = 'CreateExternalFile5'
        Lines.Strings = (
          'CREATE EXTERNAL FILE FORMAT skipHeader_CSV'
          'WITH (FORMAT_TYPE = DELIMITEDTEXT,'
          '      FORMAT_OPTIONS('
          '          FIELD_TERMINATOR = '','','
          '          STRING_DELIMITER = ''"'','
          '          FIRST_ROW = 2,'
          '          USE_TYPE_DEFAULT = True)'
          ')'
          ''
        )
      end    
      item
        Caption = 'CreateExternalFile6'
        Lines.Strings = (
          'CREATE EXTERNAL FILE FORMAT jsonFileFormat'
          'WITH ('
          '    FORMAT_TYPE = JSON,'
          '    DATA_COMPRESSION = ''org.apache.hadoop.io.compress.SnappyCodec'''
          ');'
          ''
        )
      end    
      item
        Caption = 'CreateExternalFile7'
        Lines.Strings = (
          'CREATE EXTERNAL FILE FORMAT myfileformat'
          'WITH ('
          '    FORMAT_TYPE = DELIMITEDTEXT,'
          '    FORMAT_OPTIONS (FIELD_TERMINATOR =''|'')'
          ');'
          ''
        )
      end    
      item
        Caption = 'CreateExternalFile8'
        Lines.Strings = (
          'CREATE EXTERNAL FILE FORMAT myfileformat_rc'
          'WITH ('
          '    FORMAT_TYPE = RCFILE,'
          '    SERDE_METHOD = ''org.apache.hadoop.hive.serde2.columnar.LazyBinaryColumnarSerDe'''
          ')'
          ';'
          ''
        )
      end    
      item
        Caption = 'CreateExternalFile9'
        Lines.Strings = (
          'CREATE EXTERNAL FILE FORMAT myfileformat_orc'
          'WITH ('
          '    FORMAT = ORC,'
          '    COMPRESSION = ''org.apache.hadoop.io.compress.SnappyCodec'''
          ')'
          ';'
          ''
        )
      end    
      item
        Caption = 'DropExternalFile1'
        Lines.Strings = (
          'DROP EXTERNAL FILE FORMAT myfileformat;'
        )
      end    
      item
        Caption = 'CreateXmlSchemaCollection1'
        Lines.Strings = (
          'CREATE XML SCHEMA COLLECTION ManuInstructionsSchemaCollection AS'
          'N''<?xml version="1.0" encoding="UTF-16"?>'
          '<xsd:schema targetNamespace="https://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelManuInstructions"'
          '   xmlns          ="https://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelManuInstructions"'
          '   elementFormDefault="qualified"'
          '   attributeFormDefault="unqualified"'
          '   xmlns:xsd="http://www.w3.org/2001/XMLSchema" >'
          ''
          '    <xsd:complexType name="StepType" mixed="true" >'
          '        <xsd:choice  minOccurs="0" maxOccurs="unbounded" >'
          '            <xsd:element name="tool" type="xsd:string" />'
          '            <xsd:element name="material" type="xsd:string" />'
          '            <xsd:element name="blueprint" type="xsd:string" />'
          '            <xsd:element name="specs" type="xsd:string" />'
          '            <xsd:element name="diag" type="xsd:string" />'
          '        </xsd:choice>'
          '    </xsd:complexType>'
          ''
          '    <xsd:element  name="root">'
          '        <xsd:complexType mixed="true">'
          '            <xsd:sequence>'
          '                <xsd:element name="Location" minOccurs="1" maxOccurs="unbounded">'
          '                    <xsd:complexType mixed="true">'
          '                        <xsd:sequence>'
          '                            <xsd:element name="step" type="StepType" minOccurs="1" maxOccurs="unbounded" />'
          '                        </xsd:sequence>'
          '                        <xsd:attribute name="LocationID" type="xsd:integer" use="required"/>'
          '                        <xsd:attribute name="SetupHours" type="xsd:decimal" use="optional"/>'
          '                        <xsd:attribute name="MachineHours" type="xsd:decimal" use="optional"/>'
          '                        <xsd:attribute name="LaborHours" type="xsd:decimal" use="optional"/>'
          '                        <xsd:attribute name="LotSize" type="xsd:decimal" use="optional"/>'
          '                    </xsd:complexType>'
          '                </xsd:element>'
          '            </xsd:sequence>'
          '        </xsd:complexType>'
          '    </xsd:element>'
          '</xsd:schema>'' ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateXmlSchemaCollection2'
        Lines.Strings = (
          'CREATE XML SCHEMA COLLECTION ProductDescriptionSchemaCollection AS'
          '''<xsd:schema targetNamespace="https://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelWarrAndMain"'
          '    xmlns="https://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelWarrAndMain"'
          '    elementFormDefault="qualified"'
          '    xmlns:xsd="http://www.w3.org/2001/XMLSchema" >'
          '    <xsd:element name="Warranty"  >'
          '        <xsd:complexType>'
          '            <xsd:sequence>'
          '                <xsd:element name="WarrantyPeriod" type="xsd:string"  />'
          '                <xsd:element name="Description" type="xsd:string"  />'
          '            </xsd:sequence>'
          '        </xsd:complexType>'
          '    </xsd:element>'
          '</xsd:schema>'
          ' <xs:schema targetNamespace="https://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"'
          '    xmlns="https://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"'
          '    elementFormDefault="qualified"'
          '    xmlns:mstns="https://tempuri.org/XMLSchema.xsd"'
          '    xmlns:xs="http://www.w3.org/2001/XMLSchema"'
          '    xmlns:wm="https://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelWarrAndMain" >'
          '    <xs:import'
          'namespace="https://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelWarrAndMain" />'
          '    <xs:element name="ProductDescription" type="ProductDescription" />'
          '        <xs:complexType name="ProductDescription">'
          '            <xs:sequence>'
          '                <xs:element name="Summary" type="Summary" minOccurs="0" />'
          '            </xs:sequence>'
          '            <xs:attribute name="ProductModelID" type="xs:string" />'
          '            <xs:attribute name="ProductModelName" type="xs:string" />'
          '        </xs:complexType>'
          '        <xs:complexType name="Summary" mixed="true" >'
          '            <xs:sequence>'
          '                <xs:any processContents="skip" namespace="http://www.w3.org/1999/xhtml" minOccurs="0" maxOccurs="unbounded" />'
          '            </xs:sequence>'
          '        </xs:complexType>'
          '</xs:schema>'''
          ';'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateXmlSchemaCollection3'
        Lines.Strings = (
          'CREATE XML SCHEMA COLLECTION MySampleCollection AS '''
          '<schema xmlns="http://www.w3.org/2001/XMLSchema"  xmlns:ns="http://ns">'
          '<element name="e" type="dateTime"/>'
          '</schema>'';'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateXmlSchemaCollection4'
        Lines.Strings = (
          'CREATE XML SCHEMA COLLECTION ExpenseReportSchema AS'
          'N''<?xml version="1.0" encoding="UTF-16" ?>'
          '  <xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"'
          '     targetNamespace="https://Adventure-Works.com/schemas/expenseReport"'
          '     xmlns:expense="https://Adventure-Works.com/schemas/expenseReport"'
          '     elementFormDefault="qualified"'
          '   >'
          '    <xsd:complexType name="expenseReportType">'
          '       <xsd:sequence>'
          '         <xsd:element name="EmployeeName" type="xsd:string"/>'
          '         <xsd:element name="EmployeeID" type="xsd:string"/>'
          '         <xsd:element name="ItemDetail"'
          '           type="expense:ItemDetailType" maxOccurs="unbounded"/>'
          '      </xsd:sequence>'
          '    </xsd:complexType>'
          ''
          '    <xsd:complexType name="ItemDetailType">'
          '      <xsd:sequence>'
          '        <xsd:element name="Date" type="xsd:date"/>'
          '        <xsd:element name="CostCenter" type="xsd:string"/>'
          '        <xsd:element name="Total" type="xsd:decimal"/>'
          '        <xsd:element name="Currency" type="xsd:string"/>'
          '        <xsd:element name="Description" type="xsd:string"/>'
          '      </xsd:sequence>'
          '    </xsd:complexType>'
          ''
          '    <xsd:element name="ExpenseReport" type="expense:expenseReportType"/>'
          ''
          '  </xsd:schema>'' ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateXmlSchemaCollection5'
        Lines.Strings = (
          'CREATE XML SCHEMA COLLECTION ManuInstructionsSchemaCollection AS'
          'N''<?xml version="1.0" encoding="UTF-16"?>'
          '<xsd:schema targetNamespace="https://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelManuInstructions"'
          '   xmlns          ="https://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelManuInstructions"'
          '   elementFormDefault="qualified"'
          '   attributeFormDefault="unqualified"'
          '   xmlns:xsd="http://www.w3.org/2001/XMLSchema" >'
          ''
          '    <xsd:complexType name="StepType" mixed="true" >'
          '        <xsd:choice  minOccurs="0" maxOccurs="unbounded" >'
          '            <xsd:element name="tool" type="xsd:string" />'
          '            <xsd:element name="material" type="xsd:string" />'
          '            <xsd:element name="blueprint" type="xsd:string" />'
          '            <xsd:element name="specs" type="xsd:string" />'
          '            <xsd:element name="diag" type="xsd:string" />'
          '        </xsd:choice>'
          '    </xsd:complexType>'
          ''
          '    <xsd:element  name="root">'
          '        <xsd:complexType mixed="true">'
          '            <xsd:sequence>'
          '                <xsd:element name="Location" minOccurs="1" maxOccurs="unbounded">'
          '                    <xsd:complexType mixed="true">'
          '                        <xsd:sequence>'
          '                            <xsd:element name="step" type="StepType" minOccurs="1" maxOccurs="unbounded" />'
          '                        </xsd:sequence>'
          '                        <xsd:attribute name="LocationID" type="xsd:integer" use="required"/>'
          '                        <xsd:attribute name="SetupHours" type="xsd:decimal" use="optional"/>'
          '                        <xsd:attribute name="MachineHours" type="xsd:decimal" use="optional"/>'
          '                        <xsd:attribute name="LaborHours" type="xsd:decimal" use="optional"/>'
          '                        <xsd:attribute name="LotSize" type="xsd:decimal" use="optional"/>'
          '                    </xsd:complexType>'
          '                </xsd:element>'
          '            </xsd:sequence>'
          '        </xsd:complexType>'
          '    </xsd:element>'
          '</xsd:schema>'' ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateXmlSchemaCollection6'
        Lines.Strings = (
          'CREATE XML SCHEMA COLLECTION ProductDescriptionSchemaCollection AS'
          '''<xsd:schema targetNamespace="https://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelWarrAndMain"'
          '    xmlns="https://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelWarrAndMain"'
          '    elementFormDefault="qualified"'
          '    xmlns:xsd="http://www.w3.org/2001/XMLSchema" >'
          '    <xsd:element name="Warranty"  >'
          '        <xsd:complexType>'
          '            <xsd:sequence>'
          '                <xsd:element name="WarrantyPeriod" type="xsd:string"  />'
          '                <xsd:element name="Description" type="xsd:string"  />'
          '            </xsd:sequence>'
          '        </xsd:complexType>'
          '    </xsd:element>'
          '</xsd:schema>'
          ' <xs:schema targetNamespace="https://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"'
          '    xmlns="https://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"'
          '    elementFormDefault="qualified"'
          '    xmlns:mstns="https://tempuri.org/XMLSchema.xsd"'
          '    xmlns:xs="http://www.w3.org/2001/XMLSchema"'
          '    xmlns:wm="https://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelWarrAndMain" >'
          '    <xs:import'
          'namespace="https://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelWarrAndMain" />'
          '    <xs:element name="ProductDescription" type="ProductDescription" />'
          '        <xs:complexType name="ProductDescription">'
          '            <xs:sequence>'
          '                <xs:element name="Summary" type="Summary" minOccurs="0" />'
          '            </xs:sequence>'
          '            <xs:attribute name="ProductModelID" type="xs:string" />'
          '            <xs:attribute name="ProductModelName" type="xs:string" />'
          '        </xs:complexType>'
          '        <xs:complexType name="Summary" mixed="true" >'
          '            <xs:sequence>'
          '                <xs:any processContents="skip" namespace="http://www.w3.org/1999/xhtml" minOccurs="0" maxOccurs="unbounded" />'
          '            </xs:sequence>'
          '        </xs:complexType>'
          '</xs:schema>'''
          ';'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateXmlSchemaCollection7'
        Lines.Strings = (
          'CREATE XML SCHEMA COLLECTION MySampleCollection AS '''
          '<schema xmlns="http://www.w3.org/2001/XMLSchema"  xmlns:ns="http://ns">'
          '<element name="e" type="dateTime"/>'
          '</schema>'';'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateXmlSchemaCollection8'
        Lines.Strings = (
          'CREATE XML SCHEMA COLLECTION mySC AS '''
          '<schema xmlns="http://www.w3.org/2001/XMLSchema">'
          '      <element name="root" type="string"/>'
          '</schema>'
          ''';'
          ''
          ''
        )
      end    
      item
        Caption = 'DropXmlSchemaCollection1'
        Lines.Strings = (
          'DROP XML SCHEMA COLLECTION ManuInstructionsSchemaCollection;'
          ''
        )
      end    
      item
        Caption = 'DropXmlSchemaCollection2'
        Lines.Strings = (
          'DROP XML SCHEMA COLLECTION ProductDescriptionSchemaCollection;'
          ''
        )
      end    
      item
        Caption = 'DropXmlSchemaCollection3'
        Lines.Strings = (
          'DROP XML SCHEMA COLLECTION ManuInstructionsSchemaCollection;'
          ''
        )
      end    
      item
        Caption = 'DropXmlSchemaCollection4'
        Lines.Strings = (
          'DROP XML SCHEMA COLLECTION ProductDescriptionSchemaCollection;'
          ''
        )
      end    
      item
        Caption = 'DropXmlSchemaCollection5'
        Lines.Strings = (
          'DROP XML SCHEMA COLLECTION ManuInstructionsSchemaCollection;'
          ''
        )
      end    
      item
        Caption = 'CreateType1'
        Lines.Strings = (
          'CREATE TYPE Production.TestType FROM [VARCHAR](10) NOT NULL ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateType2'
        Lines.Strings = (
          'CREATE TYPE LocationTableType AS TABLE'
          '( LocationName VARCHAR(50)'
          ', CostRate INT );'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateType3'
        Lines.Strings = (
          'CREATE TYPE SSN'
          'FROM varchar(11) NOT NULL ;'
          ''
        )
      end    
      item
        Caption = 'CreateType4'
        Lines.Strings = (
          'CREATE TYPE Utf8String'
          'EXTERNAL NAME utf8string.[Microsoft.Samples.SqlServer.utf8string] ;'
          ''
        )
      end    
      item
        Caption = 'CreateType5'
        Lines.Strings = (
          'CREATE TYPE LocationTableType AS TABLE'
          '    ( LocationName VARCHAR(50)'
          '    , CostRate INT );'
          ''
        )
      end    
      item
        Caption = 'CreateType6'
        Lines.Strings = (
          'CREATE TYPE InventoryItem AS TABLE'
          '('
          '    [Name] NVARCHAR(50) NOT NULL,'
          '    SupplierId BIGINT NOT NULL,'
          '    Price DECIMAL (18, 4) NULL,'
          '    PRIMARY KEY ('
          '        Name'
          '    ),'
          '    INDEX IX_InventoryItem_Price ('
          '        Price'
          '    )'
          ')'
          ''
        )
      end    
      item
        Caption = 'DropType1'
        Lines.Strings = (
          'DROP TYPE ssn ;'
          ''
        )
      end    
      item
        Caption = 'PartitionScheme1'
        Lines.Strings = (
          'ALTER PARTITION SCHEME MyRangePS1'
          'NEXT USED test5fg;'
          ''
          ''
        )
      end    
      item
        Caption = 'PartitionScheme2'
        Lines.Strings = (
          'CREATE PARTITION SCHEME myRangePS4'
          'AS PARTITION myRangePF4'
          'TO (test1fg, test2fg, test3fg, test4fg, test5fg)'
          ''
        )
      end    
      item
        Caption = 'PartitionScheme3'
        Lines.Strings = (
          'CREATE PARTITION SCHEME myRangePS1'
          'AS PARTITION myRangePF1'
          'ALL TO ( [PRIMARY] );'
        )
      end    
      item
        Caption = 'PartitionScheme4'
        Lines.Strings = (
          'CREATE PARTITION SCHEME myRangePS1'
          '    AS PARTITION myRangePF1'
          '    TO (test1fg, test2fg, test3fg, test4fg);'
        )
      end    
      item
        Caption = 'PartitionScheme5'
        Lines.Strings = (
          'DROP PARTITION SCHEME myRangePS1;'
          ''
        )
      end>
    Left = 48
    Top = 136
  end
  object sTable: TRxTextHolder
    Highlighter = rxSynSQL
    Items = <    
      item
        Caption = 'CreateTable1'
        Lines.Strings = (
          'CREATE TABLE dbo.T1'
          '('
          '    column_1 AS ''Computed column '' + column_2,'
          '    column_2 varchar(30)'
          '        CONSTRAINT default_name DEFAULT (''my column default''),'
          '    column_3 rowversion,'
          '    column_4 varchar(40) NULL'
          ');'
        )
      end    
      item
        Caption = 'CreateTable2'
        Lines.Strings = (
          'CREATE TABLE dbo.T1 ( column_1 int IDENTITY, column_2 VARCHAR(30));'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable3'
        Lines.Strings = (
          'CREATE TABLE dbo.T1'
          '('
          '    column_1 int IDENTITY,'
          '    column_2 uniqueidentifier,'
          ');'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable4'
        Lines.Strings = (
          'CREATE TABLE dbo.EmployeeSales'
          '( DataSource   varchar(20) NOT NULL,'
          '  BusinessEntityID   varchar(11) NOT NULL,'
          '  LastName     varchar(40) NOT NULL,'
          '  SalesDollars money NOT NULL'
          ');'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable5'
        Lines.Strings = (
          'CREATE TABLE HumanResources.NewEmployee'
          '('
          '    EmployeeID int NOT NULL,'
          '    LastName nvarchar(50) NOT NULL,'
          '    FirstName nvarchar(50) NOT NULL,'
          '    PhoneNumber Phone NULL,'
          '    AddressLine1 nvarchar(60) NOT NULL,'
          '    City nvarchar(30) NOT NULL,'
          '    State nchar(3) NOT NULL,'
          '    PostalCode nvarchar(15) NOT NULL,'
          '    CurrentFlag Flag'
          ');'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable6'
        Lines.Strings = (
          'CREATE TABLE dbo.EmployeeSales'
          '( EmployeeID   nvarchar(11) NOT NULL,'
          '  LastName     nvarchar(20) NOT NULL,'
          '  FirstName    nvarchar(20) NOT NULL,'
          '  YearlySales  money NOT NULL'
          ' );'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable7'
        Lines.Strings = (
          'CREATE TABLE T1 ( column_1 int, column_2 varchar(30));'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable8'
        Lines.Strings = (
          'CREATE TABLE Sales.SalesHistory('
          '    SalesOrderID int NOT NULL,'
          '    SalesOrderDetailID int NOT NULL,'
          '    CarrierTrackingNumber nvarchar(25) NULL,'
          '    OrderQty smallint NOT NULL,'
          '    ProductID int NOT NULL,'
          '    SpecialOfferID int NOT NULL,'
          '    UnitPrice money NOT NULL,'
          '    UnitPriceDiscount money NOT NULL,'
          '    LineTotal money NOT NULL,'
          '    rowguid uniqueidentifier ROWGUIDCOL  NOT NULL,'
          '    ModifiedDate datetime NOT NULL );'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable9'
        Lines.Strings = (
          'CREATE TABLE dbo.EmployeeSales'
          '( EmployeeID   int IDENTITY (1,5)NOT NULL,'
          '  LastName     nvarchar(20) NOT NULL,'
          '  FirstName    nvarchar(20) NOT NULL,'
          '  CurrentSales money NOT NULL,'
          '  ProjectedSales AS CurrentSales * 1.10'
          ');'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable10'
        Lines.Strings = (
          'CREATE TABLE Production.ZeroInventory (DeletedProductID int, RemovedOnDate DateTime);'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable11'
        Lines.Strings = (
          'CREATE TABLE EmployeeTitles'
          '( EmployeeKey   INT NOT NULL,'
          '  LastName     varchar(40) NOT NULL,'
          '  Title      varchar(50) NOT NULL'
          ');'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable12'
        Lines.Strings = (
          'CREATE TABLE dbo.Table1'
          '    (ColA INT NOT NULL, ColB DECIMAL(10,3) NOT NULL);'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable13'
        Lines.Strings = (
          'CREATE TABLE dbo.Table2'
          '    (ColA INT PRIMARY KEY NOT NULL, ColB DECIMAL(10,3) NOT NULL);'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable14'
        Lines.Strings = (
          'CREATE TABLE dbo.Table1'
          '    (c1 INT PRIMARY KEY NOT NULL, c2 INT NOT NULL);'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable15'
        Lines.Strings = (
          'CREATE TABLE dbo.Table2'
          '    (d1 INT PRIMARY KEY NOT NULL, d2 INT NOT NULL);'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable16'
        Lines.Strings = (
          'CREATE TABLE #MyTempTable'
          '    (ExistingCode nchar(3),'
          '     ExistingName nvarchar(50),'
          '     ExistingDate datetime,'
          '     ActionTaken nvarchar(10),'
          '     NewCode nchar(3),'
          '     NewName nvarchar(50),'
          '     NewDate datetime'
          '    );'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable17'
        Lines.Strings = (
          'CREATE TABLE Production.UpdatedInventory'
          '    (ProductID INT NOT NULL, LocationID int, NewQty int, PreviousQty int,'
          '     CONSTRAINT PK_Inventory PRIMARY KEY CLUSTERED (ProductID, LocationID));'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable18'
        Lines.Strings = (
          'CREATE TABLE Person'
          '    ('
          '        ID INTEGER PRIMARY KEY,'
          '        PersonName VARCHAR(100)'
          '    )'
          'AS NODE'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable19'
        Lines.Strings = (
          'CREATE TABLE City'
          '    ('
          '        ID INTEGER PRIMARY KEY,'
          '        CityName VARCHAR(100),'
          '        StateName VARCHAR(100)'
          '    )'
          'AS NODE'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable20'
        Lines.Strings = (
          'CREATE TABLE livesIn'
          '    ('
          '        StreetAddress VARCHAR(100)'
          '    )'
          'AS EDGE'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable21'
        Lines.Strings = (
          'CREATE TABLE #tmpdbs (id INT IDENTITY(1,1), [dbid] INT, [dbname] sysname, isdone BIT);'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable22'
        Lines.Strings = (
          'CREATE TABLE #tmpfgs (id INT IDENTITY(1,1), [dbid] INT, [dbname] sysname, fgname sysname, isdone BIT);'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable23'
        Lines.Strings = (
          'CREATE TABLE [ staging ] ('
          '     AccountKey              int NOT NULL,'
          '     AccountDescription      nvarchar (50),'
          '     AccountType             nvarchar(50),'
          '     AccountCodeAlternateKey     int'
          '     )'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable24'
        Lines.Strings = (
          'CREATE TABLE cci_target ('
          '     AccountKey              int NOT NULL,'
          '     AccountDescription      nvarchar (50),'
          '     AccountType             nvarchar(50),'
          '     AccountCodeAlternateKey int'
          '     )'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable25'
        Lines.Strings = (
          'CREATE TABLE dbo.FactInternetSales2 ('
          '    ProductKey [int] NOT NULL,'
          '    OrderDateKey [int] NOT NULL,'
          '    DueDateKey [int] NOT NULL,'
          '    ShipDateKey [int] NOT NULL);'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable26'
        Lines.Strings = (
          'CREATE TABLE SimpleTable ('
          '    ProductKey [int] NOT NULL,'
          '    OrderDateKey [int] NOT NULL,'
          '    DueDateKey [int] NOT NULL,'
          '    ShipDateKey [int] NOT NULL'
          ');'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable27'
        Lines.Strings = (
          'CREATE TABLE dbo.doc_exa (column_a INT) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable28'
        Lines.Strings = (
          'CREATE TABLE dbo.doc_exc (column_a INT) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable29'
        Lines.Strings = (
          'CREATE TABLE dbo.doc_exd (column_a INT) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable30'
        Lines.Strings = (
          'CREATE TABLE dbo.doc_exz (column_a INT, column_b INT) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable31'
        Lines.Strings = (
          'CREATE TABLE dbo.doc_exe (column_a INT CONSTRAINT column_a_un UNIQUE) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable32'
        Lines.Strings = (
          'CREATE TABLE dbo.doc_exf (column_a INT) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable33'
        Lines.Strings = (
          'CREATE TABLE T1 ('
          '  C1 INT PRIMARY KEY,'
          '  C2 VARCHAR(50) SPARSE NULL,'
          '  C3 INT SPARSE NULL,'
          '  C4 INT) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable34'
        Lines.Strings = (
          'CREATE TABLE T2 ('
          '  C1 INT PRIMARY KEY,'
          '  C2 VARCHAR(50) NULL,'
          '  C3 INT NULL,'
          '  C4 INT) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable35'
        Lines.Strings = (
          'CREATE TABLE dbo.doc_exb ('
          '     column_a INT,'
          '     column_b VARCHAR(20) NULL,'
          '     column_c DATETIME,'
          '     column_d INT) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable36'
        Lines.Strings = (
          'CREATE TABLE dbo.doc_exc (column_a INT NOT NULL CONSTRAINT my_constraint UNIQUE) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable37'
        Lines.Strings = (
          'CREATE TABLE dbo.doc_exc ( column_a INT'
          '                          NOT NULL CONSTRAINT my_constraint UNIQUE'
          '                          ,column_b INT'
          '                          NOT NULL CONSTRAINT my_pk_constraint PRIMARY KEY) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable38'
        Lines.Strings = (
          'CREATE TABLE Person.ContactBackup'
          '    (ContactID INT) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable39'
        Lines.Strings = (
          'CREATE TABLE dbo.doc_exy (column_a INT) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable40'
        Lines.Strings = (
          'CREATE TABLE dbo.doc_exy (col_a varchar(5) UNIQUE NOT NULL, col_b decimal (4,2)) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable41'
        Lines.Strings = (
          'CREATE TABLE T3 ('
          '  C1 INT PRIMARY KEY,'
          '  C2 VARCHAR(50) NULL,'
          '  C3 INT NULL,'
          '  C4 INT) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable42'
        Lines.Strings = (
          'CREATE TABLE T3 ('
          '  C1 INT PRIMARY KEY,'
          '  C2 VARCHAR(50) NULL,'
          '  C3 INT NULL,'
          '  C4 INT) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable43'
        Lines.Strings = (
          'CREATE TABLE PartitionTable (col1 INT, col2 CHAR(10))'
          'ON myRangePS1 (col1) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable44'
        Lines.Strings = (
          'CREATE TABLE NonPartitionTable (col1 INT, col2 CHAR(10))'
          'ON test2fg ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable45'
        Lines.Strings = (
          'CREATE TABLE dbo.cnst_example ('
          '  id INT NOT NULL,'
          '  name VARCHAR(10) NOT NULL,'
          '  salary MONEY NOT NULL'
          '  CONSTRAINT salary_cap CHECK (salary < 100000)) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable46'
        Lines.Strings = (
          'CREATE TABLE dbo.trig_example ('
          '  id INT,'
          '  name VARCHAR(12),'
          '  salary MONEY) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable47'
        Lines.Strings = (
          'CREATE TABLE dbo.doc_exy (column_a INT) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable48'
        Lines.Strings = (
          'CREATE TABLE T ('
          '        i int primary key,'
          '        x xml (ManuInstructionsSchemaCollection));'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable49'
        Lines.Strings = (
          'CREATE TABLE SimpleTable('
          '    ProductKey [INT] NOT NULL,'
          '    OrderDateKey [INT] NOT NULL,'
          '    DueDateKey [INT] NOT NULL,'
          '    ShipDateKey [INT] NOT NULL);'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable50'
        Lines.Strings = (
          'CREATE TABLE SimpleTable ('
          '    ProductKey [INT] NOT NULL,'
          '    OrderDateKey [INT] NOT NULL,'
          '    DueDateKey [INT] NOT NULL,'
          '    ShipDateKey [INT] NOT NULL);'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable51'
        Lines.Strings = (
          'CREATE TABLE SimpleTable ('
          '    ProductKey [INT] NOT NULL,'
          '    OrderDateKey [INT] NOT NULL,'
          '    DueDateKey [INT] NOT NULL,'
          '    ShipDateKey [INT] NOT NULL);'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable52'
        Lines.Strings = (
          'CREATE TABLE MyFactTable ('
          '    ProductKey [INT] NOT NULL,'
          '    OrderDateKey [INT] NOT NULL,'
          '     DueDateKey [INT] NOT NULL,'
          '     ShipDateKey [INT] NOT NULL )'
          ')'
          'WITH ('
          '    CLUSTERED INDEX ( ProductKey )'
          ');'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable53'
        Lines.Strings = (
          'CREATE TABLE SimpleTable'
          '(ProductKey [INT] NOT NULL,'
          'OrderDateKey [INT] NOT NULL,'
          'DueDateKey [INT] NOT NULL,'
          'ShipDateKey [INT] NOT NULL);'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable54'
        Lines.Strings = (
          'CREATE TABLE #Test (C1 NVARCHAR(10), C2 NVARCHAR(50), C3 DATETIME);'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable55'
        Lines.Strings = (
          'CREATE TABLE #Test (C1 NVARCHAR(10), C2 NVARCHAR(50), C3 DATETIME);'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable56'
        Lines.Strings = (
          'CREATE TABLE Tbl ( id INT PRIMARY KEY, xmlcol XML );'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable57'
        Lines.Strings = (
          'CREATE TABLE DataSchema.GeneralData (ID int PRIMARY KEY, DataField varchar(50) NOT NULL);'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable58'
        Lines.Strings = (
          'CREATE TABLE DataSchema.SensitiveData (ID int PRIMARY KEY, DataField varchar(50) NOT NULL);'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable59'
        Lines.Strings = (
          'CREATE TABLE SpatialTable(id int primary key, geometry_col geometry);'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable60'
        Lines.Strings = (
          'CREATE TABLE SpatialTable2(id int primary key, object GEOGRAPHY);'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable61'
        Lines.Strings = (
          'CREATE TABLE dbo.Employee ('
          '    EmployeeID INT PRIMARY KEY CLUSTERED'
          ');'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable62'
        Lines.Strings = (
          'CREATE TABLE dbo.PurchaseOrderDetail'
          '('
          '    PurchaseOrderID int NOT NULL'
          '        REFERENCES Purchasing.PurchaseOrderHeader(PurchaseOrderID),'
          '    LineNumber smallint NOT NULL,'
          '    ProductID int NULL'
          '        REFERENCES Production.Product(ProductID),'
          '    UnitPrice money NULL,'
          '    OrderQty smallint NULL,'
          '    ReceivedQty float NULL,'
          '    RejectedQty float NULL,'
          '    DueDate datetime NULL,'
          '    rowguid uniqueidentifier ROWGUIDCOL NOT NULL'
          '        CONSTRAINT DF_PurchaseOrderDetail_rowguid DEFAULT (NEWID()),'
          '    ModifiedDate datetime NOT NULL'
          '        CONSTRAINT DF_PurchaseOrderDetail_ModifiedDate DEFAULT (GETDATE()),'
          '    LineTotal AS ((UnitPrice*OrderQty)),'
          '    StockedQty AS ((ReceivedQty-RejectedQty)),'
          '    CONSTRAINT PK_PurchaseOrderDetail_PurchaseOrderID_LineNumber'
          '               PRIMARY KEY CLUSTERED (PurchaseOrderID, LineNumber)'
          '               WITH (IGNORE_DUP_KEY = OFF)'
          ')'
          'ON PRIMARY;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable63'
        Lines.Strings = (
          'CREATE TABLE HumanResources.EmployeeResumes'
          '('
          '    LName nvarchar(25),'
          '    FName nvarchar(25),'
          '    Resume xml(DOCUMENT HumanResources.HRResumeSchemaCollection)'
          ');'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable64'
        Lines.Strings = (
          'CREATE TABLE PartitionTable (col1 int, col2 char(10))'
          '    ON myRangePS1 (col1);'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable65'
        Lines.Strings = (
          'CREATE TABLE dbo.Globally_Unique_Data'
          '('
          '    GUID UNIQUEIDENTIFIER'
          '        CONSTRAINT Guid_Default DEFAULT'
          '        NEWSEQUENTIALID() ROWGUIDCOL,'
          '    Employee_Name VARCHAR(60)'
          '    CONSTRAINT Guid_PK PRIMARY KEY (GUID)'
          ');'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable66'
        Lines.Strings = (
          'CREATE TABLE dbo.mytable'
          '('
          '    low INT,'
          '    high INT,'
          '    myavg AS (low + high)/2'
          ');'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable67'
        Lines.Strings = (
          'CREATE TABLE UDTypeTable'
          '('
          '    u UTF8STRING,'
          '    ustr AS u.ToString() PERSISTED'
          ');'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable68'
        Lines.Strings = (
          'CREATE TABLE dbo.mylogintable'
          '('
          '    date_in DATETIME,'
          '    user_id INT,'
          '    myuser_name AS USER_NAME()'
          ');'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable69'
        Lines.Strings = (
          'CREATE TABLE dbo.EmployeePhoto'
          '('
          '    EmployeeId INT NOT NULL PRIMARY KEY,'
          '    Photo VARBINARY(MAX) FILESTREAM NULL,'
          '    MyRowGuidColumn UNIQUEIDENTIFIER NOT NULL ROWGUIDCOL UNIQUE DEFAULT NEWID()'
          ');'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable70'
        Lines.Strings = (
          'CREATE TABLE dbo.T1'
          '('
          '    c1 INT,'
          '    c2 NVARCHAR(200)'
          ')'
          'WITH (DATA_COMPRESSION = ROW);'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable71'
        Lines.Strings = (
          'CREATE TABLE dbo.T1'
          '('
          '    c1 INT PRIMARY KEY,'
          '    c2 VARCHAR(50) SPARSE NULL'
          ');'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable72'
        Lines.Strings = (
          'CREATE TABLE T1'
          '('
          '    c1 INT PRIMARY KEY,'
          '    c2 VARCHAR(50) SPARSE NULL,'
          '    c3 INT SPARSE NULL,'
          '    CSet XML COLUMN_SET FOR ALL_SPARSE_COLUMNS'
          ');'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable73'
        Lines.Strings = (
          'CREATE TABLE T1'
          '('
          '    c1 INT PRIMARY KEY,'
          '    c2 VARCHAR(50) SPARSE NULL,'
          '    c3 INT SPARSE NULL,'
          '    CSet XML COLUMN_SET FOR ALL_SPARSE_COLUMNS'
          ');'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable74'
        Lines.Strings = (
          'CREATE TABLE Department'
          '('
          '    DepartmentNumber CHAR(10) NOT NULL PRIMARY KEY CLUSTERED,'
          '    DepartmentName VARCHAR(50) NOT NULL,'
          '    ManagerID INT NULL,'
          '    ParentDepartmentNumber CHAR(10) NULL,'
          '    SysStartTime DATETIME2 GENERATED ALWAYS AS ROW START HIDDEN NOT NULL,'
          '    SysEndTime DATETIME2 GENERATED ALWAYS AS ROW END HIDDEN NOT NULL,'
          '    PERIOD FOR SYSTEM_TIME (SysStartTime, SysEndTime)'
          ')'
          'WITH (SYSTEM_VERSIONING = ON);'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable75'
        Lines.Strings = (
          'CREATE TABLE Department_History'
          '('
          '    DepartmentNumber CHAR(10) NOT NULL,'
          '    DepartmentName VARCHAR(50) NOT NULL,'
          '    ManagerID INT NULL,'
          '    ParentDepartmentNumber CHAR(10) NULL,'
          '    SysStartTime DATETIME2 NOT NULL,'
          '    SysEndTime DATETIME2 NOT NULL'
          ');'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable76'
        Lines.Strings = (
          'CREATE TABLE Department'
          '('
          '    DepartmentNumber CHAR(10) NOT NULL PRIMARY KEY CLUSTERED,'
          '    DepartmentName VARCHAR(50) NOT NULL,'
          '    ManagerID INT NULL,'
          '    ParentDepartmentNumber CHAR(10) NULL,'
          '    SysStartTime DATETIME2 GENERATED ALWAYS AS ROW START HIDDEN NOT NULL,'
          '    SysEndTime DATETIME2 GENERATED ALWAYS AS ROW END HIDDEN NOT NULL,'
          '    PERIOD FOR SYSTEM_TIME (SysStartTime, SysEndTime)'
          ')'
          'WITH (SYSTEM_VERSIONING = ON (HISTORY_TABLE = dbo.Department_History, DATA_CONSISTENCY_CHECK = ON));'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable77'
        Lines.Strings = (
          'CREATE TABLE dbo.Department'
          '('
          '    DepartmentNumber CHAR(10) NOT NULL PRIMARY KEY NONCLUSTERED,'
          '    DepartmentName VARCHAR(50) NOT NULL,'
          '    ManagerID INT NULL,'
          '    ParentDepartmentNumber CHAR(10) NULL,'
          '    SysStartTime DATETIME2 GENERATED ALWAYS AS ROW START HIDDEN NOT NULL,'
          '    SysEndTime DATETIME2 GENERATED ALWAYS AS ROW END HIDDEN NOT NULL,'
          '    PERIOD FOR SYSTEM_TIME (SysStartTime, SysEndTime)'
          ')'
          'WITH'
          '('
          '    MEMORY_OPTIMIZED = ON,'
          '    DURABILITY = SCHEMA_AND_DATA,'
          '    SYSTEM_VERSIONING = ON (HISTORY_TABLE = History.DepartmentHistory)'
          ');'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable78'
        Lines.Strings = (
          'CREATE TABLE Department_History'
          '('
          '    DepartmentNumber CHAR(10) NOT NULL,'
          '    DepartmentName VARCHAR(50) NOT NULL,'
          '    ManagerID INT NULL,'
          '    ParentDepartmentNumber CHAR(10) NULL,'
          '    SysStartTime DATETIME2 NOT NULL,'
          '    SysEndTime DATETIME2 NOT NULL'
          ');'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable79'
        Lines.Strings = (
          'CREATE TABLE Department'
          '('
          '    DepartmentNumber CHAR(10) NOT NULL PRIMARY KEY CLUSTERED,'
          '    DepartmentName VARCHAR(50) NOT NULL,'
          '    ManagerID INT NULL,'
          '    ParentDepartmentNumber CHAR(10) NULL,'
          '    SysStartTime DATETIME2 GENERATED ALWAYS AS ROW START HIDDEN NOT NULL,'
          '    SysEndTime DATETIME2 GENERATED ALWAYS AS ROW END HIDDEN NOT NULL,'
          '    PERIOD FOR SYSTEM_TIME (SysStartTime, SysEndTime)'
          ')'
          'WITH'
          '('
          '    SYSTEM_VERSIONING = ON (HISTORY_TABLE = dbo.Department_History, DATA_CONSISTENCY_CHECK = ON)'
          ');'
          ''
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable80'
        Lines.Strings = (
          'CREATE TABLE Customers ('
          '    CustName NVARCHAR(60)'
          '        ENCRYPTED WITH ('
          '            COLUMN_ENCRYPTION_KEY = MyCEK,'
          '            ENCRYPTION_TYPE = RANDOMIZED,'
          '            ALGORITHM = ''AEAD_AES_256_CBC_HMAC_SHA_256'''
          '        ),'
          '    SSN VARCHAR(11) COLLATE Latin1_General_BIN2'
          '        ENCRYPTED WITH ('
          '            COLUMN_ENCRYPTION_KEY = MyCEK,'
          '            ENCRYPTION_TYPE = DETERMINISTIC ,'
          '            ALGORITHM = ''AEAD_AES_256_CBC_HMAC_SHA_256'''
          '        ),'
          '    Age INT NULL'
          ');'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable81'
        Lines.Strings = (
          'CREATE TABLE t1'
          '('
          '    c1 INT,'
          '    index IX1 (c1) WHERE c1 > 0'
          ');'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable82'
        Lines.Strings = (
          'CREATE TABLE t1'
          '('
          '    c1 INT,'
          '    INDEX ix_1 NONCLUSTERED (c1)'
          ');'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable83'
        Lines.Strings = (
          'CREATE TABLE t2'
          '('
          '    c1 INT,'
          '    c2 INT INDEX ix_1 NONCLUSTERED'
          ');'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable84'
        Lines.Strings = (
          'CREATE TABLE t3'
          '('
          '    c1 INT,'
          '    c2 INT,'
          '    INDEX ix_1 NONCLUSTERED (c1,c2)'
          ');'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable85'
        Lines.Strings = (
          'CREATE TABLE #tmp'
          '('
          '    c1 INT,'
          '    c2 INT,'
          '    PRIMARY KEY CLUSTERED ([c1], [c2])'
          ');'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable86'
        Lines.Strings = (
          'CREATE TABLE new_employees'
          '('
          ' id_num int IDENTITY(1,1),'
          ' fname varchar (20),'
          ' minit char(1),'
          ' lname varchar(30)'
          ');'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable87'
        Lines.Strings = (
          'CREATE TABLE img (id_num INT IDENTITY(1,1), company_name sysname);'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable88'
        Lines.Strings = (
          'CREATE TABLE dbo.SUPPLY1 ('
          'supplyID INT PRIMARY KEY CHECK (supplyID BETWEEN 1 and 150),'
          'supplier CHAR(50)'
          ');'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable89'
        Lines.Strings = (
          'CREATE TABLE dbo.SUPPLY2 ('
          'supplyID INT PRIMARY KEY CHECK (supplyID BETWEEN 151 and 300),'
          'supplier CHAR(50)'
          ');'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable90'
        Lines.Strings = (
          'CREATE TABLE dbo.SUPPLY3 ('
          'supplyID INT PRIMARY KEY CHECK (supplyID BETWEEN 301 and 450),'
          'supplier CHAR(50)'
          ');'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable91'
        Lines.Strings = (
          'CREATE TABLE dbo.SUPPLY4 ('
          'supplyID INT PRIMARY KEY CHECK (supplyID BETWEEN 451 and 600),'
          'supplier CHAR(50)'
          ');'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable92'
        Lines.Strings = (
          'CREATE TABLE T ('
          '        i int primary key,'
          '        x xml (ManuInstructionsSchemaCollection));'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable93'
        Lines.Strings = (
          'CREATE TABLE T (Col1 xml (mySC));'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable94'
        Lines.Strings = (
          'CREATE TABLE #temptable (col1 INT);'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable95'
        Lines.Strings = (
          'CREATE TABLE T1 (Col1 INT);'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateTable96'
        Lines.Strings = (
          'CREATE TABLE T1 (c VARCHAR(11));'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateExternalTable1'
        Lines.Strings = (
          'CREATE EXTERNAL TABLE [dbo].[FastCustomers2009] ('
          '        [FirstName] char(25) NOT NULL,'
          '        [LastName] char(25) NOT NULL,'
          '        [YearlyIncome] float NULL,'
          '        [MaritalStatus] char(1) NOT NULL'
          ')'
          'WITH ('
          '        LOCATION=''/old_data/2009/customerdata.tbl'','
          '        DATA_SOURCE = HadoopHDP2,'
          '        FILE_FORMAT = TextFileFormat,'
          '        REJECT_TYPE = VALUE,'
          '        REJECT_VALUE = 0'
          ');'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateExternalTable2'
        Lines.Strings = (
          'CREATE EXTERNAL TABLE ClickStream ('
          '    url varchar(50),'
          '    event_date date,'
          '    user_IP varchar(50)'
          ')'
          'WITH ('
          '        LOCATION=''/webdata/employee.tbl'','
          '        DATA_SOURCE = mydatasource,'
          '        FILE_FORMAT = myfileformat'
          '    )'
          ';'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateExternalTable3'
        Lines.Strings = (
          'CREATE EXTERNAL TABLE ClickStream_rc ('
          '    url varchar(50),'
          '    event_date date,'
          '    user_ip varchar(50)'
          ')'
          'WITH ('
          '        LOCATION=''/webdata/employee_rc.tbl'','
          '        DATA_SOURCE = mydatasource_rc,'
          '        FILE_FORMAT = myfileformat_rc'
          '    )'
          ';'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateExternalTable4'
        Lines.Strings = (
          'CREATE EXTERNAL TABLE ClickStream_orc ('
          '    url varchar(50),'
          '    event_date date,'
          '    user_ip varchar(50)'
          ')'
          'WITH ('
          '        LOCATION=''/webdata/'','
          '        DATA_SOURCE = mydatasource_orc,'
          '        FILE_FORMAT = myfileformat_orc'
          '    )'
          ';'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateExternalTable5'
        Lines.Strings = (
          'CREATE EXTERNAL TABLE [dbo].[all_dm_exec_requests]([session_id] smallint NOT NULL,'
          '  [request_id] int NOT NULL,'
          '  [start_time] datetime NOT NULL,'
          '  [status] nvarchar(30) NOT NULL,'
          '  [command] nvarchar(32) NOT NULL,'
          '  [sql_handle] varbinary(64),'
          '  [statement_start_offset] int,'
          '  [statement_end_offset] int,'
          '  [cpu_time] int NOT NULL)'
          'WITH'
          '('
          '  DATA_SOURCE = MyExtSrc,'
          '  SCHEMA_NAME = ''sys'','
          '  OBJECT_NAME = ''dm_exec_requests'','
          '  DISTRIBUTION=ROUND_ROBIN'
          ');'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateExternalTable6'
        Lines.Strings = (
          '     CREATE EXTERNAL TABLE sqlserver.customer('
          '     C_CUSTKEY INT NOT NULL,'
          '     C_NAME VARCHAR(25) NOT NULL,'
          '     C_ADDRESS VARCHAR(40) NOT NULL,'
          '     C_NATIONKEY INT NOT NULL,'
          '     C_PHONE CHAR(15) NOT NULL,'
          '     C_ACCTBAL DECIMAL(15,2) NOT NULL,'
          '     C_MKTSEGMENT CHAR(10) NOT NULL,'
          '     C_COMMENT VARCHAR(117) NOT NULL'
          '      )'
          '      WITH ('
          '      LOCATION=''tpch_10.dbo.customer'','
          '      DATA_SOURCE=SqlServerInstance'
          '     );'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateExternalTable7'
        Lines.Strings = (
          '   CREATE EXTERNAL TABLE customers('
          '   [O_ORDERKEY] DECIMAL(38) NOT NULL,'
          '   [O_CUSTKEY] DECIMAL(38) NOT NULL,'
          '   [O_ORDERSTATUS] CHAR COLLATE Latin1_General_BIN NOT NULL,'
          '   [O_TOTALPRICE] DECIMAL(15,2) NOT NULL,'
          '   [O_ORDERDATE] DATETIME2(0) NOT NULL,'
          '   [O_ORDERPRIORITY] CHAR(15) COLLATE Latin1_General_BIN NOT NULL,'
          '   [O_CLERK] CHAR(15) COLLATE Latin1_General_BIN NOT NULL,'
          '   [O_SHIPPRIORITY] DECIMAL(38) NOT NULL,'
          '   [O_COMMENT] VARCHAR(79) COLLATE Latin1_General_BIN NOT NULL'
          '   )'
          '   WITH ('
          '    LOCATION=''.mySchema.customer'','
          '    DATA_SOURCE= external_data_source_name'
          '   );'
          ''
          ''
          ''
        )
      end    
      item
        Caption = 'CreateExternalTable8'
        Lines.Strings = (
          '     CREATE EXTERNAL TABLE customer('
          '      L_ORDERKEY INT NOT NULL,'
          '      L_PARTKEY INT NOT NULL,'
          '     L_SUPPKEY INT NOT NULL,'
          '     L_LINENUMBER INT NOT NULL,'
          '     L_QUANTITY DECIMAL(15,2) NOT NULL,'
          '     L_EXTENDEDPRICE DECIMAL(15,2) NOT NULL,'
          '     L_DISCOUNT DECIMAL(15,2) NOT NULL,'
          '     L_TAX DECIMAL(15,2) NOT NULL,'
          '     L_RETURNFLAG CHAR NOT NULL,'
          '     L_LINESTATUS CHAR NOT NULL,'
          '     L_SHIPDATE DATE NOT NULL,'
          '     L_COMMITDATE DATE NOT NULL,'
          '     L_RECEIPTDATE DATE NOT NULL,'
          '     L_SHIPINSTRUCT CHAR(25) NOT NULL,'
          '     L_SHIPMODE CHAR(10) NOT NULL,'
          '     L_COMMENT VARCHAR(44) NOT NULL'
          '     )'
          '     WITH ('
          '     LOCATION=''customer'','
          '     DATA_SOURCE= external_data_source_name'
          '     );'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateExternalTable9'
        Lines.Strings = (
          '     CREATE EXTERNAL TABLE customers('
          '     [O_ORDERKEY] DECIMAL(38) NOT NULL,'
          '     [O_CUSTKEY] DECIMAL(38) NOT NULL,'
          '     [O_ORDERSTATUS] CHAR COLLATE Latin1_General_BIN NOT NULL,'
          '     [O_TOTALPRICE] DECIMAL(15,2) NOT NULL,'
          '     [O_ORDERDATE] DATETIME2(0) NOT NULL,'
          '     [O_COMMENT] VARCHAR(79) COLLATE Latin1_General_BIN NOT NULL'
          '     )'
          '     WITH ('
          '     LOCATION=''customer'','
          '     DATA_SOURCE= external_data_source_name'
          '     );'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable1'
        Lines.Strings = (
          'ALTER TABLE HumanResources.EmployeeDepartmentHistory'
          'CHECK CONSTRAINT FK_EmployeeDepartmentHistory_Department_DepartmentID;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable2'
        Lines.Strings = (
          'ALTER TABLE dbo.doc_exa ADD column_b VARCHAR(20) NULL ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable3'
        Lines.Strings = (
          'ALTER TABLE dbo.doc_exc ADD column_b VARCHAR(20) NULL'
          '    CONSTRAINT exb_unique UNIQUE ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable4'
        Lines.Strings = (
          'ALTER TABLE dbo.doc_exd WITH NOCHECK'
          'ADD CONSTRAINT exd_check CHECK (column_a > 1) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable5'
        Lines.Strings = (
          'ALTER TABLE dbo.doc_exz'
          '  ADD CONSTRAINT col_b_def'
          '  DEFAULT 50 FOR column_b ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable6'
        Lines.Strings = (
          'ALTER TABLE dbo.doc_exe ADD'
          ''
          '-- Add a PRIMARY KEY identity column.'
          'column_b INT IDENTITY'
          'CONSTRAINT column_b_pk PRIMARY KEY,'
          ''
          '-- Add a column that references another column in the same table.'
          'column_c INT NULL'
          'CONSTRAINT column_c_fk'
          'REFERENCES doc_exe(column_a),'
          ''
          '-- Add a column with a constraint to enforce that'
          '-- nonnull data is in a valid telephone number format.'
          'column_d VARCHAR(16) NULL'
          'CONSTRAINT column_d_chk'
          'CHECK'
          '(column_d LIKE ''[0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]'' OR'
          'column_d LIKE'
          '''([0-9][0-9][0-9]) [0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]''),'
          ''
          '-- Add a nonnull column with a default.'
          'column_e DECIMAL(3,3)'
          'CONSTRAINT column_e_default'
          'DEFAULT .081 ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable7'
        Lines.Strings = (
          'ALTER TABLE dbo.doc_exf'
          'ADD AddDate smalldatetime NULL'
          'CONSTRAINT AddDateDflt'
          'DEFAULT GETDATE() WITH VALUES ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable8'
        Lines.Strings = (
          'ALTER TABLE Production.TransactionHistoryArchive WITH NOCHECK'
          'ADD CONSTRAINT PK_TransactionHistoryArchive_TransactionID PRIMARY KEY CLUSTERED (TransactionID)'
          'WITH (FILLFACTOR = 75, ONLINE = ON, PAD_INDEX = ON);'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable9'
        Lines.Strings = (
          'ALTER TABLE Production.TransactionHistoryArchive WITH NOCHECK'
          'ADD CONSTRAINT PK_TransactionHistoryArchive_TransactionID PRIMARY KEY CLUSTERED (TransactionID)'
          'WITH (DATA_COMPRESSION = PAGE);'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable10'
        Lines.Strings = (
          'ALTER TABLE T1'
          'ADD C5 CHAR(100) SPARSE NULL ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable11'
        Lines.Strings = (
          'ALTER TABLE T1'
          'ALTER COLUMN C4 ADD SPARSE ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable12'
        Lines.Strings = (
          'ALTER TABLE T1'
          'ALTER COLUMN C4 DROP SPARSE ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable13'
        Lines.Strings = (
          ''
          'ALTER TABLE T2'
          'ADD CS XML COLUMN_SET FOR ALL_SPARSE_COLUMNS ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable14'
        Lines.Strings = (
          ''
          'ALTER TABLE T2'
          'ALTER COLUMN C2 ADD SPARSE ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable15'
        Lines.Strings = (
          ''
          'ALTER TABLE T2'
          'ALTER COLUMN C3 ADD SPARSE ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable16'
        Lines.Strings = (
          ''
          'ALTER TABLE Customers ADD'
          '    PromotionCode nvarchar(100)'
          '    ENCRYPTED WITH (COLUMN_ENCRYPTION_KEY = MyCEK,'
          '    ENCRYPTION_TYPE = RANDOMIZED,'
          '    ALGORITHM = ''AEAD_AES_256_CBC_HMAC_SHA_256'') ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable17'
        Lines.Strings = (
          'ALTER TABLE dbo.doc_exb DROP COLUMN column_b ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable18'
        Lines.Strings = (
          'ALTER TABLE dbo.doc_exb DROP COLUMN column_c, column_d;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable19'
        Lines.Strings = (
          'ALTER TABLE dbo.doc_exc DROP my_constraint ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable20'
        Lines.Strings = (
          'ALTER TABLE dbo.doc_exc'
          'DROP CONSTRAINT my_constraint, my_pk_constraint, COLUMN column_b ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable21'
        Lines.Strings = (
          ''
          'ALTER TABLE Production.TransactionHistoryArchive'
          'DROP CONSTRAINT PK_TransactionHistoryArchive_TransactionID'
          'WITH (ONLINE = ON) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable22'
        Lines.Strings = (
          'ALTER TABLE Person.ContactBackup'
          'ADD CONSTRAINT FK_ContactBackup_Contact FOREIGN KEY (ContactID)'
          '    REFERENCES Person.Person (BusinessEntityID) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable23'
        Lines.Strings = (
          ''
          'ALTER TABLE Person.ContactBackup'
          'DROP CONSTRAINT FK_ContactBackup_Contact ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable24'
        Lines.Strings = (
          'ALTER TABLE dbo.doc_exy ALTER COLUMN column_a DECIMAL (5, 2) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable25'
        Lines.Strings = (
          'ALTER TABLE dbo.doc_exy ALTER COLUMN col_a varchar(25) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable26'
        Lines.Strings = (
          'ALTER TABLE dbo.doc_exy ALTER COLUMN col_b decimal (10,4) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable27'
        Lines.Strings = (
          ''
          'ALTER TABLE T3'
          'ALTER COLUMN C2 varchar(50) COLLATE Latin1_General_BIN ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable28'
        Lines.Strings = (
          'ALTER TABLE T3'
          'ALTER COLUMN C2 VARCHAR(50) ENCRYPTED WITH (COLUMN_ENCRYPTION_KEY = [CEK1], ENCRYPTION_TYPE = Randomized, ALGORITHM = ''AEAD_AES_256_CBC_HMAC_SHA_256'') NULL;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable29'
        Lines.Strings = (
          ''
          'ALTER TABLE T1'
          'REBUILD WITH (DATA_COMPRESSION = PAGE) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable30'
        Lines.Strings = (
          'ALTER TABLE PartitionTable1'
          'REBUILD PARTITION = 1 WITH (DATA_COMPRESSION =NONE) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable31'
        Lines.Strings = (
          'ALTER TABLE PartitionTable1'
          'REBUILD PARTITION = ALL'
          'WITH (DATA_COMPRESSION = PAGE ON PARTITIONS(1)) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable32'
        Lines.Strings = (
          ''
          'ALTER TABLE PartitionTable1'
          'REBUILD PARTITION = 1 WITH (DATA_COMPRESSION = COLUMNSTORE_ARCHIVE) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable33'
        Lines.Strings = (
          'ALTER TABLE PartitionTable1'
          'REBUILD PARTITION = 1 WITH (DATA_COMPRESSION = COLUMNSTORE) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable34'
        Lines.Strings = (
          'ALTER TABLE PartitionTable SWITCH PARTITION 2 TO NonPartitionTable ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable35'
        Lines.Strings = (
          'ALTER TABLE dbo.T1 SET (LOCK_ESCALATION = AUTO) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable36'
        Lines.Strings = (
          'ALTER TABLE Person.Person'
          'ENABLE CHANGE_TRACKING ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable37'
        Lines.Strings = (
          'ALTER TABLE Person.Person'
          'ENABLE CHANGE_TRACKING'
          'WITH (TRACK_COLUMNS_UPDATED = ON)'
          ''
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable38'
        Lines.Strings = (
          'ALTER TABLE Person.Person'
          'DISABLE CHANGE_TRACKING ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable39'
        Lines.Strings = (
          'ALTER TABLE dbo.cnst_example NOCHECK CONSTRAINT salary_cap;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable40'
        Lines.Strings = (
          'ALTER TABLE dbo.cnst_example CHECK CONSTRAINT salary_cap;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable41'
        Lines.Strings = (
          'ALTER TABLE dbo.trig_example DISABLE TRIGGER trig1 ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable42'
        Lines.Strings = (
          'ALTER TABLE dbo.trig_example ENABLE TRIGGER trig1 ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable43'
        Lines.Strings = (
          'ALTER TABLE T1'
          'REBUILD WITH'
          '('
          '    PAD_INDEX = ON,'
          '    ONLINE = ON ( WAIT_AT_LOW_PRIORITY ( MAX_DURATION = 4 MINUTES,'
          '                                         ABORT_AFTER_WAIT = BLOCKERS ) )'
          ') ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable44'
        Lines.Strings = (
          'ALTER TABLE dbo.doc_exy'
          '    ALTER COLUMN column_a DECIMAL (5, 2) WITH (ONLINE = ON) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable45'
        Lines.Strings = (
          'ALTER TABLE InsurancePolicy'
          'ADD PERIOD FOR SYSTEM_TIME (SysStartTime, SysEndTime),'
          'SysStartTime datetime2 GENERATED ALWAYS AS ROW START HIDDEN NOT NULL'
          '    DEFAULT SYSUTCDATETIME(),'
          'SysEndTime datetime2 GENERATED ALWAYS AS ROW END HIDDEN NOT NULL'
          '    DEFAULT CONVERT(DATETIME2, ''9999-12-31 23:59:59.99999999'') ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable46'
        Lines.Strings = (
          'ALTER TABLE InsurancePolicy'
          'SET (SYSTEM_VERSIONING = ON (HISTORY_RETENTION_PERIOD = 1 YEAR)) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable47'
        Lines.Strings = (
          'ALTER TABLE ProjectTask ALTER COLUMN [Changed Date] datetime2 NOT NULL ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable48'
        Lines.Strings = (
          'ALTER TABLE ProjectTask ALTER COLUMN [Revised Date] datetime2 NOT NULL ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable49'
        Lines.Strings = (
          'ALTER TABLE ProjectTaskHistory ALTER COLUMN [Changed Date] datetime2 NOT NULL ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable50'
        Lines.Strings = (
          'ALTER TABLE ProjectTaskHistory ALTER COLUMN [Revised Date] datetime2 NOT NULL ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable51'
        Lines.Strings = (
          'ALTER TABLE ProjectTask'
          'ADD PERIOD FOR SYSTEM_TIME ([Changed Date], [Revised Date])'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable52'
        Lines.Strings = (
          ''
          'ALTER TABLE ProjectTask'
          'SET (SYSTEM_VERSIONING = ON (HISTORY_TABLE = dbo.ProjectTaskHistory, DATA_CONSISTENCY_CHECK = ON))'
          ''
        )
      end    
      item
        Caption = 'AlterTable53'
        Lines.Strings = (
          'ALTER TABLE Department'
          '    SET (SYSTEM_VERSIONING = OFF) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable54'
        Lines.Strings = (
          'ALTER TABLE Department'
          '     ADD Col5 int NOT NULL DEFAULT 0 ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable55'
        Lines.Strings = (
          'ALTER TABLE DepartmentHistory'
          '    ADD Col5 int NOT NULL DEFAULT 0 ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable56'
        Lines.Strings = (
          'ALTER TABLE Department'
          '    SET (SYSTEM_VERSIONING = ON (HISTORY_TABLE=dbo.DepartmentHistory,'
          '                                 DATA_CONSISTENCY_CHECK = OFF)) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable57'
        Lines.Strings = (
          'ALTER TABLE Department'
          '    SET (SYSTEM_VERSIONING = OFF) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable58'
        Lines.Strings = (
          'ALTER TABLE Department'
          'DROP PERIOD FOR SYSTEM_TIME ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterTable59'
        Lines.Strings = (
          'ALTER TABLE Production.TransactionHistoryArchive'
          'DROP CONSTRAINT PK_TransactionHistoryArchive_TransactionID'
          'WITH (ONLINE = ON);'
          ''
          ''
          ''
        )
      end    
      item
        Caption = 'DropTable1'
        Lines.Strings = (
          '    DROP TABLE dbo.Table1;'
          ''
          ''
        )
      end    
      item
        Caption = 'DropTable2'
        Lines.Strings = (
          'DROP TABLE #MyTempTable;'
          ''
          ''
        )
      end    
      item
        Caption = 'DropTable3'
        Lines.Strings = (
          'DROP TABLE IF EXISTS #tmpdbs'
          ''
          ''
        )
      end    
      item
        Caption = 'DropTable4'
        Lines.Strings = (
          'DROP TABLE dbo.doc_exc ;'
          ''
          ''
        )
      end    
      item
        Caption = 'DropTable5'
        Lines.Strings = (
          'DROP TABLE dbo.doc_exz ;'
        )
      end    
      item
        Caption = 'DropTable6'
        Lines.Strings = (
          'DROP TABLE dbo.doc_exe ;'
        )
      end    
      item
        Caption = 'DropTable7'
        Lines.Strings = (
          'DROP TABLE dbo.doc_exf ;'
          ''
          ''
        )
      end    
      item
        Caption = 'DropTable8'
        Lines.Strings = (
          'DROP TABLE Person.ContactBackup ;'
          ''
          ''
        )
      end    
      item
        Caption = 'DropTable9'
        Lines.Strings = (
          'DROP TABLE dbo.doc_exy ;'
          ''
        )
      end    
      item
        Caption = 'DropTable10'
        Lines.Strings = (
          'DROP TABLE DepartmentHistory ;'
          ''
        )
      end    
      item
        Caption = 'DropTable11'
        Lines.Strings = (
          'DROP TABLE #Test;'
          ''
          ''
        )
      end    
      item
        Caption = 'DropTable12'
        Lines.Strings = (
          'DROP TABLE ProductVendor1 ;'
          ''
        )
      end    
      item
        Caption = 'DropTable13'
        Lines.Strings = (
          'DROP TABLE AdventureWorks2012.dbo.SalesPerson2 ;'
          ''
        )
      end    
      item
        Caption = 'DropTable14'
        Lines.Strings = (
          'DROP TABLE #temptable;'
          ''
        )
      end    
      item
        Caption = 'DropTable15'
        Lines.Strings = (
          'DROP TABLE IF EXISTS T1;'
        )
      end    
      item
        Caption = 'TruncateTable1'
        Lines.Strings = (
          'TRUNCATE TABLE HumanResources.JobCandidate;'
          ''
        )
      end    
      item
        Caption = 'TruncateTable2'
        Lines.Strings = (
          'TRUNCATE TABLE PartitionTable1'
          'WITH (PARTITIONS (2, 4, 6 TO 8));'
        )
      end    
      item
        Caption = 'CreateIndex1'
        Lines.Strings = (
          'CREATE INDEX nc1_simple ON SimpleTable (OrderDateKey);'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateIndex2'
        Lines.Strings = (
          'CREATE INDEX nc2_simple ON SimpleTable (DueDateKey);'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateIndex3'
        Lines.Strings = (
          'CREATE INDEX my_index ON MyFactTable ( ProductKey, OrderDateKey );'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateIndex4'
        Lines.Strings = (
          'CREATE INDEX i1 ON t1 (col1);'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateIndex5'
        Lines.Strings = (
          'CREATE CLUSTERED INDEX i1 ON d1.s1.t1 (col1);'
          ''
        )
      end    
      item
        Caption = 'CreateIndex6'
        Lines.Strings = (
          'CREATE UNIQUE INDEX i1 ON t1 (col1 DESC, col2 ASC, col3 DESC);'
          ''
        )
      end    
      item
        Caption = 'CreateIndex7'
        Lines.Strings = (
          'CREATE INDEX IX_VendorID ON ProductVendor (VendorID);'
          ''
        )
      end    
      item
        Caption = 'CreateIndex8'
        Lines.Strings = (
          'CREATE INDEX IX_VendorID ON dbo.ProductVendor (VendorID DESC, Name ASC, Address DESC);'
          ''
        )
      end    
      item
        Caption = 'CreateIndex9'
        Lines.Strings = (
          'CREATE INDEX IX_VendorID ON Purchasing..ProductVendor (VendorID);'
          ''
        )
      end    
      item
        Caption = 'CreateIndex10'
        Lines.Strings = (
          'CREATE NONCLUSTERED INDEX IX_SalesPerson_SalesQuota_SalesYTD ON Sales.SalesPerson (SalesQuota, SalesYTD);'
          ''
        )
      end    
      item
        Caption = 'CreateIndex11'
        Lines.Strings = (
          'CREATE CLUSTERED INDEX IX_ProductVendor_VendorID ON Purchasing..ProductVendor (VendorID);'
          ''
        )
      end    
      item
        Caption = 'CreateIndex12'
        Lines.Strings = (
          'CREATE INDEX IX_FF ON dbo.FactFinance (FinanceKey ASC, DateKey ASC);'
          ''
        )
      end    
      item
        Caption = 'CreateIndex13'
        Lines.Strings = (
          'CREATE INDEX IX_FF ON dbo.FactFinance (FinanceKey, DateKey, OrganizationKey DESC)'
          '  WITH (DROP_EXISTING = ON);'
          ''
        )
      end    
      item
        Caption = 'CreateIndex14'
        Lines.Strings = (
          'CREATE UNIQUE INDEX AK_UnitMeasure_Name'
          '  ON Production.UnitMeasure(Name);'
          ''
        )
      end    
      item
        Caption = 'CreateIndex15'
        Lines.Strings = (
          'CREATE UNIQUE INDEX AK_Index ON #Test (C2)'
          '  WITH (IGNORE_DUP_KEY = ON);'
          ''
        )
      end    
      item
        Caption = 'CreateIndex16'
        Lines.Strings = (
          'CREATE UNIQUE INDEX AK_Index ON #Test (C2)'
          '  WITH (IGNORE_DUP_KEY = OFF);'
          ''
        )
      end    
      item
        Caption = 'CreateIndex17'
        Lines.Strings = (
          'CREATE NONCLUSTERED INDEX IX_WorkOrder_ProductID'
          '  ON Production.WorkOrder(ProductID)'
          '    WITH (FILLFACTOR = 80,'
          '      PAD_INDEX = ON,'
          '      DROP_EXISTING = ON);'
        )
      end    
      item
        Caption = 'CreateIndex18'
        Lines.Strings = (
          'CREATE UNIQUE CLUSTERED INDEX IDX_V1 ON Sales.vOrders (OrderDate, ProductID);'
          ''
        )
      end    
      item
        Caption = 'CreateIndex19'
        Lines.Strings = (
          'CREATE NONCLUSTERED INDEX IX_Address_PostalCode'
          '  ON Person.Address (PostalCode)'
          '  INCLUDE (AddressLine1, AddressLine2, City, StateProvinceID);'
          ''
        )
      end    
      item
        Caption = 'CreateIndex20'
        Lines.Strings = (
          'CREATE NONCLUSTERED INDEX IX_TransactionHistory_ReferenceOrderID'
          '  ON Production.TransactionHistory (ReferenceOrderID)'
          '  ON TransactionsPS1 (TransactionDate);'
          ''
        )
      end    
      item
        Caption = 'CreateIndex21'
        Lines.Strings = (
          'CREATE NONCLUSTERED INDEX "FIBillOfMaterialsWithEndDate"'
          '  ON Production.BillOfMaterials (ComponentID, StartDate)'
          '  WHERE EndDate IS NOT NULL;'
          ''
        )
      end    
      item
        Caption = 'CreateIndex22'
        Lines.Strings = (
          'CREATE NONCLUSTERED INDEX IX_INDEX_1'
          '  ON T1 (C2)'
          '  WITH (DATA_COMPRESSION = ROW);'
          ''
        )
      end    
      item
        Caption = 'CreateIndex23'
        Lines.Strings = (
          'CREATE CLUSTERED INDEX IX_PartTab2Col1'
          '  ON PartitionTable1 (Col1)'
          '  WITH (DATA_COMPRESSION = ROW);'
          ''
        )
      end    
      item
        Caption = 'CreateIndex24'
        Lines.Strings = (
          'CREATE CLUSTERED INDEX IX_PartTab2Col1'
          '  ON PartitionTable1 (Col1)'
          '  WITH ('
          '    DATA_COMPRESSION = PAGE ON PARTITIONS(1),'
          '    DATA_COMPRESSION = ROW ON PARTITIONS (2 TO 4)'
          '  );'
          ''
        )
      end    
      item
        Caption = 'CreateIndex25'
        Lines.Strings = (
          'CREATE INDEX test_idx1 ON test_table (col1) WITH (ONLINE = ON, MAXDOP = 1, RESUMABLE = ON);'
          ''
        )
      end    
      item
        Caption = 'CreateIndex26'
        Lines.Strings = (
          'CREATE INDEX test_idx2 ON test_table (col2) WITH (ONLINE = ON, RESUMABLE = ON, MAX_DURATION = 240);'
        )
      end    
      item
        Caption = 'CreateIndex27'
        Lines.Strings = (
          'CREATE FULLTEXT INDEX ON table_1 (column_name) KEY INDEX unique_key_index'
          '   WITH SEARCH PROPERTY LIST=spl_1;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterIndex1'
        Lines.Strings = (
          'ALTER INDEX idxcci_cci_target ON cci_target REORGANIZE WITH (COMPRESS_ALL_ROW_GROUPS = ON);'
          ''
        )
      end    
      item
        Caption = 'AlterIndex2'
        Lines.Strings = (
          'ALTER INDEX idxcci_cci_target ON cci_target REORGANIZE WITH (COMPRESS_ALL_ROW_GROUPS = ON);'
          ''
        )
      end    
      item
        Caption = 'AlterIndex3'
        Lines.Strings = (
          'ALTER INDEX cci_FactInternetSales2 ON FactInternetSales2 REORGANIZE;'
          ''
        )
      end    
      item
        Caption = 'AlterIndex4'
        Lines.Strings = (
          'ALTER INDEX cci_FactInternetSales2 ON FactInternetSales2 REORGANIZE PARTITION = 0;'
          ''
        )
      end    
      item
        Caption = 'AlterIndex5'
        Lines.Strings = (
          'ALTER INDEX cci_FactInternetSales2 ON FactInternetSales2 REORGANIZE WITH (COMPRESS_ALL_ROW_GROUPS = ON);'
          ''
        )
      end    
      item
        Caption = 'AlterIndex6'
        Lines.Strings = (
          'ALTER INDEX cci_FactInternetSales2 ON FactInternetSales2 REORGANIZE PARTITION = 0 WITH (COMPRESS_ALL_ROW_GROUPS = ON);'
          ''
        )
      end    
      item
        Caption = 'AlterIndex7'
        Lines.Strings = (
          'ALTER INDEX cci_FactInternetSales2 ON FactInternetSales2 REORGANIZE;'
          ''
        )
      end    
      item
        Caption = 'AlterIndex8'
        Lines.Strings = (
          'ALTER INDEX cci_FactInternetSales2 ON FactInternetSales2 REBUILD;'
          ''
        )
      end    
      item
        Caption = 'AlterIndex9'
        Lines.Strings = (
          'ALTER INDEX cci_fact3'
          'ON fact3'
          'REBUILD PARTITION = 12;'
          ''
        )
      end    
      item
        Caption = 'AlterIndex10'
        Lines.Strings = (
          'ALTER INDEX cci_SimpleTable ON SimpleTable'
          'REBUILD'
          'WITH (DATA_COMPRESSION = COLUMNSTORE_ARCHIVE);'
          ''
        )
      end    
      item
        Caption = 'AlterIndex11'
        Lines.Strings = (
          'ALTER INDEX cci_SimpleTable ON SimpleTable'
          'REBUILD'
          'WITH (DATA_COMPRESSION = COLUMNSTORE);'
          ''
        )
      end    
      item
        Caption = 'AlterIndex12'
        Lines.Strings = (
          'ALTER INDEX PK_Employee_EmployeeID ON HumanResources.Employee REBUILD;'
          ''
        )
      end    
      item
        Caption = 'AlterIndex13'
        Lines.Strings = (
          'ALTER INDEX ALL ON Production.Product'
          'REBUILD WITH (FILLFACTOR = 80, SORT_IN_TEMPDB = ON, STATISTICS_NORECOMPUTE = ON);'
          ''
        )
      end    
      item
        Caption = 'AlterIndex14'
        Lines.Strings = (
          'ALTER INDEX ALL ON Production.Product'
          'REBUILD WITH'
          '('
          '    FILLFACTOR = 80,'
          '    SORT_IN_TEMPDB = ON,'
          '    STATISTICS_NORECOMPUTE = ON,'
          '    ONLINE = ON ( WAIT_AT_LOW_PRIORITY ( MAX_DURATION = 4 MINUTES, ABORT_AFTER_WAIT = BLOCKERS ) ),'
          '    DATA_COMPRESSION = ROW'
          ');'
          ''
        )
      end    
      item
        Caption = 'AlterIndex15'
        Lines.Strings = (
          'ALTER INDEX PK_ProductPhoto_ProductPhotoID ON Production.ProductPhoto REORGANIZE WITH (LOB_COMPACTION = ON);'
          ''
        )
      end    
      item
        Caption = 'AlterIndex16'
        Lines.Strings = (
          'ALTER INDEX AK_SalesOrderHeader_SalesOrderNumber ON'
          '    Sales.SalesOrderHeader'
          'SET ('
          '    STATISTICS_NORECOMPUTE = ON,'
          '    IGNORE_DUP_KEY = ON,'
          '    ALLOW_PAGE_LOCKS = ON'
          '    ) ;'
          ''
        )
      end    
      item
        Caption = 'AlterIndex17'
        Lines.Strings = (
          'ALTER INDEX IX_Employee_ManagerID ON HumanResources.Employee DISABLE;'
          ''
        )
      end    
      item
        Caption = 'AlterIndex18'
        Lines.Strings = (
          'ALTER INDEX PK_Department_DepartmentID ON HumanResources.Department DISABLE;'
          ''
        )
      end    
      item
        Caption = 'AlterIndex19'
        Lines.Strings = (
          'ALTER INDEX PK_Department_DepartmentID ON HumanResources.Department REBUILD;'
          ''
        )
      end    
      item
        Caption = 'AlterIndex20'
        Lines.Strings = (
          'ALTER INDEX IX_TransactionHistory_TransactionDate'
          'ON Production.TransactionHistory'
          'REBUILD Partition = 5'
          '   WITH (ONLINE = ON (WAIT_AT_LOW_PRIORITY (MAX_DURATION = 10 minutes, ABORT_AFTER_WAIT = SELF)));'
          ''
        )
      end    
      item
        Caption = 'AlterIndex21'
        Lines.Strings = (
          'ALTER INDEX IX_INDEX1'
          'ON T1'
          'REBUILD'
          'WITH (DATA_COMPRESSION = PAGE);'
          ''
        )
      end    
      item
        Caption = 'AlterIndex22'
        Lines.Strings = (
          'ALTER INDEX test_idx on test_table REBUILD WITH (ONLINE=ON, MAXDOP=1, RESUMABLE=ON) ;'
          ''
        )
      end    
      item
        Caption = 'AlterIndex23'
        Lines.Strings = (
          'ALTER INDEX test_idx on test_table REBUILD WITH (ONLINE=ON, RESUMABLE=ON, MAX_DURATION=240) ;'
          ''
        )
      end    
      item
        Caption = 'AlterIndex24'
        Lines.Strings = (
          'ALTER INDEX test_idx on test_table PAUSE ;'
          ''
        )
      end    
      item
        Caption = 'AlterIndex25'
        Lines.Strings = (
          'ALTER INDEX test_idx on test_table RESUME WITH (MAXDOP=4) ;'
          ''
        )
      end    
      item
        Caption = 'AlterIndex26'
        Lines.Strings = (
          'ALTER INDEX test_idx on test_table'
          '      RESUME WITH (MAXDOP=2, MAX_DURATION= 240 MINUTES,'
          '      WAIT_AT_LOW_PRIORITY (MAX_DURATION=10, ABORT_AFTER_WAIT=BLOCKERS)) ;'
          ''
        )
      end    
      item
        Caption = 'AlterIndex27'
        Lines.Strings = (
          'ALTER INDEX test_idx on test_table ABORT ;'
          ''
        )
      end    
      item
        Caption = 'AlterIndex28'
        Lines.Strings = (
          'ALTER INDEX sxi_index'
          'ON Tbl'
          'FOR'
          '('
          '    ADD pathm = ''/a/b/m'' as XQUERY ''node()'' ,'
          '    REMOVE pathabe'
          ');'
          ''
          'ALTER INDEX sxi_index'
          'ON Tbl'
          'PAD_INDEX = ON;'
          ''
        )
      end    
      item
        Caption = 'AlterIndex29'
        Lines.Strings = (
          'CREATE FULLTEXT INDEX ON table_1 (column_name) KEY INDEX unique_key_index'
          '   WITH SEARCH PROPERTY LIST=spl_1,'
          '   CHANGE_TRACKING OFF, NO POPULATION;'
          ''
        )
      end    
      item
        Caption = 'AlterIndex30'
        Lines.Strings = (
          'ALTER FULLTEXT INDEX ON table_1 START FULL POPULATION;'
          ''
        )
      end    
      item
        Caption = 'AlterIndex31'
        Lines.Strings = (
          'ALTER FULLTEXT INDEX ON table_1 SET SEARCH PROPERTY LIST spl_2;'
          ''
        )
      end    
      item
        Caption = 'AlterIndex32'
        Lines.Strings = (
          'ALTER FULLTEXT INDEX ON table_1'
          '   SET SEARCH PROPERTY LIST OFF WITH NO POPULATION;'
          ''
        )
      end    
      item
        Caption = 'AlterIndex33'
        Lines.Strings = (
          'ALTER FULLTEXT INDEX ON table_1 SET SEARCH PROPERTY LIST spl_1;'
          ''
        )
      end    
      item
        Caption = 'AlterIndex34'
        Lines.Strings = (
          'ALTER FULLTEXT INDEX ON HumanResources.JobCandidate'
          '   SET CHANGE_TRACKING MANUAL;'
          ''
        )
      end    
      item
        Caption = 'AlterIndex35'
        Lines.Strings = (
          'ALTER FULLTEXT INDEX ON Production.Document'
          '   SET SEARCH PROPERTY LIST DocumentPropertyList;'
          ''
        )
      end    
      item
        Caption = 'AlterIndex36'
        Lines.Strings = (
          'ALTER FULLTEXT INDEX ON Production.Document'
          '   SET SEARCH PROPERTY LIST OFF WITH NO POPULATION;'
          ''
        )
      end    
      item
        Caption = 'AlterIndex37'
        Lines.Strings = (
          'ALTER FULLTEXT INDEX ON HumanResources.JobCandidate'
          '   START FULL POPULATION;'
          ''
        )
      end    
      item
        Caption = 'AlterIndex38'
        Lines.Strings = (
          'ALTER INDEX my_CCI'
          'ON MyFactTable'
          'REBUILD PARTITION = ALL'
          'WITH ( DROP_EXISTING = ON );'
          ''
        )
      end    
      item
        Caption = 'CreateIndex28'
        Lines.Strings = (
          'CREATE CLUSTERED COLUMNSTORE INDEX idxcci_cci_target ON cci_target;'
          ''
        )
      end    
      item
        Caption = 'CreateIndex29'
        Lines.Strings = (
          'CREATE CLUSTERED COLUMNSTORE INDEX cci_FactInternetSales2'
          'ON dbo.FactInternetSales2;'
          ''
        )
      end    
      item
        Caption = 'CreateIndex30'
        Lines.Strings = (
          'CREATE CLUSTERED INDEX cci_SimpleTable ON SimpleTable (ProductKey);'
          ''
        )
      end    
      item
        Caption = 'CreateIndex31'
        Lines.Strings = (
          'CREATE CLUSTERED COLUMNSTORE INDEX cci_SimpleTable'
          'ON SimpleTable'
          'WITH (DROP_EXISTING = ON);'
          ''
        )
      end    
      item
        Caption = 'CreateIndex32'
        Lines.Strings = (
          'CREATE CLUSTERED COLUMNSTORE INDEX cci_Simple ON SimpleTable;'
          ''
        )
      end    
      item
        Caption = 'CreateIndex33'
        Lines.Strings = (
          'CREATE CLUSTERED INDEX cl_simple ON SimpleTable (ProductKey);'
          ''
        )
      end    
      item
        Caption = 'CreateIndex34'
        Lines.Strings = (
          'CREATE CLUSTERED COLUMNSTORE INDEX cl_simple ON SimpleTable'
          'WITH (DROP_EXISTING = ON);'
          ''
        )
      end    
      item
        Caption = 'CreateIndex35'
        Lines.Strings = (
          'CREATE CLUSTERED COLUMNSTORE INDEX cci_simple ON SimpleTable;'
          ''
        )
      end    
      item
        Caption = 'CreateIndex36'
        Lines.Strings = (
          'CREATE CLUSTERED COLUMNSTORE INDEX MyCCI ON MyFactTable;'
          ''
        )
      end    
      item
        Caption = 'CreateIndex37'
        Lines.Strings = (
          'CREATE CLUSTERED COLUMNSTORE INDEX'
          'ClusteredIndex_d473567f7ea04d7aafcac5364c241e09'
          ' ON MyFactTable'
          'WITH DROP_EXISTING = ON;'
          ''
        )
      end    
      item
        Caption = 'CreateIndex38'
        Lines.Strings = (
          'CREATE CLUSTERED INDEX ci_MyTable'
          'ON MyFactTable'
          'WITH ( DROP EXISTING = ON );'
          ''
        )
      end    
      item
        Caption = 'CreateIndex39'
        Lines.Strings = (
          'CREATE CLUSTERED COLUMNSTORE INDEX my_CCI'
          'ON MyFactTable'
          'WITH ( DROP_EXISTING = ON );'
          ''
        )
      end    
      item
        Caption = 'CreateIndex40'
        Lines.Strings = (
          'CREATE CLUSTERED INDEX cl_simple ON SimpleTable (ProductKey);'
          ''
        )
      end    
      item
        Caption = 'CreateIndex41'
        Lines.Strings = (
          'CREATE NONCLUSTERED COLUMNSTORE INDEX csindx_simple'
          'ON SimpleTable'
          '(OrderDateKey, DueDateKey, ShipDateKey);'
          ''
        )
      end    
      item
        Caption = 'CreateIndex42'
        Lines.Strings = (
          'CREATE NONCLUSTERED COLUMNSTORE INDEX csindx_simple'
          'ON SimpleTable'
          '(OrderDateKey, DueDateKey, ShipDateKey)'
          'WITH (DROP_EXISTING =  ON,'
          '    MAXDOP = 2)'
          'ON "default"'
          ''
        )
      end    
      item
        Caption = 'CreateIndex43'
        Lines.Strings = (
          'CREATE NONCLUSTERED COLUMNSTORE INDEX "FIBillOfMaterialsWithEndDate"'
          '    ON Production.BillOfMaterials (ComponentID, StartDate)'
          '    WHERE EndDate IS NOT NULL;'
          ''
        )
      end    
      item
        Caption = 'CreateIndex44'
        Lines.Strings = (
          'CREATE SPATIAL INDEX SIndx_SpatialTable_geometry_col1'
          '   ON SpatialTable(geometry_col)'
          '   WITH ( BOUNDING_BOX = ( 0, 0, 500, 200 ) );'
          ''
        )
      end    
      item
        Caption = 'CreateIndex45'
        Lines.Strings = (
          'CREATE SPATIAL INDEX SIndx_SpatialTable_geometry_col2'
          '   ON SpatialTable(geometry_col)'
          '   USING GEOMETRY_GRID'
          '   WITH ('
          '    BOUNDING_BOX = ( xmin=0, ymin=0, xmax=500, ymax=200 ),'
          '    GRIDS = (LOW, LOW, MEDIUM, HIGH),'
          '    CELLS_PER_OBJECT = 64,'
          '    PAD_INDEX  = ON );'
          ''
        )
      end    
      item
        Caption = 'CreateIndex46'
        Lines.Strings = (
          'CREATE SPATIAL INDEX SIndx_SpatialTable_geometry_col3'
          '   ON SpatialTable(geometry_col)'
          '   WITH ('
          '    BOUNDING_BOX = ( 0, 0, 500, 200 ),'
          '    GRIDS = ( LEVEL_4 = HIGH, LEVEL_3 = MEDIUM ) );'
          ''
        )
      end    
      item
        Caption = 'CreateIndex47'
        Lines.Strings = (
          'CREATE SPATIAL INDEX SIndx_SpatialTable_geography_col3'
          '   ON SpatialTable(geography_col)'
          '   WITH ( BOUNDING_BOX = ( 0, 0, 500, 200 ),'
          '        GRIDS = ( LEVEL_3 = LOW ),'
          '        DROP_EXISTING = ON );'
          ''
        )
      end    
      item
        Caption = 'CreateIndex48'
        Lines.Strings = (
          'CREATE SPATIAL INDEX SIndx_SpatialTable_geography_col1'
          '   ON SpatialTable2(object);'
          ''
        )
      end    
      item
        Caption = 'CreateIndex49'
        Lines.Strings = (
          'CREATE SPATIAL INDEX SIndx_SpatialTable_geography_col2'
          '   ON SpatialTable2(object)'
          '   USING GEOGRAPHY_GRID'
          '   WITH ('
          '    GRIDS = (MEDIUM, LOW, MEDIUM, HIGH ),'
          '    CELLS_PER_OBJECT = 64,'
          '    PAD_INDEX  = ON );'
          ''
        )
      end    
      item
        Caption = 'CreateIndex50'
        Lines.Strings = (
          'CREATE SPATIAL INDEX SIndx_SpatialTable_geography_col3'
          '   ON SpatialTable2(object)'
          '   WITH ( GRIDS = ( LEVEL_3 = HIGH, LEVEL_2 = HIGH ) );'
          ''
        )
      end    
      item
        Caption = 'CreateIndex51'
        Lines.Strings = (
          'CREATE PRIMARY XML INDEX PXML_ProductModel_CatalogDescription'
          '    ON Production.ProductModel (CatalogDescription);'
          ''
        )
      end    
      item
        Caption = 'CreateIndex52'
        Lines.Strings = (
          'CREATE XML INDEX IXML_ProductModel_CatalogDescription_Path'
          '    ON Production.ProductModel (CatalogDescription)'
          '    USING XML INDEX PXML_ProductModel_CatalogDescription FOR PATH ;'
          ''
        )
      end    
      item
        Caption = 'CreateIndex53'
        Lines.Strings = (
          'CREATE XML INDEX filt_sxi_index_c'
          'ON Tbl(xmlcol)'
          'USING XML INDEX sxi_index'
          'FOR ( pathabc );'
          ''
        )
      end    
      item
        Caption = 'CreateIndex54'
        Lines.Strings = (
          'CREATE UNIQUE CLUSTERED INDEX'
          '    AK_BillOfMaterials_ProductAssemblyID_ComponentID_StartDate'
          '        ON Production.BillOfMaterials (ProductAssemblyID, ComponentID,'
          '        StartDate)'
          '    ON ''PRIMARY'';'
        )
      end    
      item
        Caption = 'AlterIndex39'
        Lines.Strings = (
          'ALTER INDEX mycolumnstoreindex ON mytable DISABLE;'
          ''
        )
      end    
      item
        Caption = 'AlterIndex40'
        Lines.Strings = (
          'ALTER INDEX mycolumnstoreindex on mytable REBUILD'
          ''
        )
      end    
      item
        Caption = 'AlterIndex41'
        Lines.Strings = (
          'ALTER INDEX test_idx1 ON test_table PAUSE;'
          ''
        )
      end    
      item
        Caption = 'AlterIndex42'
        Lines.Strings = (
          'ALTER INDEX test_idx2 ON test_table PAUSE;'
          ''
        )
      end    
      item
        Caption = 'AlterIndex43'
        Lines.Strings = (
          'ALTER INDEX test_idx1 ON test_table RESUME;'
          ''
        )
      end    
      item
        Caption = 'AlterIndex44'
        Lines.Strings = (
          'ALTER INDEX test_idx2 ON test_table RESUME;'
          ''
        )
      end    
      item
        Caption = 'AlterIndex45'
        Lines.Strings = (
          'ALTER INDEX test_idx1 ON test_table ABORT;'
          ''
        )
      end    
      item
        Caption = 'AlterIndex46'
        Lines.Strings = (
          'ALTER INDEX test_idx2 ON test_table ABORT;'
          ''
        )
      end    
      item
        Caption = 'AlterIndex47'
        Lines.Strings = (
          'ALTER FULLTEXT INDEX ON Production.Document'
          '   SET SEARCH PROPERTY LIST DocumentPropertyList'
          '   WITH NO POPULATION;'
          ''
        )
      end    
      item
        Caption = 'AlterIndex48'
        Lines.Strings = (
          'ALTER FULLTEXT INDEX ON HumanResources.JobCandidate'
          '   SET SEARCH PROPERTY LIST JobCandidateProperties;'
          ''
        )
      end    
      item
        Caption = 'CreateIndex55'
        Lines.Strings = (
          'CREATE SELECTIVE XML INDEX sxi_index'
          'ON Tbl(xmlcol)'
          'FOR('
          '    pathab   = ''/a/b'' as XQUERY ''node()'','
          '    pathabc  = ''/a/b/c'' as XQUERY ''xs:double'','
          '    pathdtext = ''/a/b/d/text()'' as XQUERY ''xs:string'' MAXLENGTH(200) SINGLETON,'
          '    pathabe = ''/a/b/e'' as SQL NVARCHAR(100)'
          ');'
          ''
        )
      end    
      item
        Caption = 'CreateIndex56'
        Lines.Strings = (
          'CREATE SELECTIVE XML INDEX on T1(C1)'
          'WITH XMLNAMESPACES (''https://www.tempuri.org/'' as myns)'
          'FOR ( path1 = ''/myns:book/myns:author/text()'' );'
          ''
        )
      end    
      item
        Caption = 'CreateIndex57'
        Lines.Strings = (
          'CREATE FULLTEXT INDEX ON HumanResources.JobCandidate(Resume) KEY INDEX PK_JobCandidate_JobCandidateID;'
          ''
        )
      end    
      item
        Caption = 'CreateIndex58'
        Lines.Strings = (
          'CREATE UNIQUE INDEX ui_ukJobCand ON HumanResources.JobCandidate(JobCandidateID);'
          ''
        )
      end    
      item
        Caption = 'CreateIndex59'
        Lines.Strings = (
          'CREATE FULLTEXT INDEX ON HumanResources.JobCandidate(Resume)'
          '   KEY INDEX ui_ukJobCand'
          '   WITH STOPLIST = SYSTEM;'
          ''
        )
      end    
      item
        Caption = 'CreateIndex60'
        Lines.Strings = (
          'CREATE FULLTEXT INDEX ON Production.ProductReview'
          ' ('
          '  ReviewerName'
          '     Language 1033,'
          '  EmailAddress'
          '     Language 1033,'
          '  Comments'
          '     Language 1033'
          ' )'
          '  KEY INDEX PK_ProductReview_ProductReviewID'
          '      ON production_catalog;'
          ''
        )
      end    
      item
        Caption = 'CreateIndex61'
        Lines.Strings = (
          'CREATE FULLTEXT INDEX ON Production.Document'
          '  ('
          '  Title'
          '      Language 1033,'
          '  DocumentSummary'
          '      Language 1033,'
          '  Document'
          '      TYPE COLUMN FileExtension'
          '      Language 1033'
          '  )'
          '  KEY INDEX PK_Document_DocumentID'
          '          WITH STOPLIST = SYSTEM, SEARCH PROPERTY LIST = DocumentPropertyList, CHANGE_TRACKING OFF, NO POPULATION;'
          ''
        )
      end    
      item
        Caption = 'DropIndex1'
        Lines.Strings = (
          'DROP INDEX SimpleTable.nc1_simple;'
          ''
        )
      end    
      item
        Caption = 'DropIndex2'
        Lines.Strings = (
          'DROP INDEX SimpleTable.nc2_simple;'
          ''
        )
      end    
      item
        Caption = 'DropIndex3'
        Lines.Strings = (
          'DROP INDEX my_index ON MyFactTable;'
          ''
        )
      end    
      item
        Caption = 'DropIndex4'
        Lines.Strings = (
          'DROP INDEX ClusteredIndex_d473567f7ea04d7aafcac5364c241e09 ON MyDimTable;'
          ''
        )
      end    
      item
        Caption = 'DropIndex5'
        Lines.Strings = (
          'DROP INDEX MyCCI ON MyFactTable;'
          ''
        )
      end    
      item
        Caption = 'DropIndex6'
        Lines.Strings = (
          'DROP INDEX FIBillOfMaterialsWithEndDate'
          '    ON Production.BillOfMaterials;'
          ''
          ''
        )
      end    
      item
        Caption = 'DropIndex7'
        Lines.Strings = (
          '    DROP INDEX PXML_ProductModel_CatalogDescription'
          '        ON Production.ProductModel;'
          ''
        )
      end    
      item
        Caption = 'DropIndex8'
        Lines.Strings = (
          '    DROP INDEX IXML_ProductModel_CatalogDescription_Path'
          '        ON Production.ProductModel;'
          ''
        )
      end    
      item
        Caption = 'DropIndex9'
        Lines.Strings = (
          'DROP INDEX IX_ProductVendor_BusinessEntityID'
          '    ON Purchasing.ProductVendor;'
          ''
        )
      end    
      item
        Caption = 'DropIndex10'
        Lines.Strings = (
          'DROP INDEX'
          '    IX_PurchaseOrderHeader_EmployeeID ON Purchasing.PurchaseOrderHeader,'
          '    IX_Address_StateProvinceID ON Person.Address;'
          ''
        )
      end    
      item
        Caption = 'DropIndex11'
        Lines.Strings = (
          'DROP INDEX AK_BillOfMaterials_ProductAssemblyID_ComponentID_StartDate'
          '    ON Production.BillOfMaterials WITH (ONLINE = ON, MAXDOP = 2);'
          ''
        )
      end    
      item
        Caption = 'DropIndex12'
        Lines.Strings = (
          'DROP INDEX AK_BillOfMaterials_ProductAssemblyID_ComponentID_StartDate'
          '    ON Production.BillOfMaterials'
          '    WITH (ONLINE = ON, MOVE TO NewGroup);'
          ''
        )
      end    
      item
        Caption = 'DropIndex13'
        Lines.Strings = (
          'DROP INDEX PXML_ProductModel_CatalogDescription'
          '    ON Production.ProductModel;'
          ''
          ''
        )
      end    
      item
        Caption = 'DropIndex14'
        Lines.Strings = (
          'DROP INDEX PK_MyClusteredIndex'
          '    ON dbo.MyTable'
          '    WITH (MOVE TO MyPartitionScheme,'
          '          FILESTREAM_ON MyPartitionScheme);'
          ''
        )
      end    
      item
        Caption = 'DropIndex15'
        Lines.Strings = (
          'DROP INDEX sxi_index ON tbl;'
          ''
        )
      end    
      item
        Caption = 'DropIndex16'
        Lines.Strings = (
          'DROP FULLTEXT INDEX ON HumanResources.JobCandidate;'
        )
      end    
      item
        Caption = 'DropTable16'
        Lines.Strings = (
          'DROP EXTERNAL TABLE SalesPerson;'
          ''
        )
      end    
      item
        Caption = 'DropTable17'
        Lines.Strings = (
          'DROP EXTERNAL TABLE dbo.SalesPerson;'
          ''
        )
      end    
      item
        Caption = 'DropTable18'
        Lines.Strings = (
          'DROP EXTERNAL TABLE EasternDivision.dbo.SalesPerson;'
          ''
          ''
        )
      end    
      item
        Caption = 'DropTable19'
        Lines.Strings = (
          'DROP EXTERNAL TABLE ProductVendor1;'
          ''
        )
      end    
      item
        Caption = 'DropTable20'
        Lines.Strings = (
          'DROP EXTERNAL TABLE EasternDivision.dbo.SalesPerson;'
        )
      end>
    Left = 48
    Top = 224
  end
  object sDML: TRxTextHolder
    Highlighter = rxSynSQL
    Items = <    
      item
        Caption = 'Select1'
        Lines.Strings = (
          'SELECT *'
          'FROM DimEmployee'
          'ORDER BY LastName;'
          ''
          ''
        )
      end    
      item
        Caption = 'Select2'
        Lines.Strings = (
          'SELECT e.*'
          'FROM DimEmployee AS e'
          'ORDER BY LastName;'
          ''
          ''
        )
      end    
      item
        Caption = 'Select3'
        Lines.Strings = (
          'SELECT FirstName, LastName, StartDate AS FirstDay'
          'FROM DimEmployee'
          'ORDER BY LastName;'
          ''
          ''
        )
      end    
      item
        Caption = 'Select4'
        Lines.Strings = (
          'SELECT FirstName, LastName, StartDate AS FirstDay'
          'FROM DimEmployee'
          'WHERE EndDate IS NOT NULL'
          'AND MaritalStatus = ''M'''
          'ORDER BY LastName;'
          ''
          ''
        )
      end    
      item
        Caption = 'Select5'
        Lines.Strings = (
          'SELECT FirstName, LastName, BaseRate, BaseRate * 40 AS GrossPay'
          'FROM DimEmployee'
          'ORDER BY LastName;'
          ''
          ''
        )
      end    
      item
        Caption = 'Select6'
        Lines.Strings = (
          'SELECT DISTINCT Title'
          'FROM DimEmployee'
          'ORDER BY Title;'
          ''
          ''
        )
      end    
      item
        Caption = 'Select7'
        Lines.Strings = (
          'SELECT OrderDateKey, SUM(SalesAmount) AS TotalSales'
          'FROM FactInternetSales'
          'GROUP BY OrderDateKey'
          'ORDER BY OrderDateKey;'
          ''
          ''
        )
      end    
      item
        Caption = 'Select8'
        Lines.Strings = (
          'SELECT OrderDateKey, PromotionKey, AVG(SalesAmount) AS AvgSales, SUM(SalesAmount) AS TotalSales'
          'FROM FactInternetSales'
          'GROUP BY OrderDateKey, PromotionKey'
          'ORDER BY OrderDateKey;'
          ''
          ''
        )
      end    
      item
        Caption = 'Select9'
        Lines.Strings = (
          'SELECT SUM(SalesAmount) AS TotalSales'
          'FROM FactInternetSales'
          'GROUP BY (OrderDateKey * 10);'
          ''
          ''
        )
      end    
      item
        Caption = 'Select10'
        Lines.Strings = (
          'SELECT OrderDateKey, SUM(SalesAmount) AS TotalSales'
          'FROM FactInternetSales'
          'GROUP BY OrderDateKey'
          'ORDER BY OrderDateKey;'
          ''
          ''
        )
      end    
      item
        Caption = 'Select11'
        Lines.Strings = (
          'SELECT OrderDateKey, SUM(SalesAmount) AS TotalSales'
          'FROM FactInternetSales'
          'GROUP BY OrderDateKey'
          'HAVING OrderDateKey > 20010000'
          'ORDER BY OrderDateKey;'
          ''
          ''
        )
      end    
      item
        Caption = 'Select12'
        Lines.Strings = (
          'SELECT COUNT(*) AS [Rows in Table]'
          'FROM Sales.ShoppingCartItem'
          'WHERE ShoppingCartID = 20621;'
          ''
          ''
        )
      end    
      item
        Caption = 'Select13'
        Lines.Strings = (
          'SELECT ProductID, ProductName, ProductModelID, PhotoID'
          'FROM @MyTableVar'
          'ORDER BY ProductModelID;'
          ''
          ''
        )
      end    
      item
        Caption = 'Select14'
        Lines.Strings = (
          'SELECT column_1, column_2, column_3, column_4'
          'FROM dbo.T1;'
          ''
          ''
        )
      end    
      item
        Caption = 'Select15'
        Lines.Strings = (
          'SELECT DataSource,BusinessEntityID,LastName,SalesDollars'
          'FROM dbo.EmployeeSales;'
          ''
          ''
        )
      end    
      item
        Caption = 'Select16'
        Lines.Strings = (
          'SELECT NewScrapReasonID, Name, ModifiedDate FROM @MyTableVar;'
          ''
          ''
        )
      end    
      item
        Caption = 'Select17'
        Lines.Strings = (
          'SELECT ScrapReasonID, Name, ModifiedDate'
          'FROM Production.ScrapReason;'
          ''
          ''
        )
      end    
      item
        Caption = 'Select18'
        Lines.Strings = (
          'SELECT EmployeeID, LastName, FirstName, CurrentSales, ProjectedSales'
          'FROM dbo.EmployeeSales;'
          ''
          ''
        )
      end    
      item
        Caption = 'Select19'
        Lines.Strings = (
          'SELECT UnitMeasureCode, Name FROM Production.UnitMeasure'
          'WHERE UnitMeasureCode = ''ABC'';'
          ''
          ''
        )
      end    
      item
        Caption = 'Select20'
        Lines.Strings = (
          'SELECT Change, COUNT(*) AS CountPerChange'
          'FROM @SummaryOfChanges'
          'GROUP BY Change;'
          ''
          ''
        )
      end    
      item
        Caption = 'Select21'
        Lines.Strings = (
          'SELECT PersonName, CityName, StreetAddress'
          'FROM Person , City , livesIn'
          'WHERE MATCH(Person-(livesIn)->city)'
          ''
          ''
        )
      end    
      item
        Caption = 'Select22'
        Lines.Strings = (
          'SELECT name, physical_name'
          'FROM sys.master_files'
          'WHERE database_id = DB_ID(''tempdb'');'
          ''
          ''
        )
      end    
      item
        Caption = 'Select23'
        Lines.Strings = (
          'SELECT name, snapshot_isolation_state,'
          '    snapshot_isolation_state_desc AS description'
          'FROM sys.databases'
          'WHERE name = N''[database_name]'';'
          ''
          ''
        )
      end    
      item
        Caption = 'Select24'
        Lines.Strings = (
          'SELECT * FROM sys.dm_xe_sessions;'
          ''
          ''
        )
      end    
      item
        Caption = 'Select25'
        Lines.Strings = (
          'SELECT * FROM sys.dm_xe_session_events;'
          ''
          ''
        )
      end    
      item
        Caption = 'Select26'
        Lines.Strings = (
          'SELECT FULLTEXTCATALOGPROPERTY(''ftCatalog'', ''accentsensitivity'');'
          ''
          ''
        )
      end    
      item
        Caption = 'Select27'
        Lines.Strings = (
          'SELECT TOP 300000 * FROM staging;'
          ''
          ''
        )
      end    
      item
        Caption = 'Select28'
        Lines.Strings = (
          'SELECT *'
          'FROM sys.dm_db_column_store_row_group_physical_stats'
          'WHERE object_id  = object_id(''cci_target'');'
          ''
          ''
        )
      end    
      item
        Caption = 'Select29'
        Lines.Strings = (
          'SELECT *'
          'FROM sys.dm_db_index_physical_stats (DB_ID(),OBJECT_ID(N''Production.TransactionHistory''), NULL , NULL, NULL);'
          ''
          ''
        )
      end    
      item
        Caption = 'Select30'
        Lines.Strings = (
          'SELECT sys.types.name, sys.types.schema_id, sys.schemas.name'
          '    FROM sys.types JOIN sys.schemas'
          '        ON sys.types.schema_id = sys.schemas.schema_id'
          '    WHERE sys.types.name = ''TestType'' ;'
          ''
          ''
        )
      end    
      item
        Caption = 'Select31'
        Lines.Strings = (
          'SELECT NEXT VALUE FOR Test.CountBy1'
          ''
          ''
        )
      end    
      item
        Caption = 'Select32'
        Lines.Strings = (
          'SELECT NEXT VALUE FOR Test.CountBy1;'
          ''
          ''
        )
      end    
      item
        Caption = 'Select33'
        Lines.Strings = (
          'SELECT SRM.role_principal_id, SP.name AS Role_Name,'
          'SRM.member_principal_id, SP2.name  AS Member_Name'
          'FROM sys.server_role_members AS SRM'
          'JOIN sys.server_principals AS SP'
          '    ON SRM.Role_principal_id = SP.principal_id'
          'JOIN sys.server_principals AS SP2'
          '    ON SRM.member_principal_id = SP2.principal_id'
          'ORDER BY  SP.name,  SP2.name'
          ''
          ''
          ''
        )
      end    
      item
        Caption = 'Select34'
        Lines.Strings = (
          'SELECT name, TYPE_NAME(system_type_id), max_length, precision, scale'
          'FROM sys.columns WHERE object_id = OBJECT_ID(N''dbo.doc_exy'') ;'
          ''
          ''
        )
      end    
      item
        Caption = 'Select35'
        Lines.Strings = (
          'SELECT name, TYPE_NAME(system_type_id), max_length, precision, scale'
          'FROM sys.columns WHERE object_id = OBJECT_ID(N''dbo.doc_exy'') ;'
          ''
          ''
        )
      end    
      item
        Caption = 'Select36'
        Lines.Strings = (
          'SELECT *'
          'FROM sys.xml_schema_collections;'
          ''
          ''
        )
      end    
      item
        Caption = 'Select37'
        Lines.Strings = (
          'SELECT name'
          'FROM sys.xml_schema_namespaces;'
          ''
          ''
        )
      end    
      item
        Caption = 'Select38'
        Lines.Strings = (
          'SELECT sys.xml_schema_collections.name'
          'FROM   sys.xml_schema_collections'
          'JOIN   sys.xml_schema_namespaces'
          'ON     sys.xml_schema_collections.xml_collection_id ='
          '       sys.xml_schema_namespaces.xml_collection_id'
          'WHERE  sys.xml_schema_namespaces.name='''';'
          ''
          ''
        )
      end    
      item
        Caption = 'Select39'
        Lines.Strings = (
          'SELECT query = a.text, start_time, percent_complete,'
          '    eta = dateadd(second,estimated_completion_time/1000, getdate())'
          'FROM sys.dm_exec_requests r'
          '    CROSS APPLY sys.dm_exec_sql_text(r.sql_handle) a'
          'WHERE r.command LIKE ''BACKUP%'''
          ''
          ''
        )
      end    
      item
        Caption = 'Select40'
        Lines.Strings = (
          'SELECT i.name'
          'FROM sys.indexes i'
          'JOIN sys.tables t'
          'ON ( i.type_desc = ''CLUSTERED'' ) WHERE t.name = ''MyFactTable'';'
          ''
          ''
        )
      end    
      item
        Caption = 'Select41'
        Lines.Strings = (
          'SELECT i.name'
          'FROM sys.indexes i'
          'JOIN sys.tables t'
          'ON ( i.type_desc = ''CLUSTERED'' )'
          'WHERE t.name = ''MyFactTable'';'
          ''
          ''
        )
      end    
      item
        Caption = 'Select42'
        Lines.Strings = (
          'SELECT i.object_id, i.name, t.object_id, t.name'
          'FROM sys.indexes i'
          'JOIN sys.tables t'
          'ON (i.type_desc = ''CLUSTERED COLUMNSTORE'')'
          'WHERE t.name = ''RowstoreDimTable'';'
          ''
          ''
        )
      end    
      item
        Caption = 'Select43'
        Lines.Strings = (
          'SELECT name, size, size*1.0/128 AS [Size in MBs]'
          'FROM sys.master_files'
          'WHERE name = N''mytest'';'
          ''
          ''
        )
      end    
      item
        Caption = 'Select44'
        Lines.Strings = (
          'SELECT name, collation_name, is_trustworthy_on, is_db_chaining_on'
          'FROM sys.databases'
          'WHERE name = N''MyOptionsTest'';'
          ''
          ''
        )
      end    
      item
        Caption = 'Select45'
        Lines.Strings = (
          'SELECT name'
          '    FROM sys.all_objects'
          '    WHERE'
          '        (name LIKE ''database\_%'' { ESCAPE ''\ '' } OR'
          '         name LIKE ''server\_%'' { ESCAPE ''\ '' })'
          '        AND name LIKE ''%\_event%'' { ESCAPE ''\ '' }'
          '        AND type = ''V'''
          '    ORDER BY name;'
          ''
          ''
        )
      end    
      item
        Caption = 'Select46'
        Lines.Strings = (
          'SELECT TOP 10 (url) FROM ClickStream WHERE user_ip = ''xxx.xxx.xxx.xxx'''
          ''
          ''
        )
      end    
      item
        Caption = 'Select47'
        Lines.Strings = (
          ''
          'SELECT DISTINCT user.FirstName, user.LastName'
          'INTO ms_user'
          'FROM user INNER JOIN ('
          '    SELECT * FROM ClickStream WHERE cs.url = ''www.microsoft.com'''
          '    ) AS ms'
          'ON user.user_ip = ms.user_ip'
          ';'
          ''
          ''
        )
      end    
      item
        Caption = 'Select48'
        Lines.Strings = (
          'SELECT dbo.ISOweek(CONVERT(DATETIME,''12/26/2004'',101)) AS ''ISO Week'';'
          ''
          ''
        )
      end    
      item
        Caption = 'Select49'
        Lines.Strings = (
          'SELECT @SamplesPath = REPLACE'
          '    (  physical_name'
          '     , ''Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA\master.mdf'''
          '     , ''Microsoft SQL Server\130\Samples\Engine\Programmability\CLR\ '''
          '    )'
          '  FROM master.sys.database_files'
          '  WHERE name = ''master'';'
          ''
          ''
        )
      end    
      item
        Caption = 'Select50'
        Lines.Strings = (
          'SELECT definition, type'
          'FROM sys.sql_modules AS m'
          'JOIN sys.objects AS o ON m.object_id = o.object_id'
          '    AND type IN (''FN'', ''IF'', ''TF'');'
          ''
          ''
        )
      end    
      item
        Caption = 'Select51'
        Lines.Strings = (
          'SELECT COUNT(*) AS [Number of rows] FROM #Test;'
          ''
          ''
        )
      end    
      item
        Caption = 'Select52'
        Lines.Strings = (
          'SELECT COUNT(*) AS [Number of rows] FROM #Test;'
          ''
          ''
        )
      end    
      item
        Caption = 'Select53'
        Lines.Strings = (
          'SELECT SUM(UnitPrice * OrderQty * (1.00 - UnitPriceDiscount)) AS Rev,'
          '  OrderDate, ProductID'
          'FROM Sales.SalesOrderDetail AS od'
          '  JOIN Sales.SalesOrderHeader AS o ON od.SalesOrderID = o.SalesOrderID'
          '    AND ProductID BETWEEN 700 AND 800'
          '    AND OrderDate >= CONVERT(DATETIME, ''05/01/2002'', 101)'
          'GROUP BY OrderDate, ProductID'
          'ORDER BY Rev DESC;'
          ''
          ''
        )
      end    
      item
        Caption = 'Select54'
        Lines.Strings = (
          'SELECT OrderDate, SUM(UnitPrice * OrderQty * (1.00 - UnitPriceDiscount)) AS Rev'
          'FROM Sales.SalesOrderDetail AS od'
          '  JOIN Sales.SalesOrderHeader AS o ON od.SalesOrderID = o.SalesOrderID'
          '    AND DATEPART(mm, OrderDate) = 3'
          '  AND DATEPART(yy, OrderDate) = 2002'
          'GROUP BY OrderDate'
          'ORDER BY OrderDate ASC;'
          ''
          ''
        )
      end    
      item
        Caption = 'Select55'
        Lines.Strings = (
          'SELECT * FROM fn_get_audit_file(''C:\SQLAudit\AuditDataAccess_*.sqlaudit'',default,default);'
          ''
          ''
        )
      end    
      item
        Caption = 'Select56'
        Lines.Strings = (
          'SELECT SUSER_NAME(), USER_NAME();'
          ''
          ''
        )
      end    
      item
        Caption = 'Select57'
        Lines.Strings = (
          'SELECT @cookie;'
          ''
          ''
        )
      end    
      item
        Caption = 'Select58'
        Lines.Strings = (
          'SELECT TE.*'
          'FROM sys.trigger_events AS TE'
          'JOIN sys.triggers AS T ON T.object_id = TE.object_id'
          'WHERE T.parent_class = 0 AND T.name = ''safety'';'
          ''
          ''
        )
      end    
      item
        Caption = 'BulkInsert1'
        Lines.Strings = (
          'BULK INSERT Sales.Orders'
          'FROM ''\\SystemX\DiskZ\Sales\data\orders.dat'';'
          ''
          ''
        )
      end    
      item
        Caption = 'BulkInsert2'
        Lines.Strings = (
          'BULK INSERT Sales.Orders'
          'FROM ''\\SystemX\DiskZ\Sales\data\orders.csv'''
          'WITH ( FORMAT=''CSV'');'
          ''
          ''
        )
      end    
      item
        Caption = 'BulkInsert3'
        Lines.Strings = (
          'BULK INSERT bulktest..t_float'
          'FROM ''C:\t_float-c.dat'' WITH (FORMATFILE=''C:\t_floatformat-c-xml.xml'');'
          ''
          ''
        )
      end    
      item
        Caption = 'Delete1'
        Lines.Strings = (
          'DELETE FROM Sales.SalesPersonQuotaHistory;'
          ''
          ''
        )
      end    
      item
        Caption = 'Delete2'
        Lines.Strings = (
          'DELETE FROM Production.ProductCostHistory'
          'WHERE StandardCost > 1000.00;'
          ''
          ''
        )
      end    
      item
        Caption = 'Delete3'
        Lines.Strings = (
          'DELETE Production.ProductCostHistory'
          'WHERE StandardCost BETWEEN 12.00 AND 14.00'
          '      AND EndDate IS NULL;'
          ''
          ''
        )
      end    
      item
        Caption = 'Delete4'
        Lines.Strings = (
          'DELETE FROM HumanResources.EmployeePayHistory'
          'WHERE CURRENT OF complex_cursor;'
          ''
          ''
        )
      end    
      item
        Caption = 'Delete5'
        Lines.Strings = (
          'DELETE FROM Sales.SalesPersonQuotaHistory'
          'WHERE BusinessEntityID IN'
          '    (SELECT BusinessEntityID'
          '     FROM Sales.SalesPerson'
          '     WHERE SalesYTD > 2500000.00);'
          ''
          ''
        )
      end    
      item
        Caption = 'Delete6'
        Lines.Strings = (
          'DELETE FROM Sales.SalesPersonQuotaHistory'
          'FROM Sales.SalesPersonQuotaHistory AS spqh'
          'INNER JOIN Sales.SalesPerson AS sp'
          'ON spqh.BusinessEntityID = sp.BusinessEntityID'
          'WHERE sp.SalesYTD > 2500000.00;'
          ''
          ''
        )
      end    
      item
        Caption = 'Delete7'
        Lines.Strings = (
          ''
          'DELETE spqh'
          '  FROM'
          '        Sales.SalesPersonQuotaHistory AS spqh'
          '    INNER JOIN Sales.SalesPerson AS sp'
          '        ON spqh.BusinessEntityID = sp.BusinessEntityID'
          '  WHERE  sp.SalesYTD > 2500000.00;'
          ''
          ''
        )
      end    
      item
        Caption = 'Delete8'
        Lines.Strings = (
          'DELETE TOP (20)'
          'FROM Purchasing.PurchaseOrderDetail'
          'WHERE DueDate < ''20020701'';'
          ''
          ''
        )
      end    
      item
        Caption = 'Delete9'
        Lines.Strings = (
          ''
          ''
          'DELETE FROM Purchasing.PurchaseOrderDetail'
          'WHERE PurchaseOrderDetailID IN'
          '   (SELECT TOP 10 PurchaseOrderDetailID'
          '    FROM Purchasing.PurchaseOrderDetail'
          '    ORDER BY DueDate ASC);'
          ''
          ''
        )
      end    
      item
        Caption = 'Delete10'
        Lines.Strings = (
          ''
          'DELETE MyLinkServer.AdventureWorks2012.HumanResources.Department'
          'WHERE DepartmentID > 16;'
          ''
          ''
        )
      end    
      item
        Caption = 'Delete11'
        Lines.Strings = (
          'DELETE FROM OPENDATASOURCE(''SQLNCLI'','
          '    ''Data Source= <server_name>; Integrated Security=SSPI'')'
          '    .AdventureWorks2012.HumanResources.Department'
          'WHERE DepartmentID = 17;'
          ''
          ''
        )
      end    
      item
        Caption = 'Delete12'
        Lines.Strings = (
          'DELETE Sales.ShoppingCartItem'
          'OUTPUT DELETED.*'
          'WHERE ShoppingCartID = 20621;'
          ''
          ''
        )
      end    
      item
        Caption = 'Delete13'
        Lines.Strings = (
          'DELETE Production.ProductProductPhoto'
          'OUTPUT DELETED.ProductID,'
          '       p.Name,'
          '       p.ProductModelID,'
          '       DELETED.ProductPhotoID'
          '    INTO @MyTableVar'
          'FROM Production.ProductProductPhoto AS ph'
          'JOIN Production.Product as p'
          '    ON ph.ProductID = p.ProductID'
          '    WHERE p.ProductModelID BETWEEN 120 and 130;'
          ''
          ''
        )
      end    
      item
        Caption = 'Delete14'
        Lines.Strings = (
          'DELETE FROM Production.UnitMeasure WHERE UnitMeasureCode IN (''ABC'',''XYZ'');'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert1'
      end    
      item
        Caption = 'Insert2'
        Lines.Strings = (
          'INSERT INTO Cities (Location)'
          'VALUES ( CONVERT(Point, ''12.3:46.2'') );'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert3'
        Lines.Strings = (
          'INSERT INTO Cities (Location)'
          'VALUES ( dbo.CreateNewPoint(x, y) );'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert4'
        Lines.Strings = (
          'INSERT INTO Production.UnitMeasure'
          'VALUES (N''FT'', N''Feet'', ''20080414'');'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert5'
        Lines.Strings = (
          'INSERT INTO Production.UnitMeasure'
          'VALUES (N''FT2'', N''Square Feet '', ''20080923''), (N''Y'', N''Yards'', ''20080923'')'
          '    , (N''Y3'', N''Cubic Yards'', ''20080923'');'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert6'
        Lines.Strings = (
          'INSERT INTO Production.UnitMeasure (Name, UnitMeasureCode,'
          '    ModifiedDate)'
          'VALUES (N''Square Yards'', N''Y2'', GETDATE());'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert7'
        Lines.Strings = (
          'INSERT INTO dbo.T1 (column_4)'
          '    VALUES (''Explicit value'');'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert8'
        Lines.Strings = (
          'INSERT INTO dbo.T1 (column_2, column_4)'
          '    VALUES (''Explicit value'', ''Explicit value'');'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert9'
        Lines.Strings = (
          'INSERT INTO dbo.T1 (column_2)'
          '    VALUES (''Explicit value'');'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert10'
        Lines.Strings = (
          'INSERT INTO T1 DEFAULT VALUES;'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert11'
        Lines.Strings = (
          'INSERT T1 VALUES (''Row #1'');'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert12'
        Lines.Strings = (
          'INSERT T1 (column_2) VALUES (''Row #2'');'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert13'
        Lines.Strings = (
          'INSERT INTO T1 (column_1,column_2)'
          '    VALUES (-99, ''Explicit identity value'');'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert14'
        Lines.Strings = (
          'INSERT INTO dbo.T1 (column_2)'
          '    VALUES (NEWID());'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert15'
        Lines.Strings = (
          'INSERT INTO T1 DEFAULT VALUES;'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert16'
        Lines.Strings = (
          'INSERT INTO dbo.Points (PointValue) VALUES (CONVERT(Point, ''3,4''));'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert17'
        Lines.Strings = (
          'INSERT INTO dbo.Points (PointValue) VALUES (CONVERT(Point, ''1,5''));'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert18'
        Lines.Strings = (
          'INSERT INTO dbo.Points (PointValue) VALUES (CAST (''1,99'' AS Point));'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert19'
        Lines.Strings = (
          'INSERT INTO dbo.EmployeeSales'
          '    SELECT ''SELECT'', sp.BusinessEntityID, c.LastName, sp.SalesYTD'
          '    FROM Sales.SalesPerson AS sp'
          '    INNER JOIN Person.Person AS c'
          '        ON sp.BusinessEntityID = c.BusinessEntityID'
          '    WHERE sp.BusinessEntityID LIKE ''2%'''
          '    ORDER BY sp.BusinessEntityID, c.LastName;'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert20'
        Lines.Strings = (
          'INSERT INTO dbo.EmployeeSales'
          'EXECUTE dbo.uspGetEmployeeSales;'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert21'
        Lines.Strings = (
          'INSERT INTO dbo.EmployeeSales'
          'EXECUTE'
          '('''
          'SELECT ''''EXEC STRING'''', sp.BusinessEntityID, c.LastName,'
          '    sp.SalesYTD'
          '    FROM Sales.SalesPerson AS sp'
          '    INNER JOIN Person.Person AS c'
          '        ON sp.BusinessEntityID = c.BusinessEntityID'
          '    WHERE sp.BusinessEntityID LIKE ''''2%'''''
          '    ORDER BY sp.BusinessEntityID, c.LastName'
          ''');'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert22'
        Lines.Strings = (
          'WITH EmployeeTemp (EmpID, LastName, FirstName, Phone,'
          '                   Address, City, StateProvince,'
          '                   PostalCode, CurrentFlag)'
          'AS (SELECT'
          '       e.BusinessEntityID, c.LastName, c.FirstName, pp.PhoneNumber,'
          '       a.AddressLine1, a.City, sp.StateProvinceCode,'
          '       a.PostalCode, e.CurrentFlag'
          '    FROM HumanResources.Employee e'
          '        INNER JOIN Person.BusinessEntityAddress AS bea'
          '        ON e.BusinessEntityID = bea.BusinessEntityID'
          '        INNER JOIN Person.Address AS a'
          '        ON bea.AddressID = a.AddressID'
          '        INNER JOIN Person.PersonPhone AS pp'
          '        ON e.BusinessEntityID = pp.BusinessEntityID'
          '        INNER JOIN Person.StateProvince AS sp'
          '        ON a.StateProvinceID = sp.StateProvinceID'
          '        INNER JOIN Person.Person as c'
          '        ON e.BusinessEntityID = c.BusinessEntityID'
          '    )'
          'INSERT INTO HumanResources.NewEmployee'
          '    SELECT EmpID, LastName, FirstName, Phone,'
          '           Address, City, StateProvince, PostalCode, CurrentFlag'
          '    FROM EmployeeTemp;'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert23'
        Lines.Strings = (
          'INSERT TOP(5)INTO dbo.EmployeeSales'
          '    OUTPUT inserted.EmployeeID, inserted.FirstName,'
          '        inserted.LastName, inserted.YearlySales'
          '    SELECT sp.BusinessEntityID, c.LastName, c.FirstName, sp.SalesYTD'
          '    FROM Sales.SalesPerson AS sp'
          '    INNER JOIN Person.Person AS c'
          '        ON sp.BusinessEntityID = c.BusinessEntityID'
          '    WHERE sp.SalesYTD > 250000.00'
          '    ORDER BY sp.SalesYTD DESC;'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert24'
        Lines.Strings = (
          'INSERT INTO dbo.EmployeeSales'
          '    OUTPUT inserted.EmployeeID, inserted.FirstName,'
          '        inserted.LastName, inserted.YearlySales'
          '    SELECT TOP (5) sp.BusinessEntityID, c.LastName, c.FirstName, sp.SalesYTD'
          '    FROM Sales.SalesPerson AS sp'
          '    INNER JOIN Person.Person AS c'
          '        ON sp.BusinessEntityID = c.BusinessEntityID'
          '    WHERE sp.SalesYTD > 250000.00'
          '    ORDER BY sp.SalesYTD DESC;'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert25'
        Lines.Strings = (
          'INSERT INTO V1'
          '    VALUES (''Row 1'',1);'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert26'
        Lines.Strings = (
          'INSERT INTO @MyTableVar (LocationID, CostRate, ModifiedDate)'
          '    SELECT LocationID, CostRate, GETDATE()'
          '    FROM Production.Location'
          '    WHERE CostRate > 0;'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert27'
        Lines.Strings = (
          'INSERT INTO MyLinkServer.AdventureWorks2012.HumanResources.Department (Name, GroupName)'
          'VALUES (N''Public Relations'', N''Executive General and Administration'');'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert28'
        Lines.Strings = (
          'INSERT INTO OPENDATASOURCE(''SQLNCLI'','
          '    ''Data Source= <server_name>; Integrated Security=SSPI'')'
          '    .AdventureWorks2012.HumanResources.Department (Name, GroupName)'
          '    VALUES (N''Standards and Methods'', ''Quality Assurance'');'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert29'
        Lines.Strings = (
          'INSERT INTO Sales.SalesHistory WITH (TABLOCK)'
          '    (SalesOrderID,'
          '     SalesOrderDetailID,'
          '     CarrierTrackingNumber,'
          '     OrderQty,'
          '     ProductID,'
          '     SpecialOfferID,'
          '     UnitPrice,'
          '     UnitPriceDiscount,'
          '     LineTotal,'
          '     rowguid,'
          '     ModifiedDate)'
          'SELECT * FROM Sales.SalesOrderDetail;'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert30'
        Lines.Strings = (
          'INSERT INTO HumanResources.Department WITH (IGNORE_TRIGGERS) (Name, GroupName)'
          'SELECT b.Name, b.GroupName'
          'FROM OPENROWSET ('
          '    BULK ''C:SQLFilesDepartmentData.txt'','
          '    FORMATFILE = ''C:SQLFilesBulkloadFormatFile.xml'','
          '    ROWS_PER_BATCH = 15000)AS b ;'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert31'
        Lines.Strings = (
          'INSERT INTO Production.Location WITH (XLOCK)'
          '(Name, CostRate, Availability)'
          'VALUES ( N''Final Inventory'', 15.00, 80.00);'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert32'
        Lines.Strings = (
          'INSERT Production.ScrapReason'
          '    OUTPUT INSERTED.ScrapReasonID, INSERTED.Name, INSERTED.ModifiedDate'
          '        INTO @MyTableVar'
          'VALUES (N''Operator error'', GETDATE());'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert33'
        Lines.Strings = (
          'INSERT INTO dbo.EmployeeSales (LastName, FirstName, CurrentSales)'
          '  OUTPUT INSERTED.LastName,'
          '         INSERTED.FirstName,'
          '         INSERTED.CurrentSales'
          '  INTO @MyTableVar'
          '    SELECT c.LastName, c.FirstName, sp.SalesYTD'
          '    FROM Sales.SalesPerson AS sp'
          '    INNER JOIN Person.Person AS c'
          '        ON sp.BusinessEntityID = c.BusinessEntityID'
          '    WHERE sp.BusinessEntityID LIKE ''2%'''
          '    ORDER BY c.LastName, c.FirstName;'
          ''
          ''
          ''
          ''
        )
      end    
      item
        Caption = 'Insert34'
        Lines.Strings = (
          'INSERT INTO Production.ZeroInventory (DeletedProductID, RemovedOnDate)'
          'SELECT ProductID, GETDATE()'
          'FROM'
          '(   MERGE Production.ProductInventory AS pi'
          '    USING (SELECT ProductID, SUM(OrderQty) FROM Sales.SalesOrderDetail AS sod'
          '           JOIN Sales.SalesOrderHeader AS soh'
          '           ON sod.SalesOrderID = soh.SalesOrderID'
          '           AND soh.OrderDate = ''20070401'''
          '           GROUP BY ProductID) AS src (ProductID, OrderQty)'
          '    ON (pi.ProductID = src.ProductID)'
          '    WHEN MATCHED AND pi.Quantity - src.OrderQty <= 0'
          '        THEN DELETE'
          '    WHEN MATCHED'
          '        THEN UPDATE SET pi.Quantity = pi.Quantity - src.OrderQty'
          '    OUTPUT $action, deleted.ProductID) AS Changes (Action, ProductID)'
          'WHERE Action = ''DELETE'';'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert35'
        Lines.Strings = (
          'INSERT INTO EmployeeTitles'
          '    SELECT EmployeeKey, LastName, Title'
          '    FROM ssawPDW.dbo.DimEmployee'
          '    WHERE EndDate IS NULL;'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert36'
        Lines.Strings = (
          'INSERT INTO DimCurrency'
          'VALUES (500, N''C1'', N''Currency1'')'
          'OPTION ( LABEL = N''label1'' );'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert37'
        Lines.Strings = (
          'INSERT INTO DimCustomer (CustomerKey, CustomerAlternateKey,'
          '    FirstName, MiddleName, LastName )'
          'SELECT ProspectiveBuyerKey, ProspectAlternateKey,'
          '    FirstName, MiddleName, LastName'
          'FROM ProspectiveBuyer p JOIN DimGeography g ON p.PostalCode = g.PostalCode'
          'WHERE g.CountryRegionCode = ''FR'''
          'OPTION ( LABEL = ''Add French Prospects'', HASH JOIN);'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert38'
        Lines.Strings = (
          'INSERT INTO dbo.Table1 VALUES(1, 10.0), (1, 20.0);'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert39'
        Lines.Strings = (
          'INSERT INTO dbo.Table2 VALUES(1, 0.0);'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert40'
        Lines.Strings = (
          'INSERT @x VALUES (1, 10), (2, 20);'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert41'
        Lines.Strings = (
          'INSERT @y VALUES (1, 100),(2, 200);'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert42'
        Lines.Strings = (
          'INSERT INTO Person VALUES (1, ''Ron''), (2, ''David''), (3, ''Nancy'')'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert43'
        Lines.Strings = (
          'INSERT INTO City VALUES (1, ''Redmond'', ''Washington''), (2, ''Seattle'', ''Washington'')'
          ''
        )
      end    
      item
        Caption = 'Insert44'
        Lines.Strings = (
          'INSERT livesIn SELECT P.$node_id, C.$node_id, c'
          'FROM Person P, City C, (values (1,1, ''123 Avenue''), (2,2,''Main Street'')) v(a,b,c)'
          'WHERE P.id = a AND C.id = b'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert45'
        Lines.Strings = (
          'INSERT INTO #tmpdbs ([dbid], [dbname], [isdone])'
          'SELECT database_id, name, 0 FROM master.sys.databases (NOLOCK) WHERE is_read_only = 0 AND state = 0;'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert46'
        Lines.Strings = (
          'INSERT INTO cci_target WITH (TABLOCK)'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert47'
        Lines.Strings = (
          'INSERT INTO dbo.FactInternetSales2'
          'SELECT ProductKey, OrderDateKey, DueDateKey, ShipDateKey'
          'FROM dbo.FactInternetSales;'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert48'
        Lines.Strings = (
          'INSERT INTO dbo.doc_exd VALUES (-1) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert49'
        Lines.Strings = (
          'INSERT INTO dbo.doc_exz (column_a) VALUES (10) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert50'
        Lines.Strings = (
          'INSERT INTO Production.UnitMeasure (UnitMeasureCode, Name, ModifiedDate)'
          '  VALUES (''OC'', ''Ounces'', GETDATE());'
          ''
          ''
          ''
        )
      end    
      item
        Caption = 'Insert51'
        Lines.Strings = (
          'INSERT INTO #Test VALUES (N''OC'', N''Ounces'', GETDATE());'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert52'
        Lines.Strings = (
          'INSERT INTO #Test SELECT * FROM Production.UnitMeasure;'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert53'
        Lines.Strings = (
          'INSERT INTO @LocationTVP (LocationName, CostRate)'
          '    SELECT [Name], 0.00'
          '    FROM'
          '    [AdventureWorks2012].[Person].[StateProvince];'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert54'
        Lines.Strings = (
          'INSERT new_employees'
          '   (fname, minit, lname)'
          'VALUES'
          '   (''Karin'', ''F'', ''Josephs'');'
          ''
          ''
          ''
        )
      end    
      item
        Caption = 'Insert55'
        Lines.Strings = (
          'INSERT new_employees'
          '   (fname, minit, lname)'
          'VALUES'
          '   (''Pirkko'', ''O'', ''Koskitalo'');'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert56'
        Lines.Strings = (
          'INSERT INTO Purchasing.PurchaseOrderHeader (RevisionNumber, Status, EmployeeID,'
          'VendorID, ShipMethodID, OrderDate, ShipDate, SubTotal, TaxAmt, Freight)'
          'VALUES ('
          '2'
          ',3'
          ',261'
          ',1652'
          ',4'
          ',GETDATE()'
          ',GETDATE()'
          ',44594.55'
          ',3567.564'
          ',1114.8638 );'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert57'
        Lines.Strings = (
          'INSERT dbo.all_supplier_view VALUES (''1'', ''CaliforniaCorp''), (''5'', ''BraziliaLtd'')'
          ', (''231'', ''FarEast''), (''280'', ''NZ'')'
          ', (''321'', ''EuroGroup''), (''442'', ''UKArchip'')'
          ', (''475'', ''India''), (''521'', ''Afrique'');'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert58'
        Lines.Strings = (
          'INSERT INTO #temptable'
          'VALUES (10);'
          ''
          ''
        )
      end    
      item
        Caption = 'Insert59'
        Lines.Strings = (
          'INSERT INTO Production.UpdatedInventory'
          'SELECT ProductID, LocationID, NewQty, PreviousQty'
          'FROM'
          '(    MERGE Production.ProductInventory AS pi'
          '     USING (SELECT ProductID, SUM(OrderQty)'
          '            FROM Sales.SalesOrderDetail AS sod'
          '            JOIN Sales.SalesOrderHeader AS soh'
          '            ON sod.SalesOrderID = soh.SalesOrderID'
          '            AND soh.OrderDate BETWEEN ''20030701'' AND ''20030731'''
          '            GROUP BY ProductID) AS src (ProductID, OrderQty)'
          '     ON pi.ProductID = src.ProductID'
          '    WHEN MATCHED AND pi.Quantity - src.OrderQty >= 0'
          '        THEN UPDATE SET pi.Quantity = pi.Quantity - src.OrderQty'
          '    WHEN MATCHED AND pi.Quantity - src.OrderQty <= 0'
          '        THEN DELETE'
          '    OUTPUT $action, Inserted.ProductID, Inserted.LocationID,'
          '        Inserted.Quantity AS NewQty, Deleted.Quantity AS PreviousQty)'
          ' AS Changes (Action, ProductID, LocationID, NewQty, PreviousQty)'
          ' WHERE Action = ''UPDATE'';'
          ''
          ''
        )
      end    
      item
        Caption = 'Update1'
        Lines.Strings = (
          'UPDATE dbo.Table2'
          'SET dbo.Table2.ColB = dbo.Table2.ColB + dbo.Table1.ColB'
          'FROM dbo.Table2'
          '    INNER JOIN dbo.Table1'
          '    ON (dbo.Table2.ColA = dbo.Table1.ColA);'
          ''
          ''
        )
      end    
      item
        Caption = 'Update2'
        Lines.Strings = (
          'UPDATE dbo.Table1'
          'SET c2 = c2 + d2'
          'FROM dbo.Table2'
          'WHERE CURRENT OF abc;'
          ''
          ''
        )
      end    
      item
        Caption = 'Update3'
        Lines.Strings = (
          'UPDATE Cities'
          'SET Location = CONVERT(Point, ''12.3:46.2'')'
          'WHERE Name = ''Anchorage'';'
          ''
          ''
        )
      end    
      item
        Caption = 'Update4'
        Lines.Strings = (
          'UPDATE Cities'
          'SET Location.SetXY(23.5, 23.5)'
          'WHERE Name = ''Anchorage'';'
          ''
          ''
        )
      end    
      item
        Caption = 'Update5'
        Lines.Strings = (
          'UPDATE Cities'
          'SET Location.X = 23.5'
          'WHERE Name = ''Anchorage'';'
          ''
          ''
        )
      end    
      item
        Caption = 'Update6'
        Lines.Strings = (
          'WITH cte AS (SELECT * FROM @x)'
          'UPDATE x -- cte is referenced by the alias.'
          'SET Value = y.Value'
          'FROM cte AS x  -- cte is assigned an alias.'
          'INNER JOIN @y AS y ON y.ID = x.ID;'
          ''
          ''
        )
      end    
      item
        Caption = 'Update7'
        Lines.Strings = (
          'WITH cte AS (SELECT * FROM @x)'
          'UPDATE cte   -- cte is not referenced by the alias.'
          'SET Value = y.Value'
          'FROM cte AS x  -- cte is assigned an alias.'
          'INNER JOIN @y AS y ON y.ID = x.ID;'
          ''
          ''
        )
      end    
      item
        Caption = 'Update8'
        Lines.Strings = (
          'UPDATE STATISTICS Sales.SalesOrderDetail;'
          ''
          ''
        )
      end    
      item
        Caption = 'Update9'
        Lines.Strings = (
          'UPDATE STATISTICS Sales.SalesOrderDetail AK_SalesOrderDetail_rowguid;'
          ''
          ''
        )
      end    
      item
        Caption = 'Update10'
        Lines.Strings = (
          'UPDATE STATISTICS Production.Product(Products)'
          '    WITH FULLSCAN, NORECOMPUTE;'
          ''
          ''
        )
      end    
      item
        Caption = 'Update11'
        Lines.Strings = (
          'UPDATE Production.Product'
          '    SET ListPrice = ListPrice * 1.10'
          '    WHERE ProductNumber LIKE ''BK-%'';'
          ''
          ''
        )
      end    
      item
        Caption = 'Merge1'
        Lines.Strings = (
          'MERGE INTO Sales.SalesReason AS Target'
          'USING (VALUES (''Recommendation'',''Other''), (''Review'', ''Marketing''),'
          '              (''Internet'', ''Promotion''))'
          '       AS Source (NewName, NewReasonType)'
          'ON Target.Name = Source.NewName'
          'WHEN MATCHED THEN'
          'UPDATE SET ReasonType = Source.NewReasonType'
          'WHEN NOT MATCHED BY TARGET THEN'
          'INSERT (Name, ReasonType) VALUES (NewName, NewReasonType)'
          'OUTPUT $action INTO @SummaryOfChanges;'
          ''
          ''
          ''
        )
      end    
      item
        Caption = 'Declare1'
        Lines.Strings = (
          'DECLARE @MyTableVar table( NewScrapReasonID smallint,'
          '                           Name varchar(50),'
          '                           ModifiedDate datetime);'
          ''
          ''
        )
      end    
      item
        Caption = 'Declare2'
        Lines.Strings = (
          'DECLARE complex_cursor CURSOR FOR'
          '    SELECT a.BusinessEntityID'
          '    FROM HumanResources.EmployeePayHistory AS a'
          '    WHERE RateChangeDate <>'
          '         (SELECT MAX(RateChangeDate)'
          '          FROM HumanResources.EmployeePayHistory AS b'
          '          WHERE a.BusinessEntityID = b.BusinessEntityID) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'Declare3'
        Lines.Strings = (
          'DECLARE @MyTableVar table ('
          '    ProductID int NOT NULL,'
          '    ProductName nvarchar(50)NOT NULL,'
          '    ProductModelID int NOT NULL,'
          '    PhotoID int NOT NULL);'
          ''
          ''
        )
      end    
      item
        Caption = 'Declare4'
        Lines.Strings = (
          'DECLARE @MyTableVar table('
          '    LocationID int NOT NULL,'
          '    CostRate smallmoney NOT NULL,'
          '    NewCostRate AS CostRate * 1.5,'
          '    ModifiedDate datetime);'
          ''
          ''
        )
      end    
      item
        Caption = 'Declare5'
        Lines.Strings = (
          'DECLARE @MyTableVar table('
          '  LastName     nvarchar(20) NOT NULL,'
          '  FirstName    nvarchar(20) NOT NULL,'
          '  CurrentSales money NOT NULL'
          '  );'
          ''
          ''
        )
      end    
      item
        Caption = 'Declare6'
        Lines.Strings = (
          'DECLARE abc CURSOR LOCAL FOR'
          '    SELECT c1, c2'
          '    FROM dbo.Table1;'
          ''
          ''
        )
      end    
      item
        Caption = 'Declare7'
        Lines.Strings = (
          'DECLARE @x TABLE (ID INT, Value INT);'
          ''
          ''
        )
      end    
      item
        Caption = 'Declare8'
        Lines.Strings = (
          'DECLARE @y TABLE (ID INT, Value INT);'
          ''
          ''
        )
      end    
      item
        Caption = 'Declare9'
        Lines.Strings = (
          'DECLARE @SummaryOfChanges TABLE(Change VARCHAR(20));'
          ''
          ''
        )
      end    
      item
        Caption = 'Declare10'
        Lines.Strings = (
          'DECLARE @dbid INT, @query VARCHAR(1000), @dbname sysname, @fgname sysname'
          ''
          'WHILE (SELECT COUNT(id) FROM #tmpdbs WHERE isdone = 0) > 0'
          'BEGIN'
          '  SELECT TOP 1 @dbname = [dbname], @dbid = [dbid] FROM #tmpdbs WHERE isdone = 0'
          ''
          '  SET @query = ''SELECT '' + CAST(@dbid AS NVARCHAR) + '', '''''' + @dbname + '''''', [name], 0 FROM ['' + @dbname + ''].sys.filegroups WHERE [type] = ''''FG'''' AND is_read_only = 0;'''
          '  INSERT INTO #tmpfgs'
          '  EXEC (@query)'
          ''
          '  UPDATE #tmpdbs'
          '  SET isdone = 1'
          '  WHERE [dbid] = @dbid'
          'END;'
          ''
          'IF (SELECT COUNT(ID) FROM #tmpfgs) > 0'
          'BEGIN'
          '  WHILE (SELECT COUNT(id) FROM #tmpfgs WHERE isdone = 0) > 0'
          '  BEGIN'
          '    SELECT TOP 1 @dbname = [dbname], @dbid = [dbid], @fgname = fgname FROM #tmpfgs WHERE isdone = 0'
          ''
          '    SET @query = ''ALTER DATABASE ['' + @dbname + ''] MODIFY FILEGROUP ['' + @fgname + ''] AUTOGROW_ALL_FILES;'''
          ''
          '    PRINT @query'
          ''
          '    UPDATE #tmpfgs'
          '    SET isdone = 1'
          '    WHERE [dbid] = @dbid AND fgname = @fgname'
          '  END'
          'END;'
          ''
          ''
        )
      end    
      item
        Caption = 'Declare11'
        Lines.Strings = (
          'DECLARE @loop int'
          ''
          ''
        )
      end    
      item
        Caption = 'Declare12'
        Lines.Strings = (
          'DECLARE @AccountDescription varchar(50)'
          ''
          ''
        )
      end    
      item
        Caption = 'Declare13'
        Lines.Strings = (
          'DECLARE @AccountKey int'
          ''
          ''
        )
      end    
      item
        Caption = 'Declare14'
        Lines.Strings = (
          'DECLARE @AccountType varchar(50)'
          ''
          ''
        )
      end    
      item
        Caption = 'Declare15'
        Lines.Strings = (
          'DECLARE @AccountCode int'
          ''
          ''
        )
      end    
      item
        Caption = 'Declare16'
        Lines.Strings = (
          'DECLARE @x xml (ManuInstructionsSchemaCollection);'
          ''
          ''
        )
      end    
      item
        Caption = 'Declare17'
        Lines.Strings = (
          'DECLARE @SamplesPath nvarchar(1024)'
          ''
          ''
        )
      end    
      item
        Caption = 'Declare18'
        Lines.Strings = (
          'DECLARE @AuthClientId uniqueidentifier = ''EF5C8E09-4D2A-4A76-9998-D93440D8115D'';'
          ''
          ''
        )
      end    
      item
        Caption = 'Declare19'
        Lines.Strings = (
          'DECLARE @AuthClientSecret varchar(200) = ''SECRET_DBEngine'';'
          ''
          ''
        )
      end    
      item
        Caption = 'Declare20'
        Lines.Strings = (
          'DECLARE @pwd varchar(max) = REPLACE(CONVERT(varchar(36), @AuthClientId) , ''-'', '''') + @AuthClientSecret;'
          ''
          ''
        )
      end    
      item
        Caption = 'Declare21'
        Lines.Strings = (
          'DECLARE @data_path nvarchar(256);'
          ''
          ''
        )
      end    
      item
        Caption = 'Declare22'
        Lines.Strings = (
          'DECLARE @SamplesPath nvarchar(1024);'
          ''
          ''
        )
      end    
      item
        Caption = 'Declare23'
        Lines.Strings = (
          'DECLARE @IntegerPartitionFunction nvarchar(max) ='
          '    N''CREATE PARTITION FUNCTION IntegerPartitionFunction (int)'
          '    AS RANGE RIGHT FOR VALUES ('';'
          ''
          ''
        )
      end    
      item
        Caption = 'Declare24'
        Lines.Strings = (
          'DECLARE @i int = 1;'
          ''
          ''
        )
      end    
      item
        Caption = 'Declare25'
        Lines.Strings = (
          'DECLARE @DatePartitionFunction nvarchar(max) ='
          '    N''CREATE PARTITION FUNCTION DatePartitionFunction (datetime2)'
          '    AS RANGE RIGHT FOR VALUES ('';'
          ''
          ''
        )
      end    
      item
        Caption = 'Declare26'
        Lines.Strings = (
          'DECLARE @i datetime2 = ''20070101'';'
          ''
        )
      end    
      item
        Caption = 'Declare27'
        Lines.Strings = (
          'DECLARE @LocationTVP'
          'AS LocationTableType;'
          ''
        )
      end    
      item
        Caption = 'Declare28'
        Lines.Strings = (
          ''
          'DECLARE @MyCursor CURSOR;'
          ''
        )
      end    
      item
        Caption = 'Declare29'
        Lines.Strings = (
          'DECLARE @ComparePrice MONEY, @Cost MONEY;'
          ''
          ''
        )
      end    
      item
        Caption = 'Declare30'
        Lines.Strings = (
          'DECLARE @Rowcount INT'
          ''
          ''
        )
      end    
      item
        Caption = 'Declare31'
        Lines.Strings = (
          'DECLARE @minidentval column_type;'
          ''
          ''
        )
      end    
      item
        Caption = 'Declare32'
        Lines.Strings = (
          'DECLARE @x xml (ManuInstructionsSchemaCollection);'
          ''
          ''
        )
      end    
      item
        Caption = 'Declare33'
        Lines.Strings = (
          'DECLARE @cookie VARBINARY(8000);'
          ''
          ''
        )
      end>
    Left = 208
    Top = 368
  end
  object sFunctions: TRxTextHolder
    Highlighter = rxSynSQL
    Items = <    
      item
        Caption = 'CreateProcedure1'
        Lines.Strings = (
          'CREATE PROCEDURE dbo.uspGetEmployeeSales'
          'AS'
          '    SET NOCOUNT ON;'
          '    SELECT ''PROCEDURE'', sp.BusinessEntityID, c.LastName,'
          '        sp.SalesYTD'
          '    FROM Sales.SalesPerson AS sp'
          '    INNER JOIN Person.Person AS c'
          '        ON sp.BusinessEntityID = c.BusinessEntityID'
          '    WHERE sp.BusinessEntityID LIKE ''2%'''
          '    ORDER BY sp.BusinessEntityID, c.LastName;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateProcedure2'
        Lines.Strings = (
          'CREATE PROCEDURE dbo.InsertUnitMeasure'
          '    @UnitMeasureCode nchar(3),'
          '    @Name nvarchar(25)'
          'AS'
          'BEGIN'
          '    SET NOCOUNT ON;'
          '-- Update the row if it exists.'
          '    UPDATE Production.UnitMeasure'
          'SET Name = @Name'
          'WHERE UnitMeasureCode = @UnitMeasureCode'
          '-- Insert the row if the UPDATE statement failed.'
          'IF (@@ROWCOUNT = 0 )'
          'BEGIN'
          '    INSERT INTO Production.UnitMeasure (UnitMeasureCode, Name)'
          '    VALUES (@UnitMeasureCode, @Name)'
          'END'
          'END;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateProcedure3'
        Lines.Strings = (
          'CREATE PROCEDURE Production.usp_UpdateInventory'
          '    @OrderDate datetime'
          'AS'
          'MERGE Production.ProductInventory AS target'
          'USING (SELECT ProductID, SUM(OrderQty) FROM Sales.SalesOrderDetail AS sod'
          '    JOIN Sales.SalesOrderHeader AS soh'
          '    ON sod.SalesOrderID = soh.SalesOrderID'
          '    AND soh.OrderDate = @OrderDate'
          '    GROUP BY ProductID) AS source (ProductID, OrderQty)'
          'ON (target.ProductID = source.ProductID)'
          'WHEN MATCHED AND target.Quantity - source.OrderQty <= 0'
          '    THEN DELETE'
          'WHEN MATCHED'
          '    THEN UPDATE SET target.Quantity = target.Quantity - source.OrderQty,'
          '                    target.ModifiedDate = GETDATE()'
          'OUTPUT $action, Inserted.ProductID, Inserted.Quantity,'
          '    Inserted.ModifiedDate, Deleted.ProductID,'
          '    Deleted.Quantity, Deleted.ModifiedDate;'
          'GO'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateProcedure4'
        Lines.Strings = (
          'CREATE PROCEDURE Purchasing.uspVendorAllInfo'
          'WITH EXECUTE AS CALLER'
          'AS'
          '    SET NOCOUNT ON;'
          '    SELECT v.Name AS Vendor, p.Name AS ''Product name'','
          '      v.CreditRating AS ''Rating'','
          '      v.ActiveFlag AS Availability'
          '    FROM Purchasing.Vendor v'
          '    INNER JOIN Purchasing.ProductVendor pv'
          '      ON v.BusinessEntityID = pv.BusinessEntityID'
          '    INNER JOIN Production.Product p'
          '      ON pv.ProductID = p.ProductID'
          '    ORDER BY v.Name ASC;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateProcedure5'
        Lines.Strings = (
          'CREATE PROCEDURE HumanResources.uspGetAllEmployees'
          'AS'
          '    SET NOCOUNT ON;'
          '    SELECT LastName, FirstName, JobTitle, Department'
          '    FROM HumanResources.vEmployeeDepartment;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateProcedure6'
        Lines.Strings = (
          'CREATE PROCEDURE dbo.uspMultipleResults'
          'AS'
          'SELECT TOP(10) BusinessEntityID, Lastname, FirstName FROM Person.Person;'
          'SELECT TOP(10) CustomerID, AccountNumber FROM Sales.Customer;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateProcedure7'
        Lines.Strings = (
          'CREATE PROCEDURE dbo.GetPhotoFromDB'
          '('
          '    @ProductPhotoID INT'
          '    , @CurrentDirectory NVARCHAR(1024)'
          '    , @FileName NVARCHAR(1024)'
          ')'
          'AS EXTERNAL NAME HandlingLOBUsingCLR.LargeObjectBinary.GetPhotoFromDB;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateProcedure8'
        Lines.Strings = (
          'CREATE PROCEDURE HumanResources.uspGetEmployees'
          '    @LastName NVARCHAR(50),'
          '    @FirstName NVARCHAR(50)'
          'AS'
          ''
          '    SET NOCOUNT ON;'
          '    SELECT FirstName, LastName, JobTitle, Department'
          '    FROM HumanResources.vEmployeeDepartment'
          '    WHERE FirstName = @FirstName AND LastName = @LastName;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateProcedure9'
        Lines.Strings = (
          'CREATE PROCEDURE HumanResources.uspGetEmployees2'
          '    @LastName NVARCHAR(50) = N''D%'','
          '    @FirstName NVARCHAR(50) = N''%'''
          'AS'
          '    SET NOCOUNT ON;'
          '    SELECT FirstName, LastName, JobTitle, Department'
          '    FROM HumanResources.vEmployeeDepartment'
          '    WHERE FirstName LIKE @FirstName AND LastName LIKE @LastName;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateProcedure10'
        Lines.Strings = (
          'CREATE PROCEDURE Production.uspGetList @Product VARCHAR(40)'
          '    , @MaxPrice MONEY'
          '    , @ComparePrice MONEY OUTPUT'
          '    , @ListPrice MONEY OUT'
          'AS'
          '    SET NOCOUNT ON;'
          '    SELECT p.[Name] AS Product, p.ListPrice AS ''List Price'''
          '    FROM Production.Product AS p'
          '    JOIN Production.ProductSubcategory AS s'
          '      ON p.ProductSubcategoryID = s.ProductSubcategoryID'
          '    WHERE s.[Name] LIKE @Product AND p.ListPrice < @MaxPrice;'
          '-- Populate the output variable @ListPprice.'
          'SET @ListPrice = (SELECT MAX(p.ListPrice)'
          '    FROM Production.Product AS p'
          '    JOIN Production.ProductSubcategory AS s'
          '      ON p.ProductSubcategoryID = s.ProductSubcategoryID'
          '    WHERE s.[Name] LIKE @Product AND p.ListPrice < @MaxPrice);'
          '-- Populate the output variable @compareprice.'
          'SET @ComparePrice = @MaxPrice;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateProcedure11'
        Lines.Strings = (
          'CREATE PROCEDURE usp_InsertProductionLocation'
          '    @TVP LocationTableType READONLY'
          '    AS'
          '    SET NOCOUNT ON'
          '    INSERT INTO [AdventureWorks2012].[Production].[Location]'
          '       ([Name]'
          '       , [CostRate]'
          '       , [Availability]'
          '       , [ModifiedDate])'
          '    SELECT *, 0, GETDATE()'
          '    FROM @TVP;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateProcedure12'
        Lines.Strings = (
          'CREATE PROCEDURE dbo.uspCurrencyCursor'
          '    @CurrencyCursor CURSOR VARYING OUTPUT'
          'AS'
          '    SET NOCOUNT ON;'
          '    SET @CurrencyCursor = CURSOR'
          '    FORWARD_ONLY STATIC FOR'
          '      SELECT CurrencyCode, Name'
          '      FROM Sales.Currency;'
          '    OPEN @CurrencyCursor;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateProcedure13'
        Lines.Strings = (
          'CREATE PROCEDURE HumanResources.Update_VacationHours'
          '@NewHours SMALLINT, @Rowcount INT OUTPUT'
          'AS'
          'SET NOCOUNT ON;'
          'UPDATE HumanResources.Employee'
          'SET VacationHours ='
          '    ( CASE'
          '        WHEN SalariedFlag = 0 THEN VacationHours + @NewHours'
          '        ELSE @NewHours'
          '        END'
          '    )'
          'WHERE CurrentFlag = 1;'
          'SET @Rowcount = @@rowcount;'
          ''
          ''
          ''
        )
      end    
      item
        Caption = 'CreateProcedure14'
        Lines.Strings = (
          'CREATE PROCEDURE Production.uspDeleteWorkOrder ( @WorkOrderID INT )'
          'AS'
          'SET NOCOUNT ON;'
          'BEGIN TRY'
          '  BEGIN TRANSACTION'
          '  -- Delete rows from the child table, WorkOrderRouting, for the specified work order.'
          '    DELETE FROM Production.WorkOrderRouting'
          '    WHERE WorkOrderID = @WorkOrderID;'
          '  -- Delete the rows from the parent table, WorkOrder, for the specified work order.'
          '    DELETE FROM Production.WorkOrder'
          '    WHERE WorkOrderID = @WorkOrderID;'
          '  COMMIT'
          'END TRY'
          ''
          'BEGIN CATCH'
          '  -- Determine if an error occurred.'
          '  IF @@TRANCOUNT > 0'
          '    ROLLBACK'
          ''
          '  -- Return the error information.'
          '  DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT;'
          '  SELECT @ErrorMessage = ERROR_MESSAGE(),@ErrorSeverity = ERROR_SEVERITY();'
          '  RAISERROR(@ErrorMessage, @ErrorSeverity, 1);'
          'END CATCH;'
          ''
          ''
          ''
        )
      end    
      item
        Caption = 'CreateProcedure15'
        Lines.Strings = (
          'CREATE PROCEDURE HumanResources.uspEncryptThis'
          'WITH ENCRYPTION'
          'AS'
          '    SET NOCOUNT ON;'
          '    SELECT BusinessEntityID, JobTitle, NationalIDNumber,'
          '        VacationHours, SickLeaveHours'
          '    FROM HumanResources.Employee;'
          'GO'
          ''
          'IF OBJECT_ID ( ''dbo.uspProductByVendor'', ''P'' ) IS NOT NULL'
          '    DROP PROCEDURE dbo.uspProductByVendor;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateProcedure16'
        Lines.Strings = (
          'CREATE PROCEDURE dbo.uspProductByVendor @Name VARCHAR(30) = ''%'''
          'WITH RECOMPILE'
          'AS'
          '    SET NOCOUNT ON;'
          '    SELECT v.Name AS ''Vendor name'', p.Name AS ''Product name'''
          '    FROM Purchasing.Vendor AS v'
          '    JOIN Purchasing.ProductVendor AS pv'
          '      ON v.BusinessEntityID = pv.BusinessEntityID'
          '    JOIN Production.Product AS p'
          '      ON pv.ProductID = p.ProductID'
          '    WHERE v.Name LIKE @Name;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateProcedure17'
        Lines.Strings = (
          'CREATE PROCEDURE Purchasing.uspVendorAllInfo'
          'WITH EXECUTE AS CALLER'
          'AS'
          '    SET NOCOUNT ON;'
          '    SELECT v.Name AS Vendor, p.Name AS ''Product name'','
          '      v.CreditRating AS ''Rating'','
          '      v.ActiveFlag AS Availability'
          '    FROM Purchasing.Vendor v'
          '    INNER JOIN Purchasing.ProductVendor pv'
          '      ON v.BusinessEntityID = pv.BusinessEntityID'
          '    INNER JOIN Production.Product p'
          '      ON pv.ProductID = p.ProductID'
          '    ORDER BY v.Name ASC;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateProcedure18'
        Lines.Strings = (
          'CREATE PROCEDURE dbo.TruncateMyTable'
          'WITH EXECUTE AS SELF'
          'AS TRUNCATE TABLE MyDB..MyTable;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateProcedure19'
        Lines.Strings = (
          'CREATE PROCEDURE Get10TopResellers'
          'AS'
          'BEGIN'
          '    SELECT TOP (10) r.ResellerName, r.AnnualSales'
          '    FROM DimReseller AS r'
          '    ORDER BY AnnualSales DESC, ResellerName ASC;'
          'END'
          ';'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateProcedure20'
        Lines.Strings = (
          'CREATE PROCEDURE procSelectT1 AS'
          'BEGIN'
          '    PRINT ''Now selecting from T1...'';'
          '    SELECT * FROM T1;'
          'END;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateProcedure21'
        Lines.Strings = (
          'CREATE PROCEDURE  procSelectT1ForAlice AS'
          'BEGIN'
          '   IF USER_ID() <> USER_ID(''Alice'')'
          '    BEGIN'
          '        PRINT ''Only Alice can use this.'';'
          '        RETURN'
          '    END'
          '   EXEC procSelectT1;'
          'END;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateProcedure22'
        Lines.Strings = (
          'CREATE PROCEDURE HumanResources.uspEmployeesInDepartment'
          '@DeptValue int'
          'WITH EXECUTE AS OWNER'
          'AS'
          '    SET NOCOUNT ON;'
          '    SELECT e.BusinessEntityID, c.LastName, c.FirstName, e.JobTitle'
          '    FROM Person.Person AS c'
          '    INNER JOIN HumanResources.Employee AS e'
          '        ON c.BusinessEntityID = e.BusinessEntityID'
          '    INNER JOIN HumanResources.EmployeeDepartmentHistory AS edh'
          '        ON e.BusinessEntityID = edh.BusinessEntityID'
          '    WHERE edh.DepartmentID = @DeptValue'
          '    ORDER BY c.LastName, c.FirstName;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterProcedure1'
        Lines.Strings = (
          'ALTER PROCEDURE dbo.InsertUnitMeasure'
          '    @UnitMeasureCode nchar(3),'
          '    @Name nvarchar(25)'
          'AS'
          'BEGIN'
          '    SET NOCOUNT ON;'
          ''
          '    MERGE Production.UnitMeasure AS target'
          '    USING (SELECT @UnitMeasureCode, @Name) AS source (UnitMeasureCode, Name)'
          '    ON (target.UnitMeasureCode = source.UnitMeasureCode)'
          '    WHEN MATCHED THEN'
          '        UPDATE SET Name = source.Name'
          '    WHEN NOT MATCHED THEN'
          '        INSERT (UnitMeasureCode, Name)'
          '        VALUES (source.UnitMeasureCode, source.Name)'
          '    OUTPUT deleted.*, $action, inserted.* INTO #MyTempTable;'
          'END;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterProcedure2'
        Lines.Strings = (
          'CREATE OR ALTER PROCEDURE mergeEdge'
          '    @PersonId integer,'
          '    @CityId integer,'
          '    @StreetAddress varchar(100)'
          'AS'
          'BEGIN'
          '    MERGE livesIn'
          '        USING ((SELECT @PersonId, @CityId, @StreetAddress) AS T (PersonId, CityId, StreetAddress)'
          '                JOIN Person ON T.PersonId = Person.ID'
          '                JOIN City ON T.CityId = City.ID)'
          '        ON MATCH (Person-(livesIn)->City)'
          '    WHEN MATCHED THEN'
          '        UPDATE SET StreetAddress = @StreetAddress'
          '    WHEN NOT MATCHED THEN'
          '        INSERT ($from_id, $to_id, StreetAddress)'
          '        VALUES (Person.$node_id, City.$node_id, @StreetAddress) ;'
          'END'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterProcedure3'
        Lines.Strings = (
          'ALTER PROCEDURE Purchasing.uspVendorAllInfo'
          '    @Product VARCHAR(25)'
          'AS'
          '    SET NOCOUNT ON;'
          '    SELECT LEFT(v.Name, 25) AS Vendor, LEFT(p.Name, 25) AS ''Product name'','
          '    ''Rating'' = CASE v.CreditRating'
          '        WHEN 1 THEN ''Superior'''
          '        WHEN 2 THEN ''Excellent'''
          '        WHEN 3 THEN ''Above average'''
          '        WHEN 4 THEN ''Average'''
          '        WHEN 5 THEN ''Below average'''
          '        ELSE ''No rating'''
          '        END'
          '    , Availability = CASE v.ActiveFlag'
          '        WHEN 1 THEN ''Yes'''
          '        ELSE ''No'''
          '        END'
          '    FROM Purchasing.Vendor AS v'
          '    INNER JOIN Purchasing.ProductVendor AS pv'
          '      ON v.BusinessEntityID = pv.BusinessEntityID'
          '    INNER JOIN Production.Product AS p'
          '      ON pv.ProductID = p.ProductID'
          '    WHERE p.Name LIKE @Product'
          '    ORDER BY v.Name ASC;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterProcedure4'
        Lines.Strings = (
          'ALTER PROCEDURE Production.uspDeleteWorkOrder ( @WorkOrderID INT )'
          'AS'
          ''
          'BEGIN TRY'
          '  BEGIN TRANSACTION'
          '  -- Delete the rows from the parent table, WorkOrder, for the specified work order.'
          '    DELETE FROM Production.WorkOrder'
          '    WHERE WorkOrderID = @WorkOrderID;'
          ''
          '  -- Delete rows from the child table, WorkOrderRouting, for the specified work order.'
          '    DELETE FROM Production.WorkOrderRouting'
          '    WHERE WorkOrderID = @WorkOrderID;'
          '  COMMIT TRANSACTION'
          'END TRY'
          ''
          'BEGIN CATCH'
          '  -- Determine if an error occurred.'
          '  IF @@TRANCOUNT > 0'
          '    ROLLBACK TRANSACTION'
          ''
          '  -- Return the error information.'
          '  DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT;'
          '  SELECT @ErrorMessage = ERROR_MESSAGE(),@ErrorSeverity = ERROR_SEVERITY();'
          '  RAISERROR(@ErrorMessage, @ErrorSeverity, 1);'
          'END CATCH;'
          ''
          ''
        )
      end    
      item
        Caption = 'DropProcedure1'
        Lines.Strings = (
          '    DROP PROCEDURE Purchasing.uspVendorAllInfo;'
          ''
          ''
        )
      end    
      item
        Caption = 'DropProcedure2'
        Lines.Strings = (
          '    DROP PROCEDURE HumanResources.uspGetEmployees;'
          ''
          ''
        )
      end    
      item
        Caption = 'DropProcedure3'
        Lines.Strings = (
          '    DROP PROCEDURE HumanResources.uspGetEmployees2;'
          ''
          ''
        )
      end    
      item
        Caption = 'DropProcedure4'
        Lines.Strings = (
          '    DROP PROCEDURE Production.uspGetList;'
          ''
          ''
        )
      end    
      item
        Caption = 'DropProcedure5'
        Lines.Strings = (
          'DROP PROCEDURE Production.uspDeleteWorkOrder;'
          ''
          ''
        )
      end    
      item
        Caption = 'DropProcedure6'
        Lines.Strings = (
          'DROP PROCEDURE dbo.uspMyProc;'
          ''
        )
      end    
      item
        Caption = 'DropProcedure7'
        Lines.Strings = (
          'DROP PROCEDURE dbo.uspGetSalesbyMonth, dbo.uspUpdateSalesQuotes, dbo.uspGetSalesByYear;'
        )
      end    
      item
        Caption = 'DropProcedure8'
        Lines.Strings = (
          'DROP PROCEDURE IF EXISTS dbo.uspMyProc;'
        )
      end    
      item
        Caption = 'CreateFunction1'
        Lines.Strings = (
          'CREATE FUNCTION dbo.rgclassifier_v1() RETURNS sysname'
          'WITH SCHEMABINDING'
          'AS'
          'BEGIN'
          '-- Declare the variable to hold the value returned in sysname.'
          '    DECLARE @grp_name AS sysname'
          '-- If the user login is ''sa'', map the connection to the groupAdmin'
          '-- workload group.'
          '    IF (SUSER_NAME() = ''sa'')'
          '        SET @grp_name = ''groupAdmin'''
          '-- Use application information to map the connection to the groupAdhoc'
          '-- workload group.'
          '    ELSE IF (APP_NAME() LIKE ''%MANAGEMENT STUDIO%'')'
          '        OR (APP_NAME() LIKE ''%QUERY ANALYZER%'')'
          '            SET @grp_name = ''groupAdhoc'''
          '-- If the application is for reporting, map the connection to'
          '-- the groupReports workload group.'
          '    ELSE IF (APP_NAME() LIKE ''%REPORT SERVER%'')'
          '        SET @grp_name = ''groupReports'''
          '-- If the connection does not map to any of the previous groups,'
          '-- put the connection into the default workload group.'
          '    ELSE'
          '        SET @grp_name = ''default'''
          '    RETURN @grp_name'
          'END;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateFunction2'
        Lines.Strings = (
          'CREATE FUNCTION dbo.ISOweek (@DATE datetime)'
          'RETURNS int'
          'WITH EXECUTE AS CALLER'
          'AS'
          'BEGIN'
          '    DECLARE @ISOweek int;'
          '    SET @ISOweek= DATEPART(wk,@DATE)+1'
          '        -DATEPART(wk,CAST(DATEPART(yy,@DATE) as CHAR(4))+''0104'');'
          '--Special cases: Jan 1-3 may belong to the previous year'
          '    IF (@ISOweek=0)'
          '        SET @ISOweek=dbo.ISOweek(CAST(DATEPART(yy,@DATE)-1'
          '            AS CHAR(4))+''12''+ CAST(24+DATEPART(DAY,@DATE) AS CHAR(2)))+1;'
          '--Special case: Dec 29-31 may belong to the next year'
          '    IF ((DATEPART(mm,@DATE)=12) AND'
          '        ((DATEPART(dd,@DATE)-DATEPART(dw,@DATE))>= 28))'
          '    SET @ISOweek=1;'
          '    RETURN(@ISOweek);'
          'END;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateFunction3'
        Lines.Strings = (
          'CREATE FUNCTION Sales.ufn_SalesByStore (@storeid int)'
          'RETURNS TABLE'
          'AS'
          'RETURN'
          '('
          '    SELECT P.ProductID, P.Name, SUM(SD.LineTotal) AS ''Total'''
          '    FROM Production.Product AS P'
          '    JOIN Sales.SalesOrderDetail AS SD ON SD.ProductID = P.ProductID'
          '    JOIN Sales.SalesOrderHeader AS SH ON SH.SalesOrderID = SD.SalesOrderID'
          '    JOIN Sales.Customer AS C ON SH.CustomerID = C.CustomerID'
          '    WHERE C.StoreID = @storeid'
          '    GROUP BY P.ProductID, P.Name'
          ');'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateFunction4'
        Lines.Strings = (
          'CREATE FUNCTION dbo.ufn_FindReports (@InEmpID INTEGER)'
          'RETURNS @retFindReports TABLE'
          '('
          '    EmployeeID int primary key NOT NULL,'
          '    FirstName nvarchar(255) NOT NULL,'
          '    LastName nvarchar(255) NOT NULL,'
          '    JobTitle nvarchar(50) NOT NULL,'
          '    RecursionLevel int NOT NULL'
          ')'
          '--Returns a result set that lists all the employees who report to the'
          '--specific employee directly or indirectly.*/'
          'AS'
          'BEGIN'
          'WITH EMP_cte(EmployeeID, OrganizationNode, FirstName, LastName, JobTitle, RecursionLevel) -- CTE name and columns'
          '    AS ('
          '        -- Get the initial list of Employees for Manager n'
          '        SELECT e.BusinessEntityID, e.OrganizationNode, p.FirstName, p.LastName, e.JobTitle, 0'
          '        FROM HumanResources.Employee e'
          'INNER JOIN Person.Person p'
          'ON p.BusinessEntityID = e.BusinessEntityID'
          '        WHERE e.BusinessEntityID = @InEmpID'
          '        UNION ALL'
          '        -- Join recursive member to anchor'
          '        SELECT e.BusinessEntityID, e.OrganizationNode, p.FirstName, p.LastName, e.JobTitle, RecursionLevel + 1'
          '        FROM HumanResources.Employee e'
          '            INNER JOIN EMP_cte'
          '            ON e.OrganizationNode.GetAncestor(1) = EMP_cte.OrganizationNode'
          'INNER JOIN Person.Person p'
          'ON p.BusinessEntityID = e.BusinessEntityID'
          '        )'
          '-- copy the required columns to the result of the function'
          '    INSERT @retFindReports'
          '    SELECT EmployeeID, FirstName, LastName, JobTitle, RecursionLevel'
          '    FROM EMP_cte'
          '    RETURN'
          'END;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateFunction5'
        Lines.Strings = (
          'CREATE FUNCTION [dbo].[len_s] (@str nvarchar(4000))'
          'RETURNS bigint'
          'AS EXTERNAL NAME [SurrogateStringFunction].[Microsoft.Samples.SqlServer.SurrogateStringFunction].[LenS];'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateFunction6'
        Lines.Strings = (
          'CREATE FUNCTION dbo.OrderDozen (@OrderAmt INT)'
          'RETURNS INT'
          'WITH EXECUTE AS CALLER'
          'AS'
          'BEGIN'
          'IF @OrderAmt % 12 <> 0'
          'BEGIN'
          '    SET @OrderAmt +=  12 - (@OrderAmt % 12)'
          'END'
          'RETURN(@OrderAmt);'
          'END;'
          ''
          ''
        )
      end    
      item
        Caption = 'DropFunction1'
        Lines.Strings = (
          'DROP FUNCTION Sales.fn_SalesByStore;'
          ''
          ''
        )
      end    
      item
        Caption = 'PartitionFunction1'
        Lines.Strings = (
          'DROP PARTITION FUNCTION myRangePF1;'
          ''
        )
      end    
      item
        Caption = 'PartitionFunction2'
        Lines.Strings = (
          'CREATE PARTITION FUNCTION myRangePF1 (int)'
          'AS RANGE LEFT FOR VALUES ( 1, 100, 1000 );'
          ''
        )
      end    
      item
        Caption = 'PartitionFunction3'
        Lines.Strings = (
          'ALTER PARTITION FUNCTION myRangePF1 ()'
          'SPLIT RANGE (500);'
          ''
        )
      end    
      item
        Caption = 'PartitionFunction4'
        Lines.Strings = (
          'DROP PARTITION FUNCTION myRangePF1;'
          ''
        )
      end    
      item
        Caption = 'PartitionFunction5'
        Lines.Strings = (
          'CREATE PARTITION FUNCTION myRangePF1 (int)'
          'AS RANGE LEFT FOR VALUES ( 1, 100, 1000 );'
          ''
        )
      end    
      item
        Caption = 'PartitionFunction6'
        Lines.Strings = (
          'ALTER PARTITION FUNCTION myRangePF1 ()'
          'MERGE RANGE (100);'
        )
      end    
      item
        Caption = 'PartitionFunction7'
        Lines.Strings = (
          'CREATE PARTITION FUNCTION myRangePF1 (int)'
          'AS RANGE LEFT FOR VALUES (1, 100, 1000);'
          ''
        )
      end    
      item
        Caption = 'PartitionFunction8'
        Lines.Strings = (
          'CREATE PARTITION FUNCTION myRangePF2 (int)'
          'AS RANGE RIGHT FOR VALUES (1, 100, 1000);'
          ''
        )
      end    
      item
        Caption = 'PartitionFunction9'
        Lines.Strings = (
          'CREATE PARTITION FUNCTION [myDateRangePF1] (datetime)'
          'AS RANGE RIGHT FOR VALUES (''20030201'', ''20030301'', ''20030401'','
          '               ''20030501'', ''20030601'', ''20030701'', ''20030801'','
          '               ''20030901'', ''20031001'', ''20031101'', ''20031201'');'
          ''
        )
      end    
      item
        Caption = 'PartitionFunction10'
        Lines.Strings = (
          'CREATE PARTITION FUNCTION myRangePF3 (char(20))'
          'AS RANGE RIGHT FOR VALUES (''EX'', ''RXE'', ''XR'');'
          ''
        )
      end    
      item
        Caption = 'PartitionFunction11'
        Lines.Strings = (
          'CREATE PARTITION FUNCTION myRangePF1 (INT)'
          'AS RANGE LEFT FOR VALUES (1, 100, 1000);'
          ''
        )
      end    
      item
        Caption = 'PartitionFunction12'
        Lines.Strings = (
          'CREATE PARTITION SCHEME myRangePS1'
          'AS PARTITION myRangePF1'
          'TO (test1fg, test2fg, test3fg, test4fg);'
          ''
        )
      end    
      item
        Caption = 'PartitionFunction13'
        Lines.Strings = (
          'CREATE PARTITION FUNCTION myRangePF2 (INT)'
          'AS RANGE LEFT FOR VALUES (1, 100, 1000);'
          ''
        )
      end    
      item
        Caption = 'PartitionFunction14'
        Lines.Strings = (
          'CREATE PARTITION SCHEME myRangePS2'
          'AS PARTITION myRangePF2'
          'TO ( test1fg, test1fg, test1fg, test2fg );'
          ''
        )
      end    
      item
        Caption = 'PartitionFunction15'
        Lines.Strings = (
          'CREATE PARTITION FUNCTION myRangePF3 (INT)'
          'AS RANGE LEFT FOR VALUES (1, 100, 1000);'
          ''
        )
      end    
      item
        Caption = 'PartitionFunction16'
        Lines.Strings = (
          'CREATE PARTITION SCHEME myRangePS3'
          'AS PARTITION myRangePF3'
          'ALL TO ( test1fg );'
          ''
        )
      end    
      item
        Caption = 'PartitionFunction17'
        Lines.Strings = (
          'CREATE PARTITION FUNCTION myRangePF4 (INT)'
          'AS RANGE LEFT FOR VALUES (1, 100, 1000);'
          ''
        )
      end    
      item
        Caption = 'PartitionFunction18'
        Lines.Strings = (
          'CREATE PARTITION FUNCTION myRangePF1 (INT)'
          'AS RANGE LEFT FOR VALUES (1, 100, 1000);'
        )
      end    
      item
        Caption = 'PartitionFunction19'
        Lines.Strings = (
          'CREATE PARTITION FUNCTION myRangePF1 (int)'
          '    AS RANGE LEFT FOR VALUES (1, 100, 1000);'
        )
      end    
      item
        Caption = 'PartitionFunction20'
        Lines.Strings = (
          'DROP PARTITION FUNCTION myRangePF;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateProcedure23'
        Lines.Strings = (
          'CREATE PROC [sp_signature_demo]'
          'AS'
          '    PRINT ''This is the content of the procedure.'' ;'
          ''
          ''
        )
      end>
    Left = 264
    Top = 368
  end
  object sViews: TRxTextHolder
    Highlighter = rxSynSQL
    Items = <    
      item
        Caption = 'CreateView1'
        Lines.Strings = (
          'CREATE VIEW V1 AS'
          'SELECT column_2, column_1'
          'FROM T1;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateView2'
        Lines.Strings = (
          'CREATE VIEW HumanResources.EmployeeHireDate'
          'AS'
          'SELECT p.FirstName, p.LastName, e.HireDate'
          'FROM HumanResources.Employee AS e JOIN Person.Person AS  p'
          'ON e.BusinessEntityID = p.BusinessEntityID ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateView3'
        Lines.Strings = (
          'CREATE VIEW Sales.vOrders'
          '  WITH SCHEMABINDING'
          'AS'
          '  SELECT SUM(UnitPrice * OrderQty * (1.00 - UnitPriceDiscount)) AS Revenue,'
          '    OrderDate, ProductID, COUNT_BIG(*) AS COUNT'
          '  FROM Sales.SalesOrderDetail AS od, Sales.SalesOrderHeader AS o'
          '  WHERE od.SalesOrderID = o.SalesOrderID'
          '  GROUP BY OrderDate, ProductID;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateView4'
        Lines.Strings = (
          'CREATE VIEW hiredate_view'
          'AS'
          'SELECT p.FirstName, p.LastName, e.BusinessEntityID, e.HireDate'
          'FROM HumanResources.Employee e'
          'JOIN Person.Person AS p ON e.BusinessEntityID = p.BusinessEntityID ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateView5'
        Lines.Strings = (
          ''
          'CREATE VIEW Purchasing.PurchaseOrderReject'
          'WITH ENCRYPTION'
          'AS'
          'SELECT PurchaseOrderID, ReceivedQty, RejectedQty,'
          '    RejectedQty / ReceivedQty AS RejectRatio, DueDate'
          'FROM Purchasing.PurchaseOrderDetail'
          'WHERE RejectedQty / ReceivedQty > 0'
          'AND DueDate > CONVERT(DATETIME,''20010630'',101) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateView6'
        Lines.Strings = (
          ''
          'CREATE VIEW dbo.SeattleOnly'
          'AS'
          'SELECT p.LastName, p.FirstName, e.JobTitle, a.City, sp.StateProvinceCode'
          'FROM HumanResources.Employee e'
          'INNER JOIN Person.Person p'
          'ON p.BusinessEntityID = e.BusinessEntityID'
          '    INNER JOIN Person.BusinessEntityAddress bea'
          '    ON bea.BusinessEntityID = e.BusinessEntityID'
          '    INNER JOIN Person.Address a'
          '    ON a.AddressID = bea.AddressID'
          '    INNER JOIN Person.StateProvince sp'
          '    ON sp.StateProvinceID = a.StateProvinceID'
          'WHERE a.City = ''Seattle'''
          'WITH CHECK OPTION ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateView7'
        Lines.Strings = (
          ''
          'CREATE VIEW Sales.SalesPersonPerform'
          'AS'
          'SELECT TOP (100) SalesPersonID, SUM(TotalDue) AS TotalSales'
          'FROM Sales.SalesOrderHeader'
          'WHERE OrderDate > CONVERT(DATETIME,''20001231'',101)'
          'GROUP BY SalesPersonID;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateView8'
        Lines.Strings = (
          'CREATE VIEW dbo.all_supplier_view'
          'WITH SCHEMABINDING'
          'AS'
          'SELECT supplyID, supplier'
          '  FROM dbo.SUPPLY1'
          'UNION ALL'
          'SELECT supplyID, supplier'
          '  FROM dbo.SUPPLY2'
          'UNION ALL'
          'SELECT supplyID, supplier'
          '  FROM dbo.SUPPLY3'
          'UNION ALL'
          'SELECT supplyID, supplier'
          '  FROM dbo.SUPPLY4;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateView9'
        Lines.Strings = (
          'CREATE VIEW DimEmployeeBirthDates AS'
          'SELECT FirstName, LastName, BirthDate'
          'FROM DimEmployee;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateView10'
        Lines.Strings = (
          'CREATE VIEW view1'
          'AS'
          'SELECT fis.CustomerKey, fis.ProductKey, fis.OrderDateKey,'
          '  fis.SalesTerritoryKey, dst.SalesTerritoryRegion'
          'FROM FactInternetSales AS fis'
          'LEFT OUTER JOIN DimSalesTerritory AS dst'
          'ON (fis.SalesTerritoryKey=dst.SalesTerritoryKey);'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterView1'
        Lines.Strings = (
          'ALTER VIEW HumanResources.EmployeeHireDate'
          'AS'
          'SELECT p.FirstName, p.LastName, e.HireDate'
          'FROM HumanResources.Employee AS e JOIN Person.Person AS p'
          'ON e.BusinessEntityID = p.BusinessEntityID'
          'WHERE HireDate < CONVERT(DATETIME,''20020101'',101) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'DropView1'
        Lines.Strings = (
          '  DROP VIEW Sales.vOrders;'
          ''
          ''
        )
      end    
      item
        Caption = 'DropView2'
        Lines.Strings = (
          'DROP VIEW IF EXISTS dbo.Reorder ;'
          ''
          ''
        )
      end>
    Left = 336
    Top = 368
  end
  object sSystem: TRxTextHolder
    Highlighter = rxSynSQL
    Items = <    
      item
        Caption = 'CreateServer1'
        Lines.Strings = (
          'CREATE SERVER ROLE Product ;'
        )
      end    
      item
        Caption = 'CreateServer2'
        Lines.Strings = (
          'CREATE SERVER AUDIT Payrole_Security_Audit'
          '    TO FILE ( FILEPATH ='
          '''C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA'' ) ;'
          ''
        )
      end    
      item
        Caption = 'CreateServer3'
        Lines.Strings = (
          'CREATE SERVER AUDIT DataModification_Security_Audit'
          '    TO FILE ( FILEPATH ='
          '''C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA'' ) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateServer4'
        Lines.Strings = (
          'CREATE SERVER AUDIT HIPAA_Audit'
          '    TO FILE ( FILEPATH =''\\SQLPROD_1\Audit\ '' );'
          ''
        )
      end    
      item
        Caption = 'CreateServer5'
        Lines.Strings = (
          'CREATE SERVER AUDIT HIPAA_Audit'
          '    TO APPLICATION_LOG'
          '    WITH ( QUEUE_DELAY = 1000,  ON_FAILURE = SHUTDOWN);'
          ''
        )
      end    
      item
        Caption = 'CreateServer6'
        Lines.Strings = (
          'CREATE SERVER AUDIT AuditDataAccess'
          '    TO FILE ( FILEPATH =''C:\SQLAudit\ '' )'
          '    WHERE object_name = ''SensitiveData'' ;'
        )
      end    
      item
        Caption = 'CreateServer7'
        Lines.Strings = (
          'CREATE SERVER AUDIT SPECIFICATION HIPAA_Audit_Specification'
          'FOR SERVER AUDIT HIPAA_Audit'
          '    ADD (FAILED_LOGIN_GROUP)'
          '    WITH (STATE=ON);'
          ''
        )
      end    
      item
        Caption = 'CreateServer8'
        Lines.Strings = (
          'CREATE SERVER ROLE buyers AUTHORIZATION BenMiller;'
          ''
        )
      end    
      item
        Caption = 'CreateServer9'
        Lines.Strings = (
          'CREATE SERVER ROLE auditors AUTHORIZATION securityadmin;'
          ''
        )
      end    
      item
        Caption = 'CreateServer10'
        Lines.Strings = (
          'CREATE SERVER ROLE ITDevAdmin ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateServer11'
        Lines.Strings = (
          'CREATE SERVER ROLE ITDevelopers ;'
        )
      end    
      item
        Caption = 'AlterServer1'
        Lines.Strings = (
          'ALTER SERVER AUDIT HIPAA_Audit'
          'WITH (STATE = OFF);'
          ''
        )
      end    
      item
        Caption = 'AlterServer2'
        Lines.Strings = (
          'ALTER SERVER AUDIT HIPAA_Audit'
          'MODIFY NAME = HIPAA_Audit_Old;'
          ''
        )
      end    
      item
        Caption = 'AlterServer3'
        Lines.Strings = (
          'ALTER SERVER AUDIT HIPAA_Audit_Old'
          'WITH (STATE = ON);'
          ''
        )
      end    
      item
        Caption = 'AlterServer4'
        Lines.Strings = (
          'ALTER SERVER AUDIT HIPAA_Audit'
          'WITH (STATE = OFF);'
          ''
        )
      end    
      item
        Caption = 'AlterServer5'
        Lines.Strings = (
          'ALTER SERVER AUDIT HIPAA_Audit'
          'TO FILE (FILEPATH =''\\SQLPROD_1\Audit\ '','
          '          MAXSIZE = 1000 MB,'
          '          RESERVE_DISK_SPACE=OFF)'
          'WITH (QUEUE_DELAY = 1000,'
          '       ON_FAILURE = CONTINUE);'
          ''
        )
      end    
      item
        Caption = 'AlterServer6'
        Lines.Strings = (
          'ALTER SERVER AUDIT HIPAA_Audit'
          'WITH (STATE = ON);'
          ''
        )
      end    
      item
        Caption = 'AlterServer7'
        Lines.Strings = (
          'ALTER SERVER AUDIT [FilterForSensitiveData] WITH (STATE = OFF)'
          ''
        )
      end    
      item
        Caption = 'AlterServer8'
        Lines.Strings = (
          'ALTER SERVER AUDIT [FilterForSensitiveData]'
          'WHERE user_defined_event_id = 27;'
          ''
        )
      end    
      item
        Caption = 'AlterServer9'
        Lines.Strings = (
          'ALTER SERVER AUDIT [FilterForSensitiveData] WITH (STATE = ON);'
          ''
        )
      end    
      item
        Caption = 'AlterServer10'
        Lines.Strings = (
          'ALTER SERVER AUDIT [FilterForSensitiveData] WITH (STATE = OFF)'
          ''
        )
      end    
      item
        Caption = 'AlterServer11'
        Lines.Strings = (
          'ALTER SERVER AUDIT [FilterForSensitiveData]'
          'WHERE user_defined_event_id = 27;'
          ''
        )
      end    
      item
        Caption = 'AlterServer12'
        Lines.Strings = (
          'ALTER SERVER AUDIT [FilterForSensitiveData] WITH (STATE = ON);'
          ''
        )
      end    
      item
        Caption = 'AlterServer13'
        Lines.Strings = (
          'ALTER SERVER AUDIT [FilterForSensitiveData] WITH (STATE = OFF)'
          ''
        )
      end    
      item
        Caption = 'AlterServer14'
        Lines.Strings = (
          'ALTER SERVER AUDIT [FilterForSensitiveData]'
          'REMOVE WHERE;'
          ''
        )
      end    
      item
        Caption = 'AlterServer15'
        Lines.Strings = (
          'ALTER SERVER AUDIT [FilterForSensitiveData] WITH (STATE = ON);'
          ''
        )
      end    
      item
        Caption = 'AlterServer16'
        Lines.Strings = (
          'ALTER SERVER AUDIT [FilterForSensitiveData] WITH (STATE = OFF)'
          ''
        )
      end    
      item
        Caption = 'AlterServer17'
        Lines.Strings = (
          'ALTER SERVER AUDIT [FilterForSensitiveData]'
          'MODIFY NAME = AuditDataAccess;'
          ''
        )
      end    
      item
        Caption = 'AlterServer18'
        Lines.Strings = (
          'ALTER SERVER AUDIT [AuditDataAccess] WITH (STATE = ON);'
          ''
        )
      end    
      item
        Caption = 'AlterServer19'
        Lines.Strings = (
          'ALTER SERVER AUDIT SPECIFICATION HIPAA_Audit_Specification'
          'FOR SERVER AUDIT HIPAA_Audit'
          '    DROP (FAILED_LOGIN_GROUP),'
          '    ADD (DATABASE_OBJECT_ACCESS_GROUP)'
          '    WITH (STATE=ON);'
          ''
        )
      end    
      item
        Caption = 'AlterServer20'
        Lines.Strings = (
          'ALTER SERVER CONFIGURATION'
          'SET PROCESS AFFINITY CPU=0 TO 63, 128 TO 191;'
          ''
        )
      end    
      item
        Caption = 'AlterServer21'
        Lines.Strings = (
          'ALTER SERVER CONFIGURATION'
          'SET PROCESS AFFINITY NUMANODE=0, 7;'
          ''
        )
      end    
      item
        Caption = 'AlterServer22'
        Lines.Strings = (
          'ALTER SERVER CONFIGURATION'
          'SET PROCESS AFFINITY CPU=60 TO 200;'
          ''
        )
      end    
      item
        Caption = 'AlterServer23'
        Lines.Strings = (
          'ALTER SERVER CONFIGURATION SET PROCESS AFFINITY CPU=0;'
          ''
        )
      end    
      item
        Caption = 'AlterServer24'
        Lines.Strings = (
          'ALTER SERVER CONFIGURATION'
          'SET PROCESS AFFINITY CPU=AUTO;'
          ''
        )
      end    
      item
        Caption = 'AlterServer25'
        Lines.Strings = (
          'ALTER SERVER CONFIGURATION SET DIAGNOSTICS LOG ON;'
          ''
        )
      end    
      item
        Caption = 'AlterServer26'
        Lines.Strings = (
          'ALTER SERVER CONFIGURATION SET DIAGNOSTICS LOG OFF;'
          ''
        )
      end    
      item
        Caption = 'AlterServer27'
        Lines.Strings = (
          'ALTER SERVER CONFIGURATION'
          'SET DIAGNOSTICS LOG PATH = ''C:\logs'';'
          ''
        )
      end    
      item
        Caption = 'AlterServer28'
        Lines.Strings = (
          'ALTER SERVER CONFIGURATION'
          'SET DIAGNOSTICS LOG MAX_SIZE = 10 MB;'
          ''
        )
      end    
      item
        Caption = 'AlterServer29'
        Lines.Strings = (
          'ALTER SERVER CONFIGURATION'
          'SET FAILOVER CLUSTER PROPERTY HealthCheckTimeout = 15000;'
          ''
        )
      end    
      item
        Caption = 'AlterServer30'
        Lines.Strings = (
          'ALTER SERVER CONFIGURATION SET HADR CLUSTER CONTEXT = ''clus01.xyz.com'';'
          ''
        )
      end    
      item
        Caption = 'AlterServer31'
        Lines.Strings = (
          'ALTER SERVER CONFIGURATION'
          'SET BUFFER POOL EXTENSION ON'
          '    (FILENAME = ''F:\SSDCACHE\Example.BPE'', SIZE = 50 GB);'
          ''
        )
      end    
      item
        Caption = 'AlterServer32'
        Lines.Strings = (
          'ALTER SERVER CONFIGURATION'
          'SET BUFFER POOL EXTENSION OFF;'
          ''
        )
      end    
      item
        Caption = 'AlterServer33'
        Lines.Strings = (
          'ALTER SERVER CONFIGURATION'
          'SET BUFFER POOL EXTENSION ON'
          '    (FILENAME = ''F:\SSDCACHE\Example.BPE'', SIZE = 60 GB);'
          ''
        )
      end    
      item
        Caption = 'AlterServer34'
        Lines.Strings = (
          'ALTER SERVER CONFIGURATION SET MEMORY_OPTIMIZED ON;'
          ''
        )
      end    
      item
        Caption = 'AlterServer35'
        Lines.Strings = (
          'ALTER SERVER CONFIGURATION SET MEMORY_OPTIMIZED TEMPDB_METADATA = ON;'
          ''
        )
      end    
      item
        Caption = 'AlterServer36'
        Lines.Strings = (
          'ALTER SERVER CONFIGURATION SET MEMORY_OPTIMIZED TEMPDB_METADATA = ON (RESOURCE_POOL = ''pool_name'');'
          ''
        )
      end    
      item
        Caption = 'AlterServer37'
        Lines.Strings = (
          'ALTER SERVER CONFIGURATION SET MEMORY_OPTIMIZED HYBRID_BUFFER_POOL = ON;'
          ''
        )
      end    
      item
        Caption = 'AlterServer38'
        Lines.Strings = (
          'ALTER SERVER ROLE Product WITH NAME = Production ;'
          ''
        )
      end    
      item
        Caption = 'AlterServer39'
        Lines.Strings = (
          'ALTER SERVER ROLE Production ADD MEMBER [adventure-works\roberto0] ;'
          ''
        )
      end    
      item
        Caption = 'AlterServer40'
        Lines.Strings = (
          'ALTER SERVER ROLE diskadmin ADD MEMBER Ted ;'
          ''
        )
      end    
      item
        Caption = 'AlterServer41'
        Lines.Strings = (
          'ALTER SERVER ROLE Production DROP MEMBER [adventure-works\roberto0] ;'
          ''
        )
      end    
      item
        Caption = 'AlterServer42'
        Lines.Strings = (
          'ALTER SERVER ROLE Production DROP MEMBER Ted ;'
          ''
        )
      end    
      item
        Caption = 'AlterServer43'
        Lines.Strings = (
          'ALTER SERVER ROLE LargeRC ADD MEMBER Anna;'
          ''
        )
      end    
      item
        Caption = 'AlterServer44'
        Lines.Strings = (
          'ALTER SERVER ROLE LargeRC DROP MEMBER Anna;'
          ''
        )
      end    
      item
        Caption = 'AlterServer45'
        Lines.Strings = (
          'ALTER SERVER AUDIT Payrole_Security_Audit'
          'WITH (STATE = ON) ;'
          ''
        )
      end    
      item
        Caption = 'AlterServer46'
        Lines.Strings = (
          'ALTER SERVER AUDIT DataModification_Security_Audit'
          'WITH (STATE = ON) ;'
        )
      end    
      item
        Caption = 'AlterServer47'
        Lines.Strings = (
          'ALTER SERVER AUDIT AuditDataAccess WITH (STATE = ON);'
        )
      end    
      item
        Caption = 'AlterServer48'
        Lines.Strings = (
          'ALTER SERVER AUDIT HIPAA_Audit'
          'STATE = OFF;'
        )
      end    
      item
        Caption = 'DropServer1'
        Lines.Strings = (
          'DROP SERVER AUDIT HIPAA_Audit;'
          ''
        )
      end    
      item
        Caption = 'DropServer2'
        Lines.Strings = (
          'DROP SERVER AUDIT SPECIFICATION HIPAA_Audit_Specification;'
          ''
        )
      end    
      item
        Caption = 'DropServer3'
        Lines.Strings = (
          'DROP SERVER ROLE purchasing;'
          ''
        )
      end    
      item
        Caption = 'Open1'
        Lines.Strings = (
          'OPEN abc;'
          ''
        )
      end    
      item
        Caption = 'Open2'
        Lines.Strings = (
          'OPEN complex_cursor;'
          ''
        )
      end    
      item
        Caption = 'Fetch1'
        Lines.Strings = (
          'FETCH abc;'
          ''
        )
      end    
      item
        Caption = 'Fetch2'
        Lines.Strings = (
          'FETCH FROM complex_cursor;'
          ''
        )
      end    
      item
        Caption = 'Go1'
        Lines.Strings = (
          'GO'
          ''
        )
      end    
      item
        Caption = 'Exec1'
        Lines.Strings = (
          'EXEC InsertUnitMeasure @UnitMeasureCode = ''ABC'', @Name = ''Test Value'';'
          ''
        )
      end    
      item
        Caption = 'Exec2'
        Lines.Strings = (
          'EXEC InsertUnitMeasure @UnitMeasureCode = ''ABC'', @Name = ''New Test Value'';'
          ''
        )
      end    
      item
        Caption = 'Exec3'
        Lines.Strings = (
          'EXECUTE Production.usp_UpdateInventory ''20030501'''
          ''
        )
      end    
      item
        Caption = 'Deallocate1'
        Lines.Strings = (
          'DEALLOCATE complex_cursor;'
          ''
          ''
          ''
          ''
        )
      end    
      item
        Caption = 'Close1'
        Lines.Strings = (
          'CLOSE complex_cursor;'
        )
      end    
      item
        Caption = 'CreateStatistic1'
        Lines.Strings = (
          'CREATE STATISTICS ContactMail1'
          '    ON Person.Person (BusinessEntityID, EmailPromotion)'
          '    WITH SAMPLE 5 PERCENT;'
          ''
        )
      end    
      item
        Caption = 'CreateStatistic2'
        Lines.Strings = (
          'CREATE STATISTICS ContactMail1'
          '    ON Person.Person (BusinessEntityID, EmailPromotion)'
          '    WITH SAMPLE 5 PERCENT;'
          ''
        )
      end    
      item
        Caption = 'CreateStatistic3'
        Lines.Strings = (
          'CREATE STATISTICS NamePurchase'
          '    ON AdventureWorks2012.Person.Person (BusinessEntityID, EmailPromotion)'
          '    WITH FULLSCAN, NORECOMPUTE;'
          ''
        )
      end    
      item
        Caption = 'CreateStatistic4'
        Lines.Strings = (
          'CREATE STATISTICS ContactPromotion1'
          '    ON Person.Person (BusinessEntityID, LastName, EmailPromotion)'
          'WHERE EmailPromotion = 2'
          'WITH SAMPLE 50 PERCENT;'
          ''
        )
      end    
      item
        Caption = 'CreateStatistic5'
        Lines.Strings = (
          'CREATE STATISTICS CustomerStats1 ON DimCustomer (CustomerKey, EmailAddress);'
          ''
        )
      end    
      item
        Caption = 'CreateStatistic6'
        Lines.Strings = (
          'CREATE STATISTICS CustomerStats1 ON DimCustomer (CustomerKey, EmailAddress) WITH FULLSCAN;'
          ''
        )
      end    
      item
        Caption = 'CreateStatistic7'
        Lines.Strings = (
          'CREATE STATISTICS NamePurchase'
          '    ON AdventureWorks2012.Person.Person (BusinessEntityID, EmailPromotion)'
          '    WITH FULLSCAN, PERSIST_SAMPLE_PERCENT = ON;'
          ''
        )
      end    
      item
        Caption = 'CreateStatistic8'
        Lines.Strings = (
          'CREATE STATISTICS CustomerStats1 ON DimCustomer (CustomerKey, EmailAddress);'
          ''
        )
      end    
      item
        Caption = 'CreateStatistic9'
        Lines.Strings = (
          'CREATE STATISTICS CustomerStatsSampleScan'
          'ON DimCustomer (CustomerKey, EmailAddress) WITH SAMPLE 50 PERCENT;'
          ''
        )
      end    
      item
        Caption = 'CreateStatistic10'
        Lines.Strings = (
          'CREATE STATISTICS CustomerStatsSampleScan'
          'ON DimCustomer (CustomerKey, EmailAddress) WITH SAMPLE 50 PERCENT;'
        )
      end    
      item
        Caption = 'CreateStatistic11'
        Lines.Strings = (
          'CREATE STATISTICS Products'
          '    ON Production.Product ([Name], ProductNumber)'
          '    WITH SAMPLE 50 PERCENT'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateStatistic12'
        Lines.Strings = (
          'CREATE STATISTICS VendorCredit'
          '    ON Purchasing.Vendor (Name, CreditRating)'
          '    WITH SAMPLE 50 PERCENT'
          ''
        )
      end    
      item
        Caption = 'CreateStatistic13'
        Lines.Strings = (
          'CREATE STATISTICS CustomerTotal'
          '    ON Sales.SalesOrderHeader (CustomerID, TotalDue)'
          '    WITH FULLSCAN;'
        )
      end    
      item
        Caption = 'UpdateStatistic1'
        Lines.Strings = (
          'UPDATE STATISTICS Production.Product(Products)'
          '    WITH SAMPLE 50 PERCENT;'
          ''
          ''
        )
      end    
      item
        Caption = 'DropStatistic1'
        Lines.Strings = (
          'DROP STATISTICS Purchasing.Vendor.VendorCredit, Sales.SalesOrderHeader.CustomerTotal;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateAssembly1'
        Lines.Strings = (
          'CREATE ASSEMBLY StringUtilities FROM @SamplesPath + ''StringUtilities\CS\StringUtilities\bin\debug\StringUtilities.dll'''
          'WITH PERMISSION_SET=SAFE;'
          ''
        )
      end    
      item
        Caption = 'CreateAssembly2'
        Lines.Strings = (
          'CREATE ASSEMBLY HelloWorld'
          'FROM ''<system_drive>:\Program Files\Microsoft SQL Server\100\Samples\HelloWorld\CS\HelloWorld\bin\debug\HelloWorld.dll'''
          'WITH PERMISSION_SET = SAFE;'
          ''
        )
      end    
      item
        Caption = 'CreateAssembly3'
        Lines.Strings = (
          'CREATE ASSEMBLY HelloWorld'
          '    FROM 0x4D5A900000000000'
          'WITH PERMISSION_SET = SAFE;'
        )
      end    
      item
        Caption = 'CreateAssembly4'
        Lines.Strings = (
          'CREATE ASSEMBLY Shipping19'
          '    FROM '' c:\Shipping\Certs\Shipping19.dll'''
          '    WITH PERMISSION_SET = SAFE;'
        )
      end    
      item
        Caption = 'CreateAssembly5'
        Lines.Strings = (
          'CREATE ASSEMBLY [SurrogateStringFunction]'
          'FROM @SamplesPath + ''StringManipulate\CS\StringManipulate\bin\debug\SurrogateStringFunction.dll'''
          'WITH PERMISSION_SET = EXTERNAL_ACCESS;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateAssembly6'
        Lines.Strings = (
          'CREATE ASSEMBLY HandlingLOBUsingCLR'
          'FROM ''\\MachineName\HandlingLOBUsingCLR\bin\Debug\HandlingLOBUsingCLR.dll'';'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateAssembly7'
        Lines.Strings = (
          'CREATE ASSEMBLY utf8string'
          'AUTHORIZATION [dbi]'
          'FROM 0x4D... ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterAssembly1'
        Lines.Strings = (
          'ALTER ASSEMBLY ComplexNumber'
          'FROM ''C:\Program Files\Microsoft SQL Server\130\Tools\Samples\1033\Engine\Programmability\CLR\UserDefinedDataType\CS\ComplexNumber\obj\Debug\ComplexNumber.dll'''
        )
      end    
      item
        Caption = 'AlterAssembly2'
        Lines.Strings = (
          'ALTER ASSEMBLY MyClass'
          'ADD FILE FROM ''C:\MyClassProject\Class1.cs'';'
          ''
        )
      end    
      item
        Caption = 'AlterAssembly3'
        Lines.Strings = (
          'ALTER ASSEMBLY ComplexNumber WITH PERMISSION_SET = EXTERNAL_ACCESS;'
        )
      end    
      item
        Caption = 'DropAssembly1'
        Lines.Strings = (
          'DROP ASSEMBLY Helloworld ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AddClassification1'
        Lines.Strings = (
          'ADD SENSITIVITY CLASSIFICATION TO'
          '    dbo.sales.price, dbo.sales.discount'
          '    WITH ( LABEL=''Highly Confidential'', INFORMATION_TYPE=''Financial'', RANK=CRITICAL )'
        )
      end    
      item
        Caption = 'AddClassification2'
        Lines.Strings = (
          'ADD SENSITIVITY CLASSIFICATION TO'
          '    dbo.customer.comments'
          '    WITH ( LABEL=''Confidential'', LABEL_ID=''643f7acd-776a-438d-890c-79c3f2a520d6'' )'
        )
      end    
      item
        Caption = 'DropClassification1'
        Lines.Strings = (
          'DROP SENSITIVITY CLASSIFICATION FROM'
          '    dbo.sales.price'
        )
      end    
      item
        Caption = 'DropClassification2'
        Lines.Strings = (
          'DROP SENSITIVITY CLASSIFICATION FROM'
          '    dbo.sales.price, dbo.sales.discount, SalesLT.Customer.Phone'
        )
      end    
      item
        Caption = 'CreateAsymmetricKey1'
        Lines.Strings = (
          'CREATE ASYMMETRIC KEY PacificSales09'
          '    WITH ALGORITHM = RSA_2048'
          '    ENCRYPTION BY PASSWORD = ''<enterStrongPasswordHere>'';'
        )
      end    
      item
        Caption = 'CreateAsymmetricKey2'
        Lines.Strings = (
          'CREATE ASYMMETRIC KEY PacificSales19'
          '    AUTHORIZATION Christina'
          '    FROM FILE = ''c:\PacSales\Managers\ChristinaCerts.tmp'';'
          ''
        )
      end    
      item
        Caption = 'CreateAsymmetricKey3'
        Lines.Strings = (
          'CREATE ASYMMETRIC KEY EKM_askey1'
          '    FROM PROVIDER EKM_Provider1'
          '    WITH'
          '        ALGORITHM = RSA_2048,'
          '        CREATION_DISPOSITION = CREATE_NEW'
          '        , PROVIDER_KEY_NAME  = ''key10_user1'' ;'
          ''
        )
      end    
      item
        Caption = 'AlterAsymmetricKey1'
        Lines.Strings = (
          'ALTER ASYMMETRIC KEY PacificSales09'
          '    WITH PRIVATE KEY ('
          '    DECRYPTION BY PASSWORD = ''<oldPassword>'','
          '    ENCRYPTION BY PASSWORD = ''<enterStrongPasswordHere>'');'
          ''
        )
      end    
      item
        Caption = 'AlterAsymmetricKey2'
        Lines.Strings = (
          'ALTER ASYMMETRIC KEY PacificSales19 REMOVE PRIVATE KEY;'
          'GO'
          'OPEN MASTER KEY DECRYPTION BY PASSWORD = ''<database master key password>'';'
          'ALTER ASYMMETRIC KEY PacificSales09 WITH PRIVATE KEY ('
          '    DECRYPTION BY PASSWORD = ''<enterStrongPasswordHere>'' );'
          ''
        )
      end    
      item
        Caption = 'DropAsymmetricKey1'
        Lines.Strings = (
          'DROP ASYMMETRIC KEY MirandaXAsymKey6;'
        )
      end    
      item
        Caption = 'CreateCertificate1'
        Lines.Strings = (
          'CREATE CERTIFICATE Shipping04'
          '   ENCRYPTION BY PASSWORD = ''pGFD4bb925DGvbd2439587y'''
          '   WITH SUBJECT = ''Sammamish Shipping Records'','
          '   EXPIRY_DATE = ''20201031'';'
          ''
        )
      end    
      item
        Caption = 'CreateCertificate2'
        Lines.Strings = (
          'CREATE CERTIFICATE Shipping11'
          '    FROM FILE = ''c:\Shipping\Certs\Shipping11.cer'''
          '    WITH PRIVATE KEY (FILE = ''c:\Shipping\Certs\Shipping11.pvk'','
          '    DECRYPTION BY PASSWORD = ''sldkflk34et6gs%53#v00'');'
          ''
        )
      end    
      item
        Caption = 'CreateCertificate3'
        Lines.Strings = (
          'CREATE CERTIFICATE Shipping19'
          '    FROM EXECUTABLE FILE = ''c:\Shipping\Certs\Shipping19.dll'';'
          ''
        )
      end    
      item
        Caption = 'CreateCertificate4'
        Lines.Strings = (
          'CREATE CERTIFICATE Shipping19 FROM ASSEMBLY Shipping19;'
          ''
        )
      end    
      item
        Caption = 'CreateCertificate5'
        Lines.Strings = (
          'CREATE CERTIFICATE Shipping04'
          '   WITH SUBJECT = ''Sammamish Shipping Records'';'
          ''
        )
      end    
      item
        Caption = 'CreateCertificate6'
        Lines.Strings = (
          'CREATE CERTIFICATE <certificateName>'
          '    WITH SUBJECT = ''<login_name> certificate in master database'','
          '    EXPIRY_DATE = ''12/05/2025'';'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateCertificate7'
        Lines.Strings = (
          'CREATE CERTIFICATE CarnationProduction50'
          '    WITH SUBJECT = ''Carnation Production Facility Supervisors'','
          '    EXPIRY_DATE = ''11/11/2011'';'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateCertificate8'
        Lines.Strings = (
          'CREATE CERTIFICATE cert_signature_demo'
          '    ENCRYPTION BY PASSWORD = ''pGFD4bb925DGvbd2439587y'''
          '    WITH SUBJECT = ''ADD SIGNATURE demo'';'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateCertificate9'
        Lines.Strings = (
          'CREATE CERTIFICATE csSelectT'
          '  ENCRYPTION BY PASSWORD = ''SimplePwd01'''
          '  WITH SUBJECT = ''Certificate used to grant SELECT on T1'';'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterCertificate1'
        Lines.Strings = (
          'ALTER CERTIFICATE Shipping04'
          '    REMOVE PRIVATE KEY;'
          ''
        )
      end    
      item
        Caption = 'AlterCertificate2'
        Lines.Strings = (
          'ALTER CERTIFICATE Shipping11'
          '    WITH PRIVATE KEY (DECRYPTION BY PASSWORD = ''95hkjdskghFDGGG4%'','
          '    ENCRYPTION BY PASSWORD = ''34958tosdgfkh##38'');'
          ''
        )
      end    
      item
        Caption = 'AlterCertificate3'
        Lines.Strings = (
          'ALTER CERTIFICATE Shipping13'
          '    WITH PRIVATE KEY (FILE = ''c:\importedkeys\Shipping13'','
          '    DECRYPTION BY PASSWORD = ''GDFLKl8^^GGG4000%'');'
          ''
        )
      end    
      item
        Caption = 'AlterCertificate4'
        Lines.Strings = (
          'ALTER CERTIFICATE Shipping15'
          '    WITH PRIVATE KEY (DECRYPTION BY PASSWORD = ''95hk000eEnvjkjy#F%'');'
          ''
        )
      end    
      item
        Caption = 'DropCertificate1'
        Lines.Strings = (
          'DROP CERTIFICATE Shipping04;'
          ''
          ''
        )
      end    
      item
        Caption = 'DropCertificate2'
        Lines.Strings = (
          'DROP CERTIFICATE Shipping04;'
        )
      end    
      item
        Caption = 'CreateAvailabilityGroup1'
        Lines.Strings = (
          'CREATE AVAILABILITY GROUP MyAg'
          '   WITH ('
          '      AUTOMATED_BACKUP_PREFERENCE = SECONDARY,'
          '      FAILURE_CONDITION_LEVEL  =  3,'
          '      HEALTH_CHECK_TIMEOUT = 600000'
          '       )'
          ''
          '   FOR'
          '      DATABASE  ThisDatabase, ThatDatabase'
          '   REPLICA ON'
          '      ''COMPUTER01'' WITH'
          '         ('
          '         ENDPOINT_URL = ''TCP://COMPUTER01:5022'','
          '         AVAILABILITY_MODE = SYNCHRONOUS_COMMIT,'
          '         FAILOVER_MODE = AUTOMATIC,'
          '         BACKUP_PRIORITY = 30,'
          '         SECONDARY_ROLE (ALLOW_CONNECTIONS = NO,'
          '            READ_ONLY_ROUTING_URL = ''TCP://COMPUTER01:1433'' ),'
          '         PRIMARY_ROLE (ALLOW_CONNECTIONS = READ_WRITE,'
          '            READ_ONLY_ROUTING_LIST = (COMPUTER03) ),'
          '         SESSION_TIMEOUT = 10'
          '         ),'
          ''
          '      ''COMPUTER02'' WITH'
          '         ('
          '         ENDPOINT_URL = ''TCP://COMPUTER02:5022'','
          '         AVAILABILITY_MODE = SYNCHRONOUS_COMMIT,'
          '         FAILOVER_MODE = AUTOMATIC,'
          '         BACKUP_PRIORITY = 30,'
          '         SECONDARY_ROLE (ALLOW_CONNECTIONS = NO,'
          '            READ_ONLY_ROUTING_URL = ''TCP://COMPUTER02:1433'' ),'
          '         PRIMARY_ROLE (ALLOW_CONNECTIONS = READ_WRITE,'
          '            READ_ONLY_ROUTING_LIST = (COMPUTER03) ),'
          '         SESSION_TIMEOUT = 10'
          '         ),'
          ''
          '      ''COMPUTER03'' WITH'
          '         ('
          '         ENDPOINT_URL = ''TCP://COMPUTER03:5022'','
          '         AVAILABILITY_MODE = ASYNCHRONOUS_COMMIT,'
          '         FAILOVER_MODE =  MANUAL,'
          '         BACKUP_PRIORITY = 90,'
          '         SECONDARY_ROLE (ALLOW_CONNECTIONS = READ_ONLY,'
          '            READ_ONLY_ROUTING_URL = ''TCP://COMPUTER03:1433'' ),'
          '         PRIMARY_ROLE (ALLOW_CONNECTIONS = READ_WRITE,'
          '            READ_ONLY_ROUTING_LIST = NONE ),'
          '         SESSION_TIMEOUT = 10'
          '         );'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterAvailabilityGroup1'
        Lines.Strings = (
          'ALTER AVAILABILITY GROUP AccountsAG JOIN;'
          ''
        )
      end    
      item
        Caption = 'AlterAvailabilityGroup2'
        Lines.Strings = (
          'ALTER AVAILABILITY GROUP AccountsAG FORCE_FAILOVER_ALLOW_DATA_LOSS;'
          ''
        )
      end    
      item
        Caption = 'AlterAvailabilityGroup3'
        Lines.Strings = (
          'ALTER AVAILABILITY GROUP [MyAg]'
          '  ADD LISTENER ''MyAgListenerIvP6'' ( WITH IP ( (''2001:db88:f0:f00f::cf3c''),(''2001:4898:e0:f213::4ce2'') ) , PORT = 60173 );'
          ''
        )
      end    
      item
        Caption = 'CreateBrokerPriority1'
        Lines.Strings = (
          'CREATE BROKER PRIORITY InitiatorAToTargetPriority'
          '    FOR CONVERSATION'
          '    SET (CONTRACT_NAME = SimpleContract,'
          '         LOCAL_SERVICE_NAME = InitiatorServiceA,'
          '         REMOTE_SERVICE_NAME = N''TargetService'','
          '         PRIORITY_LEVEL = 3);'
          ''
        )
      end    
      item
        Caption = 'CreateBrokerPriority2'
        Lines.Strings = (
          'CREATE BROKER PRIORITY TargetToInitiatorAPriority'
          '    FOR CONVERSATION'
          '    SET (CONTRACT_NAME = SimpleContract,'
          '         LOCAL_SERVICE_NAME = TargetService,'
          '         REMOTE_SERVICE_NAME = N''InitiatorServiceA'','
          '         PRIORITY_LEVEL = 3);'
          ''
        )
      end    
      item
        Caption = 'CreateBrokerPriority3'
        Lines.Strings = (
          'CREATE BROKER PRIORITY SimpleContractDefaultPriority'
          '    FOR CONVERSATION'
          '    SET (CONTRACT_NAME = SimpleContract,'
          '         LOCAL_SERVICE_NAME = ANY,'
          '         REMOTE_SERVICE_NAME = ANY,'
          '         PRIORITY_LEVEL = 7);'
          ''
        )
      end    
      item
        Caption = 'CreateBrokerPriority4'
        Lines.Strings = (
          'CREATE BROKER PRIORITY [//Adventure-Works.com/Expenses/ClaimPriority]'
          '    FOR CONVERSATION'
          '    SET (CONTRACT_NAME = ANY,'
          '         LOCAL_SERVICE_NAME = //Adventure-Works.com/Expenses/ClaimService,'
          '         REMOTE_SERVICE_NAME = ANY,'
          '         PRIORITY_LEVEL = 9);'
          ''
        )
      end    
      item
        Caption = 'CreateBrokerPriority5'
        Lines.Strings = (
          'CREATE BROKER PRIORITY [//Adventure-Works.com/Expenses/ApprovalPriority]'
          '    FOR CONVERSATION'
          '    SET (CONTRACT_NAME = ANY,'
          '         LOCAL_SERVICE_NAME = //Adventure-Works.com/Expenses/ClaimService,'
          '         REMOTE_SERVICE_NAME = ANY,'
          '         PRIORITY_LEVEL = 6);'
          ''
        )
      end    
      item
        Caption = 'CreateBrokerPriority6'
        Lines.Strings = (
          'CREATE BROKER PRIORITY [//Adventure-Works.com/Expenses/BasePriority]'
          '    FOR CONVERSATION'
          '    SET (CONTRACT_NAME = ANY,'
          '         LOCAL_SERVICE_NAME = ANY,'
          '         REMOTE_SERVICE_NAME = ANY,'
          '         PRIORITY_LEVEL = 3);'
          ''
        )
      end    
      item
        Caption = 'CreateBrokerPriority7'
        Lines.Strings = (
          'CREATE BROKER PRIORITY GoldInitToTargetPriority'
          '    FOR CONVERSATION'
          '    SET (CONTRACT_NAME = SimpleContract,'
          '         LOCAL_SERVICE_NAME = GoldInitiatorService,'
          '         REMOTE_SERVICE_NAME = N''TargetService'','
          '         PRIORITY_LEVEL = 6);'
          ''
        )
      end    
      item
        Caption = 'CreateBrokerPriority8'
        Lines.Strings = (
          'CREATE BROKER PRIORITY GoldTargetToInitPriority'
          '    FOR CONVERSATION'
          '    SET (CONTRACT_NAME = SimpleContract,'
          '         LOCAL_SERVICE_NAME = TargetService,'
          '         REMOTE_SERVICE_NAME = N''GoldInitiatorService'','
          '         PRIORITY_LEVEL = 6);'
          ''
        )
      end    
      item
        Caption = 'CreateBrokerPriority9'
        Lines.Strings = (
          'CREATE BROKER PRIORITY SilverInitToTargetPriority'
          '    FOR CONVERSATION'
          '    SET (CONTRACT_NAME = SimpleContract,'
          '         LOCAL_SERVICE_NAME = SilverInitiatorService,'
          '         REMOTE_SERVICE_NAME = N''TargetService'','
          '         PRIORITY_LEVEL = 4);'
          ''
        )
      end    
      item
        Caption = 'CreateBrokerPriority10'
        Lines.Strings = (
          'CREATE BROKER PRIORITY SilverTargetToInitPriority'
          '    FOR CONVERSATION'
          '    SET (CONTRACT_NAME = SimpleContract,'
          '         LOCAL_SERVICE_NAME = TargetService,'
          '         REMOTE_SERVICE_NAME = N''SilverInitiatorService'','
          '         PRIORITY_LEVEL = 4);'
          ''
        )
      end    
      item
        Caption = 'CreateBrokerPriority11'
        Lines.Strings = (
          'CREATE BROKER PRIORITY BronzeInitToTargetPriority'
          '    FOR CONVERSATION'
          '    SET (CONTRACT_NAME = SimpleContract,'
          '         LOCAL_SERVICE_NAME = BronzeInitiatorService,'
          '         REMOTE_SERVICE_NAME = N''TargetService'','
          '         PRIORITY_LEVEL = 2);'
          ''
        )
      end    
      item
        Caption = 'CreateBrokerPriority12'
        Lines.Strings = (
          'CREATE BROKER PRIORITY BronzeTargetToInitPriority'
          '    FOR CONVERSATION'
          '    SET (CONTRACT_NAME = SimpleContract,'
          '         LOCAL_SERVICE_NAME = TargetService,'
          '         REMOTE_SERVICE_NAME = N''BronzeInitiatorService'','
          '         PRIORITY_LEVEL = 2);'
          ''
        )
      end    
      item
        Caption = 'CreateBrokerPriority13'
        Lines.Strings = (
          'CREATE BROKER PRIORITY GoldPriority'
          '    FOR CONVERSATION'
          '    SET (CONTRACT_NAME = GoldContract,'
          '         LOCAL_SERVICE_NAME = ANY,'
          '         REMOTE_SERVICE_NAME = ANY,'
          '         PRIORITY_LEVEL = 6);'
          ''
        )
      end    
      item
        Caption = 'CreateBrokerPriority14'
        Lines.Strings = (
          'CREATE BROKER PRIORITY SilverPriority'
          '    FOR CONVERSATION'
          '    SET (CONTRACT_NAME = SilverContract,'
          '         LOCAL_SERVICE_NAME = ANY,'
          '         REMOTE_SERVICE_NAME = ANY,'
          '         PRIORITY_LEVEL = 4);'
          ''
        )
      end    
      item
        Caption = 'CreateBrokerPriority15'
        Lines.Strings = (
          'CREATE BROKER PRIORITY BronzePriority'
          '    FOR CONVERSATION'
          '    SET (CONTRACT_NAME = BronzeContract,'
          '         LOCAL_SERVICE_NAME = ANY,'
          '         REMOTE_SERVICE_NAME = ANY,'
          '         PRIORITY_LEVEL = 2);'
          ''
        )
      end    
      item
        Caption = 'AlterBrokerPriority1'
        Lines.Strings = (
          'ALTER BROKER PRIORITY SimpleContractDefaultPriority'
          '    FOR CONVERSATION'
          '    SET (PRIORITY_LEVEL = 3);'
          ''
        )
      end    
      item
        Caption = 'AlterBrokerPriority2'
        Lines.Strings = (
          'ALTER BROKER PRIORITY SimpleContractPriority'
          '    FOR CONVERSATION'
          '    SET (CONTRACT_NAME = SimpleContractB,'
          '         LOCAL_SERVICE_NAME = TargetServiceB,'
          '         REMOTE_SERVICE_NAME = N''InitiatorServiceB'','
          '         PRIORITY_LEVEL = 8);'
          ''
        )
      end    
      item
        Caption = 'DropBrokerPriority1'
        Lines.Strings = (
          'DROP BROKER PRIORITY InitiatorAToTargetPriority;'
        )
      end    
      item
        Caption = 'Set1'
        Lines.Strings = (
          'SET IDENTITY_INSERT T1 ON;'
          ''
        )
      end    
      item
        Caption = 'Set2'
        Lines.Strings = (
          'SET NOCOUNT ON;'
          ''
        )
      end    
      item
        Caption = 'Set3'
        Lines.Strings = (
          'SET ANSI_NULLS ON;'
          ''
        )
      end    
      item
        Caption = 'Set4'
        Lines.Strings = (
          'SET QUOTED_IDENTIFIER ON;'
          ''
        )
      end    
      item
        Caption = 'Set5'
        Lines.Strings = (
          'SET @data_path = (SELECT SUBSTRING(physical_name, 1, CHARINDEX(N''master.mdf'', LOWER(physical_name)) - 1)'
          '      FROM master.sys.master_files'
          '      WHERE database_id = 1 AND file_id = 1);'
          ''
        )
      end    
      item
        Caption = 'Set6'
        Lines.Strings = (
          'SET DATEFIRST 1;'
          ''
        )
      end    
      item
        Caption = 'Set7'
        Lines.Strings = (
          'SET NUMERIC_ROUNDABORT OFF;'
          ''
        )
      end    
      item
        Caption = 'Set8'
        Lines.Strings = (
          'SET ANSI_PADDING, ANSI_WARNINGS, CONCAT_NULL_YIELDS_NULL, ARITHABORT,'
          '  QUOTED_IDENTIFIER, ANSI_NULLS ON;'
          ''
        )
      end    
      item
        Caption = 'Set9'
        Lines.Strings = (
          'SET @IntegerPartitionFunction += CAST(@i as nvarchar(10)) + N'', '';'
          ''
        )
      end    
      item
        Caption = 'Set10'
        Lines.Strings = (
          'SET @i += 1;'
          ''
        )
      end    
      item
        Caption = 'Set11'
        Lines.Strings = (
          'SET @IntegerPartitionFunction += CAST(@i as nvarchar(10)) + N'');'';'
          ''
        )
      end    
      item
        Caption = 'Set12'
        Lines.Strings = (
          'SET @DatePartitionFunction += '''''''' + CAST(@i as nvarchar(10)) + '''''''' + N'', '';'
          ''
        )
      end    
      item
        Caption = 'Set13'
        Lines.Strings = (
          'SET @DatePartitionFunction += '''''''' + CAST(@i as nvarchar(10))+ '''''''' + N'');'';'
          ''
        )
      end    
      item
        Caption = 'Set14'
        Lines.Strings = (
          'SET IDENTITY_INSERT tablename ON;'
          ''
        )
      end    
      item
        Caption = 'Set15'
        Lines.Strings = (
          'SET IDENTITY_INSERT tablename OFF;'
          ''
        )
      end    
      item
        Caption = 'Set16'
        Lines.Strings = (
          'SET IDENTITY_INSERT img ON;'
          ''
        )
      end    
      item
        Caption = 'Set17'
        Lines.Strings = (
          'SET IDENTITY_INSERT img OFF;'
          ''
        )
      end    
      item
        Caption = 'Set18'
        Lines.Strings = (
          'SET ENABLED = OFF;'
          ''
        )
      end    
      item
        Caption = 'Set19'
        Lines.Strings = (
          'SET @cookie = <value from the SELECT @cookie statement>;'
          ''
        )
      end    
      item
        Caption = 'Set20'
        Lines.Strings = (
          'SET @cookie = <value from the SELECT @cookie statement>;'
        )
      end    
      item
        Caption = 'CreateColumnEncryptionKey1'
        Lines.Strings = (
          'CREATE COLUMN ENCRYPTION KEY MyCEK'
          'WITH VALUES'
          '('
          '    COLUMN_MASTER_KEY = MyCMK,'
          '    ALGORITHM = ''RSA_OAEP'','
          '    ENCRYPTED_VALUE = 0x01700000016C006F00630061006C006D0061006300680069006E0065002F006D0079002F003200660061006600640038003100320031003400340034006500620031006100320065003000360039003300340038006100350064003400300032003300380065006600620063006300610031006300284FC4316518CF3328A6D9304F65DD2CE387B79D95D077B4156E9ED8683FC0E09FA848275C685373228762B02DF2522AFF6D661782607B4A2275F2F922A5324B392C9D498E4ECFC61B79F0553EE8FB2E5A8635C4DBC0224D5A7F1B136C182DCDE32A00451F1A7AC6B4492067FD0FAC7D3D6F4AB7FC0E86614455DBB2AB37013E0A5B8B5089B180CA36D8B06CDB15E95A7D06E25AACB645D42C85B0B7EA2962BD3080B9A7CDB805C6279FE7DD6941E7EA4C2139E0D4101D8D7891076E70D433A214E82D9030CF1F40C503103075DEEB3D64537D15D244F503C2750CF940B71967F51095BFA51A85D2F764C78704CAB6F015EA87753355367C5C9F66E465C0C66BADEDFDF76FB7E5C21A0D89A2FCCA8595471F8918B1387E055FA0B816E74201CD5C50129D29C015895CD073925B6EA87CAF4A4FAF018C06A3856F5DFB724F42807543F777D82B809232B465D983E6F19DFB572BEA7B61C50154605452A891190FB5A0C4E464862CF5EFAD5E7D91F7D65AA1A78F688E69A1EB098AB42E95C674E234173CD7E0925541AD5AE7CED9A3D12FDFE6EB8EA4F8AAD2629D4F5A18BA3DDCC9CF7F352A892D4BEBDC4A1303F9C683DACD51A237E34B045EBE579A381E26B40DCFBF49EFFA6F65D17F37C6DBA54AA99A65D5573D4EB5BA038E024910A4D36B79A1D4E3C70349DADFF08FD8B4DEE77FDB57F01CB276ED5E676F1EC973154F86'
          ');'
          ''
        )
      end    
      item
        Caption = 'CreateColumnEncryptionKey2'
        Lines.Strings = (
          'CREATE COLUMN ENCRYPTION KEY TwoValueCEK'
          'WITH VALUES'
          '('
          '    COLUMN_MASTER_KEY = CMK1,'
          '    ALGORITHM = ''RSA_OAEP'','
          '    ENCRYPTED_VALUE = 0x016E000001630075007200720065006E00740075007300650072002F006D0079002F0037006300380061003100310033003400320037003800620037003000630038003100390062003900630039003400360061006600340039006500610030003200650038006200650038003400340065006C33A82ECF04A7185824B4545457AC5244CD9C219E64067B9520C0081B8399B58C2863F7494ABE3694BD87D55FFD7576FFDC47C28F94ECC99577DF4FB8FA19AA95764FEF889CDE0F176DA5897B74382FBB22756CE2921050A09201A0EB6AF3D6091014C30146EA62635EE8CBF0A8074DEDFF125CEA80D1C0F5E8C58750A07D270E2A8BF824EE4C0C156366BF26D38CCE49EBDD5639A2DF029A7DBAE5A5D111F2F2FA3246DF8C2FA83C1E542C10570FADA98F6B29478DC58CE5CBDD407CCEFCDB97814525F6F32BECA266014AC346AC39C4F185C6C0F0A24FEC4DFA015649624692DE7865B9827BA22C3B574C9FD169F822B609F902288C5880EB25F14BD990D871B1BC4BA3A5B237AF76D26354773FA2A25CF4511AF58C911E601CFCB1905128C997844EED056C2AE7F0B48700AB41307E470FF9520997D0EB0D887DE11AFE574FFE845B7DC6C03FEEE8D467236368FC0CB2FDBD54DADC65B10B3DE6C80DF8B7B3F8F3CE5BE914713EE7B1FA5B7A578359592B8A5FDFDDE5FF9F392BC87C3CD02FBA94582AC063BBB9FFAC803FD489E16BEB28C4E3374A8478C737236A0B232F5A9DDE4D119573F1AEAE94B2192B81575AD6F57E670C1B2AB91045124DFDAEC2898F3F0112026DFC93BF9391D667D1AD7ED7D4E6BB119BBCEF1D1ADA589DD3E1082C3DAD13223BE438EB9574DA04E9D8A06320CAC6D3EC21D5D1C2A0AA484C7C'
          '),'
          '('
          '    COLUMN_MASTER_KEY = CMK2,'
          '    ALGORITHM = ''RSA_OAEP'','
          '    ENCRYPTED_VALUE = 0x016E000001630075007200720065006E00740075007300650072002F006D0079002F0064006500650063006200660034006100340031003000380034006200350033003200360066003200630062006200350030003600380065003900620061003000320030003600610037003800310066001DDA6134C3B73A90D349C8905782DD819B428162CF5B051639BA46EC69A7C8C8F81591A92C395711493B25DCBCCC57836E5B9F17A0713E840721D098F3F8E023ABCDFE2F6D8CC4339FC8F88630ED9EBADA5CA8EEAFA84164C1095B12AE161EABC1DF778C07F07D413AF1ED900F578FC00894BEE705EAC60F4A5090BBE09885D2EFE1C915F7B4C581D9CE3FDAB78ACF4829F85752E9FC985DEB8773889EE4A1945BD554724803A6F5DC0A2CD5EFE001ABED8D61E8449E4FAA9E4DD392DA8D292ECC6EB149E843E395CDE0F98D04940A28C4B05F747149B34A0BAEC04FFF3E304C84AF1FF81225E615B5F94E334378A0A888EF88F4E79F66CB377E3C21964AACB5049C08435FE84EEEF39D20A665C17E04898914A85B3DE23D56575EBC682D154F4F15C37723E04974DB370180A9A579BC84F6BC9B5E7C223E5CBEE721E57EE07EFDCC0A3257BBEBF9ADFFB00DBF7EF682EC1C4C47451438F90B4CF8DA709940F72CFDC91C6EB4E37B4ED7E2385B1FF71B28A1D2669FBEB18EA89F9D391D2FDDEA0ED362E6A591AC64EF4AE31CA8766C259ECB77D01A7F5C36B8418F91C1BEADDD4491C80F0016B66421B4B788C55127135DA2FA625FB7FD195FB40D90A6C67328602ECAF3EC4F5894BFD84A99EB4753BE0D22E0D4DE6A0ADFEDC80EB1B556749B4A8AD00E73B329C95827AB91C0256347E85E3C5FD6726D0E1FE82C925D3DF4A9'
          ');'
          ''
        )
      end    
      item
        Caption = 'AlterColumnEncryptionKey1'
        Lines.Strings = (
          'ALTER COLUMN ENCRYPTION KEY MyCEK'
          'ADD VALUE'
          '('
          '    COLUMN_MASTER_KEY = MyCMK2,'
          '    ALGORITHM = ''RSA_OAEP'','
          '    ENCRYPTED_VALUE = 0x016E000001630075007200720065006E00740075007300650072002F006D0079002F0064006500650063006200660034006100340031003000380034006200350033003200360066003200630062006200350030003600380065003900620061003000320030003600610037003800310066001DDA6134C3B73A90D349C8905782DD819B428162CF5B051639BA46EC69A7C8C8F81591A92C395711493B25DCBCCC57836E5B9F17A0713E840721D098F3F8E023ABCDFE2F6D8CC4339FC8F88630ED9EBADA5CA8EEAFA84164C1095B12AE161EABC1DF778C07F07D413AF1ED900F578FC00894BEE705EAC60F4A5090BBE09885D2EFE1C915F7B4C581D9CE3FDAB78ACF4829F85752E9FC985DEB8773889EE4A1945BD554724803A6F5DC0A2CD5EFE001ABED8D61E8449E4FAA9E4DD392DA8D292ECC6EB149E843E395CDE0F98D04940A28C4B05F747149B34A0BAEC04FFF3E304C84AF1FF81225E615B5F94E334378A0A888EF88F4E79F66CB377E3C21964AACB5049C08435FE84EEEF39D20A665C17E04898914A85B3DE23D56575EBC682D154F4F15C37723E04974DB370180A9A579BC84F6BC9B5E7C223E5CBEE721E57EE07EFDCC0A3257BBEBF9ADFFB00DBF7EF682EC1C4C47451438F90B4CF8DA709940F72CFDC91C6EB4E37B4ED7E2385B1FF71B28A1D2669FBEB18EA89F9D391D2FDDEA0ED362E6A591AC64EF4AE31CA8766C259ECB77D01A7F5C36B8418F91C1BEADDD4491C80F0016B66421B4B788C55127135DA2FA625FB7FD195FB40D90A6C67328602ECAF3EC4F5894BFD84A99EB4753BE0D22E0D4DE6A0ADFEDC80EB1B556749B4A8AD00E73B329C95827AB91C0256347E85E3C5FD6726D0E1FE82C925D3DF4A9'
          ');'
          ''
        )
      end    
      item
        Caption = 'AlterColumnEncryptionKey2'
        Lines.Strings = (
          'ALTER COLUMN ENCRYPTION KEY MyCEK'
          'DROP VALUE'
          '('
          '    COLUMN_MASTER_KEY = MyCMK'
          ');'
          ''
        )
      end    
      item
        Caption = 'DropColumnEncryptionKey1'
        Lines.Strings = (
          'DROP COLUMN ENCRYPTION KEY MyCEK;'
          ''
        )
      end    
      item
        Caption = 'CreateCredential1'
        Lines.Strings = (
          'CREATE CREDENTIAL CredentialForEKM'
          '    WITH IDENTITY=''User1OnEKM'', SECRET=''<EnterStrongPasswordHere>'''
          '    FOR CRYPTOGRAPHIC PROVIDER MyEKMProvider;'
          ''
        )
      end    
      item
        Caption = 'CreateCredential2'
        Lines.Strings = (
          'CREATE CREDENTIAL Azure_EKM_TDE_cred'
          '    WITH IDENTITY = ''ContosoKeyVault'','
          '    SECRET = ''EF5C8E094D2A4A769998D93440D8115DSECRET_DBEngine'''
          '    FOR CRYPTOGRAPHIC PROVIDER AzureKeyVault_EKM_Prov ;'
          ''
        )
      end    
      item
        Caption = 'CreateCredential3'
        Lines.Strings = (
          'CREATE CREDENTIAL [https://<mystorageaccountname>.blob.core.windows.net/<mystorageaccountcontainername>] -- this name must match the container path, start with https and must not contain a trailing forward slash.'
          '    WITH IDENTITY=''SHARED ACCESS SIGNATURE'' -- this is a mandatory string and do not change it.'
          '    , SECRET = ''sharedaccesssignature'' -- this is the shared access signature token'
          ''
        )
      end    
      item
        Caption = 'CreateCredential4'
        Lines.Strings = (
          'CREATE CREDENTIAL ServiceIdentity WITH IDENTITY = ''Managed Identity'';'
          ''
        )
      end    
      item
        Caption = 'CreateCredential5'
        Lines.Strings = (
          'CREATE CREDENTIAL ServiceIdentity WITH IDENTITY = ''Managed Identity'';'
          ''
        )
      end    
      item
        Caption = 'CreateCredential6'
        Lines.Strings = (
          'ALTER CREDENTIAL Saddles WITH IDENTITY = ''RettigB'','
          '    SECRET = ''sdrlk8$40-dksli87nNN8'';'
          ''
        )
      end    
      item
        Caption = 'AlterCredential1'
        Lines.Strings = (
          'ALTER CREDENTIAL Frames WITH IDENTITY = ''Aboulrus8'';'
          ''
        )
      end    
      item
        Caption = 'DropCredential1'
        Lines.Strings = (
          'DROP CREDENTIAL Saddles;'
          ''
        )
      end    
      item
        Caption = 'CreateCryptographicProvider1'
        Lines.Strings = (
          'CREATE CRYPTOGRAPHIC PROVIDER SecurityProvider'
          '    FROM FILE = ''C:\SecurityProvider\SecurityProvider_v1.dll'';'
        )
      end    
      item
        Caption = 'AlterCryptographicProvider1'
        Lines.Strings = (
          'ALTER CRYPTOGRAPHIC PROVIDER SecurityProvider'
          'DISABLE;'
          ''
        )
      end    
      item
        Caption = 'AlterCryptographicProvider2'
        Lines.Strings = (
          'ALTER CRYPTOGRAPHIC PROVIDER SecurityProvider'
          'FROM FILE = ''c:\SecurityProvider\SecurityProvider_v2.dll'';'
          ''
        )
      end    
      item
        Caption = 'AlterCryptographicProvider3'
        Lines.Strings = (
          'ALTER CRYPTOGRAPHIC PROVIDER SecurityProvider'
          'ENABLE;'
          ''
        )
      end    
      item
        Caption = 'AlterCryptographicProvider4'
        Lines.Strings = (
          'ALTER CRYPTOGRAPHIC PROVIDER SecurityProvider'
          ''
        )
      end    
      item
        Caption = 'DropCryptographicProvider1'
        Lines.Strings = (
          'DROP CRYPTOGRAPHIC PROVIDER SecurityProvider;'
          ''
        )
      end    
      item
        Caption = 'AlterEventSession1'
        Lines.Strings = (
          'ALTER EVENT SESSION test_session ON SERVER'
          'STATE = start;'
          ''
        )
      end    
      item
        Caption = 'AlterEventSession2'
        Lines.Strings = (
          'ALTER EVENT SESSION test_session ON SERVER'
          'ADD EVENT sqlserver.database_transaction_begin,'
          'ADD EVENT sqlserver.database_transaction_end;'
          ''
        )
      end    
      item
        Caption = 'DropEventSession1'
        Lines.Strings = (
          'DROP EVENT SESSION evt_spin_lock_diagnosis ON SERVER;'
          ''
        )
      end    
      item
        Caption = 'CreateExternalLanguage1'
        Lines.Strings = (
          'CREATE EXTERNAL LANGUAGE Java'
          'FROM (CONTENT = N''<path-to-zip>'', FILE_NAME = ''javaextension.dll'');'
          ''
        )
      end    
      item
        Caption = 'CreateExternalLanguage2'
        Lines.Strings = (
          'CREATE EXTERNAL LANGUAGE Java'
          'FROM'
          '(CONTENT = N''<path-to-zip>'', FILE_NAME = ''javaextension.dll'', PLATFORM = WINDOWS),'
          '(CONTENT = N''<path-to-tar.gz>'', FILE_NAME = ''javaextension.so'', PLATFORM = LINUX);'
          ''
        )
      end    
      item
        Caption = 'CreateExternalLanguage3'
        Lines.Strings = (
          'CREATE EXTERNAL LANGUAGE Java'
          'FROM (CONTENT = N''<path-to-zip>'', FILE_NAME = ''javaextension.dll'');'
          ''
        )
      end    
      item
        Caption = 'AlterExternalLanguage1'
        Lines.Strings = (
          'ALTER EXTERNAL LANGUAGE Java'
          'SET (CONTENT = N''<path-to-zip>'', FILE_NAME = ''javaextension.dll'');'
          ''
        )
      end    
      item
        Caption = 'DropExternalLanguage1'
        Lines.Strings = (
          'DROP EXTERNAL LANGUAGE Java;'
          ''
        )
      end    
      item
        Caption = 'CreateExternalLibrary1'
        Lines.Strings = (
          'CREATE EXTERNAL LIBRARY customPackage'
          'FROM (CONTENT = ''C:\temp\customPackage_v1.1.zip'')'
          'WITH (LANGUAGE = ''R'');'
          ''
        )
      end    
      item
        Caption = 'CreateExternalLibrary2'
        Lines.Strings = (
          'CREATE EXTERNAL LIBRARY customPackage'
          'FROM (CONTENT = ''C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\customPackage.zip'') WITH (LANGUAGE = ''R'');'
          ''
        )
      end    
      item
        Caption = 'CreateExternalLibrary3'
        Lines.Strings = (
          'CREATE EXTERNAL LIBRARY packageA'
          'FROM (CONTENT = ''C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\packageA.zip'')'
          'WITH (LANGUAGE = ''R'');'
          ''
        )
      end    
      item
        Caption = 'CreateExternalLibrary4'
        Lines.Strings = (
          'CREATE EXTERNAL LIBRARY packageB FROM (CONTENT = ''C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\packageB.zip'')'
          'WITH (LANGUAGE = ''R'');'
          ''
        )
      end    
      item
        Caption = 'CreateExternalLibrary5'
        Lines.Strings = (
          'CREATE EXTERNAL LIBRARY packageC FROM (CONTENT = ''C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\packageC.zip'')'
          'WITH (LANGUAGE = ''R'');'
          ''
        )
      end    
      item
        Caption = 'CreateExternalLibrary6'
        Lines.Strings = (
          'CREATE EXTERNAL LIBRARY customLibrary FROM (CONTENT = 0xABC123...) WITH (LANGUAGE = ''R'');'
          ''
        )
      end    
      item
        Caption = 'CreateExternalLibrary7'
        Lines.Strings = (
          'CREATE EXTERNAL LIBRARY customJar'
          'FROM (CONTENT = ''C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\customJar.jar'')'
          'WITH (LANGUAGE = ''Java'');'
          ''
        )
      end    
      item
        Caption = 'CreateExternalLibrary8'
        Lines.Strings = (
          'CREATE EXTERNAL LIBRARY lazyeval'
          'FROM (CONTENT = ''C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\packageA.zip'', PLATFORM = WINDOWS),'
          '(CONTENT = ''C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\packageA.tar.gz'', PLATFORM = LINUX)'
          'WITH (LANGUAGE = ''R'')'
          ''
        )
      end    
      item
        Caption = 'AlterExternalLibrary1'
        Lines.Strings = (
          'ALTER EXTERNAL LIBRARY customPackage'
          'SET'
          '  (CONTENT = ''C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\customPackage.zip'')'
          'WITH (LANGUAGE = ''R'');'
          ''
        )
      end    
      item
        Caption = 'AlterExternalLibrary2'
        Lines.Strings = (
          'ALTER EXTERNAL LIBRARY customLibrary'
          'SET (CONTENT = 0xABC123...) WITH (LANGUAGE = ''R'');'
          ''
        )
      end    
      item
        Caption = 'DropExternalLibrary1'
        Lines.Strings = (
          'DROP EXTERNAL LIBRARY customPackage;'
          ''
        )
      end    
      item
        Caption = 'CreateExternalResource1'
        Lines.Strings = (
          ''
          'CREATE EXTERNAL RESOURCE POOL ep_1'
          'WITH ('
          '    MAX_CPU_PERCENT = 75'
          '    , MAX_MEMORY_PERCENT = 30'
          ');'
          ''
        )
      end    
      item
        Caption = 'AlterExternalResource1'
        Lines.Strings = (
          'ALTER EXTERNAL RESOURCE POOL ep_1'
          'WITH ('
          '    MAX_CPU_PERCENT = 50'
          '    , MAX_MEMORY_PERCENT = 25'
          ');'
          ''
        )
      end    
      item
        Caption = 'DropExternalResource1'
        Lines.Strings = (
          'DROP EXTERNAL RESOURCE POOL ex_pool;'
          ''
        )
      end    
      item
        Caption = 'CreateFulltextCatalog1'
        Lines.Strings = (
          'CREATE FULLTEXT CATALOG ftCatalog AS DEFAULT;'
          ''
        )
      end    
      item
        Caption = 'CreateFulltextCatalog2'
        Lines.Strings = (
          'CREATE FULLTEXT CATALOG ft AS DEFAULT;'
          ''
        )
      end    
      item
        Caption = 'CreateFulltextCatalog3'
        Lines.Strings = (
          'CREATE FULLTEXT CATALOG production_catalog;'
          ''
        )
      end    
      item
        Caption = 'AlterFulltextCatalog1'
        Lines.Strings = (
          'ALTER FULLTEXT CATALOG ftCatalog'
          'REBUILD WITH ACCENT_SENSITIVITY=OFF;'
          ''
        )
      end    
      item
        Caption = 'DropFulltextCatalog1'
        Lines.Strings = (
          'DROP FULLTEXT CATALOG catalog_name'
          ''
        )
      end    
      item
        Caption = 'MasterKey1'
        Lines.Strings = (
          'CREATE MASTER KEY ENCRYPTION BY PASSWORD = ''23987hxJ#KL95234nl0zBe'';'
          ''
        )
      end    
      item
        Caption = 'MasterKey2'
        Lines.Strings = (
          'CREATE MASTER KEY ENCRYPTION BY PASSWORD = ''S0me!nfo'';'
          ''
        )
      end    
      item
        Caption = 'MasterKey3'
        Lines.Strings = (
          'CREATE MASTER KEY ENCRYPTION BY PASSWORD = ''password'';'
          ''
        )
      end    
      item
        Caption = 'MasterKey4'
        Lines.Strings = (
          'CREATE MASTER KEY ENCRYPTION BY PASSWORD = ''password'';'
          ''
        )
      end    
      item
        Caption = 'MasterKey5'
        Lines.Strings = (
          'CREATE MASTER KEY ENCRYPTION BY PASSWORD = ''password'';'
          ''
        )
      end    
      item
        Caption = 'MasterKey6'
        Lines.Strings = (
          'CREATE MASTER KEY ENCRYPTION BY PASSWORD = ''!MyC0mpl3xP@ssw0rd!'' ;'
          ''
        )
      end    
      item
        Caption = 'MasterKey7'
        Lines.Strings = (
          'CREATE MASTER KEY ENCRYPTION BY PASSWORD = ''S0me!nfo'' ;'
          ''
        )
      end    
      item
        Caption = 'MasterKey8'
        Lines.Strings = (
          'CREATE MASTER KEY ENCRYPTION BY PASSWORD = ''S0me!nfo'' ;'
          ''
        )
      end    
      item
        Caption = 'MasterKey9'
        Lines.Strings = (
          'CREATE MASTER KEY ENCRYPTION BY PASSWORD=''<EnterStrongPasswordHere>'';'
          ''
        )
      end    
      item
        Caption = 'MasterKey10'
        Lines.Strings = (
          'CREATE MASTER KEY ENCRYPTION BY PASSWORD=''<EnterStrongPasswordHere>'';'
          ''
        )
      end    
      item
        Caption = 'MasterKey11'
        Lines.Strings = (
          'CREATE MASTER KEY ENCRYPTION BY PASSWORD=''<EnterStrongPasswordHere>'';'
          ''
        )
      end    
      item
        Caption = 'MasterKey12'
        Lines.Strings = (
          'CREATE COLUMN MASTER KEY MyCMK'
          'WITH ('
          '     KEY_STORE_PROVIDER_NAME = N''MSSQL_CERTIFICATE_STORE'','
          '     KEY_PATH = ''Current User/Personal/f2260f28d909d21c642a3d8e0b45a830e79a1420'''
          '   );'
          ''
        )
      end    
      item
        Caption = 'MasterKey13'
        Lines.Strings = (
          'CREATE COLUMN MASTER KEY MyCMK'
          'WITH ('
          '    KEY_STORE_PROVIDER_NAME = N''MSSQL_CNG_STORE'','
          '    KEY_PATH = N''My HSM CNG Provider/AlwaysEncryptedKey'''
          ');'
          ''
        )
      end    
      item
        Caption = 'MasterKey14'
        Lines.Strings = (
          'CREATE COLUMN MASTER KEY MyCMK'
          'WITH ('
          '    KEY_STORE_PROVIDER_NAME = N''AZURE_KEY_VAULT'','
          '    KEY_PATH = N''https://myvault.vault.azure.net:443/keys/'
          '        MyCMK/4c05f1a41b12488f9cba2ea964b6a700'');'
          ''
        )
      end    
      item
        Caption = 'MasterKey15'
        Lines.Strings = (
          'CREATE COLUMN MASTER KEY MyCMK'
          'WITH ('
          '    KEY_STORE_PROVIDER_NAME = ''CUSTOM_KEY_STORE'','
          '    KEY_PATH = ''https://contoso.vault/sales_db_tce_key'''
          ');'
          ''
        )
      end    
      item
        Caption = 'MasterKey16'
        Lines.Strings = (
          'CREATE COLUMN MASTER KEY MyCMK'
          'WITH ('
          '     KEY_STORE_PROVIDER_NAME = N''MSSQL_CERTIFICATE_STORE'','
          '     KEY_PATH = ''Current User/Personal/f2260f28d909d21c642a3d8e0b45a830e79a1420'''
          '     ENCLAVE_COMPUTATIONS (SIGNATURE = 0xA80F5B123F5E092FFBD6014FC2226D792746468C901D9404938E9F5A0972F38DADBC9FCBA94D9E740F3339754991B6CE26543DEB0D094D8A2FFE8B43F0C7061A1FFF65E30FDDF39A1B954F5BA206AAC3260B0657232020542419990261D878318CC38EF4E853970ED69A8D4A306693B8659AAC1C4E4109DE5EB148FD0E1FDBBC32F002C1D8199D313227AD689279D8DEEF91064DF122C19C3767C463723AB663A6F8412AE17E745922C0E3A257EAEF215532588ACCBD440A03C7BC100A38BD0609A119E1EF7C5C6F1B086C68AB8873DBC6487B270340E868F9203661AFF0492CEC436ABF7C4713CE64E38CF66C794B55636BFA55E5B6554AF570CF73F1BE1DBD)'
          '  );'
          ''
        )
      end    
      item
        Caption = 'MasterKey17'
        Lines.Strings = (
          'CREATE COLUMN MASTER KEY MyCMK'
          'WITH ('
          '    KEY_STORE_PROVIDER_NAME = N''AZURE_KEY_VAULT'','
          '    KEY_PATH = N''https://myvault.vault.azure.net:443/keys/MyCMK/4c05f1a41b12488f9cba2ea964b6a700'');'
          '    ENCLAVE_COMPUTATIONS (SIGNATURE = 0xA80F5B123F5E092FFBD6014FC2226D792746468C901D9404938E9F5A0972F38DADBC9FCBA94D9E740F3339754991B6CE26543DEB0D094D8A2FFE8B43F0C7061A1FFF65E30FDDF39A1B954F5BA206AAC3260B0657232020582413990261D878318CC38EF4E853970ED69A8D4A306693B8659AAC1C4E4109DE5EB148FD0E1FDBBC32F002C1D8199D313227AD689279D8DEEF91064DF122C19C3767C463723AB663A6F8412AE17E745922C0E3A257EAEF215532588ACCBD440A03C7BC100A38BD0609A119E1EF7C5C6F1B086C68AB8873DBC6487B270340E868F9203661AFF0492CEC436ABF7C4713CE64E38CF66C794B55636BFA55E5B6554AF570CF73F1BE1DBD)'
          '  );'
          ''
        )
      end    
      item
        Caption = 'MasterKey18'
        Lines.Strings = (
          'ALTER MASTER KEY REGENERATE WITH ENCRYPTION BY PASSWORD = ''dsjdkflJ435907NnmM#sX003'';'
          ''
        )
      end    
      item
        Caption = 'MasterKey19'
        Lines.Strings = (
          'ALTER SERVICE MASTER KEY REGENERATE;'
          ''
        )
      end    
      item
        Caption = 'MasterKey20'
        Lines.Strings = (
          'OPEN MASTER KEY DECRYPTION BY PASSWORD = ''sfj5300osdVdgwdfkli7'';'
          ''
        )
      end    
      item
        Caption = 'MasterKey21'
        Lines.Strings = (
          'BACKUP MASTER KEY TO FILE = ''c:\temp\exportedmasterkey'''
          '    ENCRYPTION BY PASSWORD = ''sd092735kjn$&adsg'';'
          ''
        )
      end    
      item
        Caption = 'MasterKey22'
        Lines.Strings = (
          'BACKUP SERVICE MASTER KEY TO FILE = ''path_to_file'''
          '    ENCRYPTION BY PASSWORD = ''password'''
          ''
        )
      end    
      item
        Caption = 'MasterKey23'
        Lines.Strings = (
          'BACKUP SERVICE MASTER KEY TO FILE = ''c:\temp_backups\keys\service_master_key'' ENCRYPTION BY PASSWORD = ''3dH85Hhk003GHk2597gheij4'';'
          ''
        )
      end    
      item
        Caption = 'MasterKey24'
        Lines.Strings = (
          'RESTORE MASTER KEY'
          '    FROM FILE = ''c:\backups\keys\AdventureWorks2012_master_key'''
          '    DECRYPTION BY PASSWORD = ''3dH85Hhk003#GHkf02597gheij04'''
          '    ENCRYPTION BY PASSWORD = ''259087M#MyjkFkjhywiyedfgGDFD'';'
          ''
        )
      end    
      item
        Caption = 'MasterKey25'
        Lines.Strings = (
          'RESTORE SERVICE MASTER KEY'
          '    FROM FILE = ''c:\temp_backups\keys\service_master_key'''
          '    DECRYPTION BY PASSWORD = ''3dH85Hhk003GHk2597gheij4'';'
          ''
        )
      end    
      item
        Caption = 'MasterKey26'
        Lines.Strings = (
          'DROP COLUMN MASTER KEY MyCMK;'
          ''
        )
      end    
      item
        Caption = 'MasterKey27'
        Lines.Strings = (
          'DROP MASTER KEY;'
          ''
        )
      end    
      item
        Caption = 'MasterKey28'
        Lines.Strings = (
          'OPEN MASTER KEY DECRYPTION BY PASSWORD = ''43987hkhj4325tsku7'';'
          ''
        )
      end    
      item
        Caption = 'MasterKey29'
        Lines.Strings = (
          'CLOSE MASTER KEY;'
          ''
        )
      end    
      item
        Caption = 'Route1'
        Lines.Strings = (
          'ALTER ROUTE ExpenseRoute'
          '   WITH'
          '     SERVICE_NAME = ''//Adventure-Works.com/Expenses'';'
          ''
        )
      end    
      item
        Caption = 'Route2'
        Lines.Strings = (
          'ALTER ROUTE ExpenseRoute'
          '   WITH'
          '     BROKER_INSTANCE = ''D8D4D268-00A3-4C62-8F91-634B89B1E317'';'
          ''
        )
      end    
      item
        Caption = 'Route3'
        Lines.Strings = (
          'ALTER ROUTE ExpenseRoute'
          '   WITH'
          '     ADDRESS = ''TCP://10.2.19.72:1234'';'
          ''
        )
      end    
      item
        Caption = 'Route4'
        Lines.Strings = (
          'ALTER ROUTE ExpenseRoute'
          '   WITH'
          '     BROKER_INSTANCE = ''D8D4D268-00A3-4C62-8F91-634B89B1E317'','
          '     ADDRESS = ''TCP://www.Adventure-Works.com:1234'';'
          ''
        )
      end    
      item
        Caption = 'Route5'
        Lines.Strings = (
          'CREATE ROUTE NotifyRoute'
          'WITH SERVICE_NAME = ''NotifyService'','
          'ADDRESS = ''LOCAL'';'
          ''
        )
      end    
      item
        Caption = 'Route6'
        Lines.Strings = (
          'CREATE ROUTE ExpenseRoute'
          '    WITH'
          '    SERVICE_NAME = ''//Adventure-Works.com/Expenses'','
          '    BROKER_INSTANCE = ''D8D4D268-00A3-4C62-8F91-634B89C1E315'','
          '    ADDRESS = ''TCP://www.Adventure-Works.com:1234'' ;'
          ''
        )
      end    
      item
        Caption = 'Route7'
        Lines.Strings = (
          'CREATE ROUTE ExpenseRoute'
          '    WITH'
          '    SERVICE_NAME = ''//Adventure-Works.com/Expenses'','
          '    BROKER_INSTANCE = ''D8D4D268-00A3-4C62-8F91-634B89C1E315'','
          '    ADDRESS = ''TCP://SERVER02:1234'' ;'
          ''
        )
      end    
      item
        Caption = 'Route8'
        Lines.Strings = (
          'CREATE ROUTE ExpenseRoute'
          '    WITH'
          '    SERVICE_NAME = ''//Adventure-Works.com/Expenses'','
          '    BROKER_INSTANCE = ''D8D4D268-00A3-4C62-8F91-634B89C1E315'','
          '    ADDRESS = ''TCP://192.168.10.2:1234'' ;'
          ''
        )
      end    
      item
        Caption = 'Route9'
        Lines.Strings = (
          'CREATE ROUTE ExpenseRoute'
          '    WITH'
          '    ADDRESS = ''TCP://dispatch.Adventure-Works.com'' ;'
          ''
        )
      end    
      item
        Caption = 'Route10'
        Lines.Strings = (
          'CREATE ROUTE LogRequests'
          '    WITH'
          '    SERVICE_NAME = ''//Adventure-Works.com/LogRequests'','
          '    ADDRESS = ''LOCAL'' ;'
          ''
        )
      end    
      item
        Caption = 'Route11'
        Lines.Strings = (
          'CREATE ROUTE ExpenseRoute'
          '    WITH'
          '    SERVICE_NAME = ''//Adventure-Works.com/Expenses'','
          '    LIFETIME = 259200,'
          '    ADDRESS = ''TCP://services.Adventure-Works.com:1234'' ;'
          ''
        )
      end    
      item
        Caption = 'Route12'
        Lines.Strings = (
          'CREATE ROUTE ExpenseRoute'
          '    WITH'
          '    SERVICE_NAME = ''//Adventure-Works.com/Expenses'','
          '    BROKER_INSTANCE = ''69fcc80c-2239-4700-8437-1001ecddf933'','
          '    ADDRESS = ''TCP://services.Adventure-Works.com:1234'','
          '    MIRROR_ADDRESS = ''TCP://services-mirror.Adventure-Works.com:1234'' ;'
          ''
        )
      end    
      item
        Caption = 'Route13'
        Lines.Strings = (
          'CREATE ROUTE TransportRoute'
          '    WITH ADDRESS = ''TRANSPORT'' ;'
          ''
        )
      end    
      item
        Caption = 'Route14'
        Lines.Strings = (
          'DROP ROUTE ExpenseRoute ;'
        )
      end    
      item
        Caption = 'StopList1'
        Lines.Strings = (
          'ALTER FULLTEXT STOPLIST CombinedFunctionWordList ADD ''en'' LANGUAGE ''Spanish'';'
          ''
        )
      end    
      item
        Caption = 'StopList2'
        Lines.Strings = (
          'ALTER FULLTEXT STOPLIST CombinedFunctionWordList ADD ''en'' LANGUAGE ''French'';'
        )
      end    
      item
        Caption = 'StopList3'
        Lines.Strings = (
          'CREATE FULLTEXT STOPLIST myStoplist;'
          ''
        )
      end    
      item
        Caption = 'StopList4'
        Lines.Strings = (
          'CREATE FULLTEXT STOPLIST myStoplist2 FROM AdventureWorks.otherStoplist;'
          ''
        )
      end    
      item
        Caption = 'StopList5'
        Lines.Strings = (
          'CREATE FULLTEXT STOPLIST myStoplist3 FROM SYSTEM STOPLIST;'
          ''
        )
      end    
      item
        Caption = 'StopList6'
        Lines.Strings = (
          'DROP FULLTEXT STOPLIST myStoplist;'
        )
      end    
      item
        Caption = 'Queue1'
        Lines.Strings = (
          'ALTER QUEUE ExpenseQueue WITH STATUS = OFF ;'
          ''
        )
      end    
      item
        Caption = 'Queue2'
        Lines.Strings = (
          'ALTER QUEUE ExpenseQueue'
          '    WITH ACTIVATION ('
          '        PROCEDURE_NAME = new_stored_proc,'
          '        EXECUTE AS SELF) ;'
          ''
        )
      end    
      item
        Caption = 'Queue3'
        Lines.Strings = (
          'ALTER QUEUE ExpenseQueue WITH ACTIVATION (MAX_QUEUE_READERS = 7) ;'
          ''
        )
      end    
      item
        Caption = 'Queue4'
        Lines.Strings = (
          'ALTER QUEUE ExpenseQueue'
          '    WITH ACTIVATION ('
          '        PROCEDURE_NAME = AdventureWorks2012.dbo.new_stored_proc ,'
          '        EXECUTE AS ''SecurityAccount'') ;'
          ''
        )
      end    
      item
        Caption = 'Queue5'
        Lines.Strings = (
          'ALTER QUEUE ExpenseQueue WITH RETENTION = ON ;'
          ''
        )
      end    
      item
        Caption = 'Queue6'
        Lines.Strings = (
          'ALTER QUEUE ExpenseQueue WITH ACTIVATION (DROP) ;'
          ''
        )
      end    
      item
        Caption = 'Queue7'
        Lines.Strings = (
          'ALTER QUEUE ExpenseQueue REBUILD WITH (MAXDOP = 2)'
          ''
        )
      end    
      item
        Caption = 'Queue8'
        Lines.Strings = (
          'ALTER QUEUE ExpenseQueue REORGANIZE'
          ''
        )
      end    
      item
        Caption = 'Queue9'
        Lines.Strings = (
          'ALTER QUEUE ExpenseQueue MOVE TO [NewFilegroup]'
          ''
        )
      end    
      item
        Caption = 'Queue10'
        Lines.Strings = (
          'CREATE QUEUE NotifyQueue ;'
          ''
          ''
        )
      end    
      item
        Caption = 'Queue11'
        Lines.Strings = (
          'CREATE QUEUE ExpenseQueue ;'
          ''
        )
      end    
      item
        Caption = 'Queue12'
        Lines.Strings = (
          'CREATE QUEUE ExpenseQueue WITH STATUS=OFF ;'
          ''
        )
      end    
      item
        Caption = 'Queue13'
        Lines.Strings = (
          'CREATE QUEUE ExpenseQueue'
          '    WITH STATUS=ON,'
          '    ACTIVATION ('
          '        PROCEDURE_NAME = expense_procedure'
          '        , MAX_QUEUE_READERS = 5'
          '        , EXECUTE AS ''ExpenseUser'' ) ;'
          ''
        )
      end    
      item
        Caption = 'Queue14'
        Lines.Strings = (
          'CREATE QUEUE ExpenseQueue'
          '    ON ExpenseWorkFileGroup ;'
          ''
        )
      end    
      item
        Caption = 'Queue15'
        Lines.Strings = (
          'CREATE QUEUE ExpenseQueue'
          '    WITH STATUS = OFF'
          '      , RETENTION = ON'
          '      , ACTIVATION ('
          '          PROCEDURE_NAME = AdventureWorks2012.dbo.expense_procedure'
          '          , MAX_QUEUE_READERS = 10'
          '          , EXECUTE AS SELF )'
          '    ON [DEFAULT];'
        )
      end    
      item
        Caption = 'Queue16'
        Lines.Strings = (
          'DROP QUEUE ExpenseQueue ;'
        )
      end    
      item
        Caption = 'Resource1'
        Lines.Strings = (
          'ALTER RESOURCE GOVERNOR RECONFIGURE;'
          ''
          ''
        )
      end    
      item
        Caption = 'Resource2'
        Lines.Strings = (
          'ALTER RESOURCE GOVERNOR RECONFIGURE;'
          ''
        )
      end    
      item
        Caption = 'Resource3'
        Lines.Strings = (
          'ALTER RESOURCE GOVERNOR WITH (CLASSIFIER_FUNCTION = NULL);'
          ''
        )
      end    
      item
        Caption = 'Resource4'
        Lines.Strings = (
          'ALTER RESOURCE GOVERNOR RECONFIGURE;'
          ''
        )
      end    
      item
        Caption = 'Resource5'
        Lines.Strings = (
          'ALTER RESOURCE GOVERNOR WITH (CLASSIFIER_FUNCTION=dbo.rgclassifier_v1);'
          ''
        )
      end    
      item
        Caption = 'Resource6'
        Lines.Strings = (
          'ALTER RESOURCE GOVERNOR RECONFIGURE;'
          ''
        )
      end    
      item
        Caption = 'Resource7'
        Lines.Strings = (
          'ALTER RESOURCE GOVERNOR RESET STATISTICS;'
          ''
        )
      end    
      item
        Caption = 'Resource8'
        Lines.Strings = (
          'ALTER RESOURCE GOVERNOR'
          'WITH (MAX_OUTSTANDING_IO_PER_VOLUME = 20);'
          ''
        )
      end    
      item
        Caption = 'Resource9'
        Lines.Strings = (
          'ALTER RESOURCE POOL "default"'
          'WITH'
          '     ( MAX_CPU_PERCENT = 25);'
          ''
        )
      end    
      item
        Caption = 'Resource10'
        Lines.Strings = (
          'ALTER RESOURCE GOVERNOR RECONFIGURE;'
          ''
        )
      end    
      item
        Caption = 'Resource11'
        Lines.Strings = (
          'ALTER RESOURCE POOL Pool25'
          'WITH('
          '     MIN_CPU_PERCENT = 5,'
          '     MAX_CPU_PERCENT = 10,'
          '     CAP_CPU_PERCENT = 80,'
          '     AFFINITY SCHEDULER = (8, 12 TO 16),'
          '     MIN_MEMORY_PERCENT = 5,'
          '     MAX_MEMORY_PERCENT = 15'
          ');'
          ''
        )
      end    
      item
        Caption = 'Resource12'
        Lines.Strings = (
          'ALTER RESOURCE GOVERNOR RECONFIGURE;'
          ''
        )
      end    
      item
        Caption = 'Resource13'
        Lines.Strings = (
          'ALTER RESOURCE GOVERNOR RECONFIGURE;'
          ''
        )
      end    
      item
        Caption = 'Resource14'
        Lines.Strings = (
          'ALTER RESOURCE GOVERNOR RECONFIGURE;'
        )
      end    
      item
        Caption = 'Resource15'
        Lines.Strings = (
          'CREATE RESOURCE POOL bigPool;'
          ''
        )
      end    
      item
        Caption = 'Resource16'
        Lines.Strings = (
          'CREATE RESOURCE POOL PoolAdmin'
          'WITH ('
          '     MIN_CPU_PERCENT = 10,'
          '     MAX_CPU_PERCENT = 20,'
          '     CAP_CPU_PERCENT = 30,'
          '     AFFINITY SCHEDULER = (0 TO 63, 128 TO 191),'
          '     MIN_MEMORY_PERCENT = 5,'
          '     MAX_MEMORY_PERCENT = 15'
          '      );'
          ''
        )
      end    
      item
        Caption = 'Resource17'
        Lines.Strings = (
          'CREATE RESOURCE POOL PoolAdmin'
          'WITH ('
          '    MIN_IOPS_PER_VOLUME = 20,'
          '    MAX_IOPS_PER_VOLUME = 100'
          '      );'
          ''
        )
      end    
      item
        Caption = 'Resource18'
        Lines.Strings = (
          'DROP RESOURCE POOL big_pool;'
          ''
          ''
        )
      end    
      item
        Caption = 'SecurityPolicy1'
        Lines.Strings = (
          'ALTER SECURITY POLICY pol1'
          '    ADD FILTER PREDICATE schema_preds.SecPredicate(column1)'
          '    ON myschema.mytable;'
          ''
        )
      end    
      item
        Caption = 'SecurityPolicy2'
        Lines.Strings = (
          'ALTER SECURITY POLICY pol1 WITH ( STATE = ON );'
          ''
        )
      end    
      item
        Caption = 'SecurityPolicy3'
        Lines.Strings = (
          'ALTER SECURITY POLICY pol1'
          'ADD FILTER PREDICATE schema_preds.SecPredicate1(column1)'
          '    ON myschema.mytable1,'
          ''
        )
      end    
      item
        Caption = 'SecurityPolicy4'
        Lines.Strings = (
          'ALTER SECURITY POLICY pol1'
          '    ALTER FILTER PREDICATE schema_preds.SecPredicate2(column1)'
          '        ON myschema.mytable;'
          ''
        )
      end    
      item
        Caption = 'SecurityPolicy5'
        Lines.Strings = (
          'ALTER SECURITY POLICY rls.SecPol'
          '    ALTER BLOCK PREDICATE rls.tenantAccessPredicate_v2(TenantId)'
          '    ON dbo.Sales AFTER INSERT;'
          ''
        )
      end    
      item
        Caption = 'SecurityPolicy6'
        Lines.Strings = (
          'CREATE SECURITY POLICY [FederatedSecurityPolicy]'
          'ADD FILTER PREDICATE [rls].[fn_securitypredicate]([CustomerId])'
          'ON [dbo].[Customer];'
          ''
        )
      end    
      item
        Caption = 'SecurityPolicy7'
        Lines.Strings = (
          'CREATE SECURITY POLICY [FederatedSecurityPolicy]'
          'ADD FILTER PREDICATE [rls].[fn_securitypredicate1]([CustomerId])'
          '    ON [dbo].[Customer],'
          'ADD FILTER PREDICATE [rls].[fn_securitypredicate1]([VendorId])'
          '    ON [dbo].[ Vendor],'
          'ADD FILTER PREDICATE [rls].[fn_securitypredicate2]([WingId])'
          '    ON [dbo].[Patient]'
          'WITH (STATE = ON);'
          ''
        )
      end    
      item
        Caption = 'SecurityPolicy8'
        Lines.Strings = (
          'CREATE SECURITY POLICY rls.SecPol'
          '    ADD FILTER PREDICATE rls.tenantAccessPredicate(TenantId) ON dbo.Sales,'
          '    ADD BLOCK PREDICATE rls.tenantAccessPredicate(TenantId) ON dbo.Sales AFTER INSERT;'
          ''
        )
      end    
      item
        Caption = 'SymmetricKey1'
        Lines.Strings = (
          'CREATE SYMMETRIC KEY JanainaKey043 WITH ALGORITHM = AES_256'
          '    ENCRYPTION BY CERTIFICATE Shipping04;'
          ''
        )
      end    
      item
        Caption = 'SymmetricKey2'
        Lines.Strings = (
          'OPEN SYMMETRIC KEY JanainaKey043 DECRYPTION BY CERTIFICATE Shipping04'
          '    WITH PASSWORD = ''<enterStrongPasswordHere>'';'
          ''
        )
      end    
      item
        Caption = 'SymmetricKey3'
        Lines.Strings = (
          'ALTER SYMMETRIC KEY JanainaKey043'
          '    ADD ENCRYPTION BY PASSWORD = ''<enterStrongPasswordHere>'';'
          ''
        )
      end    
      item
        Caption = 'SymmetricKey4'
        Lines.Strings = (
          'ALTER SYMMETRIC KEY JanainaKey043'
          '    DROP ENCRYPTION BY CERTIFICATE Shipping04;'
          ''
        )
      end    
      item
        Caption = 'SymmetricKey5'
        Lines.Strings = (
          'CLOSE SYMMETRIC KEY JanainaKey043;'
        )
      end    
      item
        Caption = 'SymmetricKey6'
        Lines.Strings = (
          'CREATE SYMMETRIC KEY JanainaKey09'
          'WITH ALGORITHM = AES_256'
          'ENCRYPTION BY CERTIFICATE Shipping04;'
          ''
        )
      end    
      item
        Caption = 'SymmetricKey7'
        Lines.Strings = (
          'CREATE SYMMETRIC KEY #MarketingXXV'
          'WITH ALGORITHM = AES_128,'
          'KEY_SOURCE'
          '     = ''The square of the hypotenuse is equal to the sum of the squares of the sides'','
          'IDENTITY_VALUE = ''Pythagoras'''
          'ENCRYPTION BY CERTIFICATE Marketing25;'
          ''
        )
      end    
      item
        Caption = 'SymmetricKey8'
        Lines.Strings = (
          'CREATE SYMMETRIC KEY MySymKey'
          'AUTHORIZATION User1'
          'FROM PROVIDER EKMProvider'
          'WITH'
          'PROVIDER_KEY_NAME=''KeyForSensitiveData'','
          'CREATION_DISPOSITION=OPEN_EXISTING;'
          ''
        )
      end    
      item
        Caption = 'SymmetricKey9'
        Lines.Strings = (
          'CLOSE SYMMETRIC KEY GailSammamishKey6;'
          ''
        )
      end    
      item
        Caption = 'SymmetricKey10'
        Lines.Strings = (
          'DROP SYMMETRIC KEY GailSammamishKey6;'
          ''
        )
      end    
      item
        Caption = 'SymmetricKey11'
        Lines.Strings = (
          'CLOSE SYMMETRIC KEY ShippingSymKey04;'
          ''
        )
      end    
      item
        Caption = 'SymmetricKey12'
        Lines.Strings = (
          'CLOSE ALL SYMMETRIC KEYS;'
          ''
        )
      end    
      item
        Caption = 'SymmetricKey13'
        Lines.Strings = (
          'OPEN SYMMETRIC KEY SymKeyMarketing3'
          '    DECRYPTION BY CERTIFICATE MarketingCert9;'
          ''
        )
      end    
      item
        Caption = 'SymmetricKey14'
        Lines.Strings = (
          'OPEN SYMMETRIC KEY HarnpadoungsatayaSE3'
          '    DECRYPTION BY CERTIFICATE sariyaCert01;'
          ''
        )
      end    
      item
        Caption = 'SymmetricKey15'
        Lines.Strings = (
          'OPEN SYMMETRIC KEY MarketingKey11'
          '    DECRYPTION BY SYMMETRIC KEY HarnpadoungsatayaSE3;'
          ''
        )
      end    
      item
        Caption = 'PropertyList1'
        Lines.Strings = (
          'ALTER SEARCH PROPERTY LIST DocumentPropertyList'
          '   ADD ''Title'''
          '   WITH ( PROPERTY_SET_GUID = ''F29F85E0-4FF9-1068-AB91-08002B27B3D9'', PROPERTY_INT_ID = 2,'
          '      PROPERTY_DESCRIPTION = ''System.Title - Title of the item.'' );'
          ''
        )
      end    
      item
        Caption = 'PropertyList2'
        Lines.Strings = (
          'ALTER SEARCH PROPERTY LIST DocumentPropertyList'
          '    ADD ''Author'''
          '   WITH ( PROPERTY_SET_GUID = ''F29F85E0-4FF9-1068-AB91-08002B27B3D9'', PROPERTY_INT_ID = 4,'
          '      PROPERTY_DESCRIPTION = ''System.Author - Author or authors of the item.'' );'
          ''
        )
      end    
      item
        Caption = 'PropertyList3'
        Lines.Strings = (
          'ALTER SEARCH PROPERTY LIST DocumentPropertyList'
          '    ADD ''Tags'''
          '   WITH ( PROPERTY_SET_GUID = ''F29F85E0-4FF9-1068-AB91-08002B27B3D9'', PROPERTY_INT_ID = 5,'
          '      PROPERTY_DESCRIPTION ='
          '          ''System.Keywords - Set of keywords (also known as tags) assigned to the item.'' );'
          ''
        )
      end    
      item
        Caption = 'PropertyList4'
        Lines.Strings = (
          'ALTER SEARCH PROPERTY LIST DocumentPropertyList'
          'DROP ''Comments'' ;'
          ''
        )
      end    
      item
        Caption = 'PropertyList5'
        Lines.Strings = (
          'DROP SEARCH PROPERTY LIST JobCandidateProperties;'
          ''
        )
      end    
      item
        Caption = 'PropertyList6'
        Lines.Strings = (
          'CREATE SEARCH PROPERTY LIST DocumentPropertyList;'
          ''
        )
      end    
      item
        Caption = 'PropertyList7'
        Lines.Strings = (
          'CREATE SEARCH PROPERTY LIST JobCandidateProperties'
          'FROM AdventureWorks2012.DocumentPropertyList;'
          ''
        )
      end    
      item
        Caption = 'Service1'
        Lines.Strings = (
          'ALTER REMOTE SERVICE BINDING APBinding'
          '    WITH USER = SecurityAccount ;'
        )
      end    
      item
        Caption = 'Service2'
        Lines.Strings = (
          'ALTER SERVICE [//Adventure-Works.com/Expenses]'
          '    ON QUEUE NewQueue ;'
          ''
        )
      end    
      item
        Caption = 'Service3'
        Lines.Strings = (
          'ALTER SERVICE [//Adventure-Works.com/Expenses]'
          '    (ADD CONTRACT [//Adventure-Works.com/Expenses/ExpenseSubmission]) ;'
          ''
        )
      end    
      item
        Caption = 'Service4'
        Lines.Strings = (
          'ALTER SERVICE [//Adventure-Works.com/Expenses]'
          '    (ADD CONTRACT [//Adventure-Works.com/Expenses/ExpenseProcessing],'
          '     DROP CONTRACT [//Adventure-Works.com/Expenses/ExpenseSubmission]) ;'
          ''
        )
      end    
      item
        Caption = 'Service5'
        Lines.Strings = (
          'CREATE SERVICE NotifyService'
          'ON QUEUE NotifyQueue'
          '([https://schemas.microsoft.com/SQL/Notifications/PostEventNotification]);'
          ''
        )
      end    
      item
        Caption = 'Service6'
        Lines.Strings = (
          'CREATE REMOTE SERVICE BINDING APBinding'
          '    TO SERVICE ''//Adventure-Works.com/services/AccountsPayable'''
          '    WITH USER = APUser ;'
          ''
        )
      end    
      item
        Caption = 'Service7'
        Lines.Strings = (
          'CREATE REMOTE SERVICE BINDING APBinding'
          '    TO SERVICE ''//Adventure-Works.com/services/AccountsPayable'''
          '    WITH USER = APUser, ANONYMOUS=ON ;'
          ''
        )
      end    
      item
        Caption = 'Service8'
        Lines.Strings = (
          'CREATE SERVICE [//Adventure-Works.com/Expenses]'
          '    ON QUEUE [dbo].[ExpenseQueue]'
          '    ([//Adventure-Works.com/Expenses/ExpenseSubmission]) ;'
          ''
        )
      end    
      item
        Caption = 'Service9'
        Lines.Strings = (
          'CREATE SERVICE [//Adventure-Works.com/Expenses] ON QUEUE ExpenseQueue'
          '    ([//Adventure-Works.com/Expenses/ExpenseSubmission],'
          '     [//Adventure-Works.com/Expenses/ExpenseProcessing]) ;'
          ''
        )
      end    
      item
        Caption = 'Service10'
        Lines.Strings = (
          'CREATE SERVICE [//Adventure-Works.com/Expenses] ON QUEUE ExpenseQueue ;'
          ''
        )
      end    
      item
        Caption = 'Service11'
        Lines.Strings = (
          'DROP REMOTE SERVICE BINDING APBinding ;'
          ''
          ''
        )
      end    
      item
        Caption = 'Service12'
        Lines.Strings = (
          'DROP SERVICE [//Adventure-Works.com/Expenses] ;'
        )
      end    
      item
        Caption = 'WorkloadGroup1'
        Lines.Strings = (
          'ALTER WORKLOAD GROUP "default"'
          'WITH (IMPORTANCE = LOW);'
          ''
        )
      end    
      item
        Caption = 'WorkloadGroup2'
        Lines.Strings = (
          'ALTER WORKLOAD GROUP adHoc'
          'USING [default];'
          ''
        )
      end    
      item
        Caption = 'WorkloadGroup3'
        Lines.Strings = (
          'ALTER WORKLOAD GROUP "default"'
          'WITH (IMPORTANCE = LOW);'
          ''
        )
      end    
      item
        Caption = 'WorkloadGroup4'
        Lines.Strings = (
          'ALTER WORKLOAD GROUP adHoc'
          'USING [default];'
          ''
        )
      end    
      item
        Caption = 'WorkloadGroup5'
        Lines.Strings = (
          'CREATE WORKLOAD GROUP newReports'
          'WITH'
          '    (REQUEST_MAX_MEMORY_GRANT_PERCENT = 2.5'
          '      , REQUEST_MAX_CPU_TIME_SEC = 100'
          '      , MAX_DOP = 4)'
          'USING "default" ;'
          ''
        )
      end    
      item
        Caption = 'WorkloadGroup6'
        Lines.Strings = (
          'DROP WORKLOAD GROUP adhoc;'
          ''
        )
      end    
      item
        Caption = 'BackupRestore1'
        Lines.Strings = (
          'BACKUP DATABASE AdventureWorks2012'
          ' TO DISK = ''Z:\SQLServerBackups\AdvWorksData.bak'''
          '    WITH FORMAT;'
          ''
        )
      end    
      item
        Caption = 'BackupRestore2'
        Lines.Strings = (
          'BACKUP DATABASE AdventureWorks2012 TO AdvWorksData;'
          ''
        )
      end    
      item
        Caption = 'BackupRestore3'
        Lines.Strings = (
          'BACKUP LOG AdventureWorks2012'
          '    TO AdvWorksLog;'
          ''
        )
      end    
      item
        Caption = 'BackupRestore4'
        Lines.Strings = (
          'BACKUP DATABASE Sales'
          '    FILEGROUP = ''SalesGroup1'','
          '    FILEGROUP = ''SalesGroup2'''
          '    TO DISK = ''Z:\SQLServerBackups\SalesFiles.bck'';'
          ''
        )
      end    
      item
        Caption = 'BackupRestore5'
        Lines.Strings = (
          'BACKUP DATABASE Sales'
          '    FILEGROUP = ''SalesGroup1'','
          '    FILEGROUP = ''SalesGroup2'''
          '    TO DISK = ''Z:\SQLServerBackups\SalesFiles.bck'''
          '    WITH'
          '      DIFFERENTIAL;'
          ''
        )
      end    
      item
        Caption = 'BackupRestore6'
        Lines.Strings = (
          'BACKUP DATABASE AdventureWorks2012'
          'TO TAPE = ''\\.\tape0'''
          'MIRROR TO TAPE = ''\\.\tape1'''
          'MIRROR TO TAPE = ''\\.\tape2'''
          'MIRROR TO TAPE = ''\\.\tape3'''
          'WITH'
          '    FORMAT,'
          '    MEDIANAME = ''AdventureWorksSet0'';'
          ''
        )
      end    
      item
        Caption = 'BackupRestore7'
        Lines.Strings = (
          'BACKUP DATABASE AdventureWorks2012'
          'TO TAPE = ''\\.\tape0'', TAPE = ''\\.\tape1'''
          'MIRROR TO TAPE = ''\\.\tape2'', TAPE = ''\\.\tape3'''
          'WITH'
          '    FORMAT,'
          '    MEDIANAME = ''AdventureWorksSet1'';'
          ''
        )
      end    
      item
        Caption = 'BackupRestore8'
        Lines.Strings = (
          'BACKUP LOG AdventureWorks2012'
          'TO TAPE = ''\\.\tape0'', TAPE = ''\\.\tape1'''
          'MIRROR TO TAPE = ''\\.\tape2'', TAPE = ''\\.\tape3'''
          'WITH'
          '    NOINIT,'
          '    MEDIANAME = ''AdventureWorksSet1'';'
          ''
        )
      end    
      item
        Caption = 'BackupRestore9'
        Lines.Strings = (
          'BACKUP DATABASE AdventureWorks2012 TO DISK=''Z:\SQLServerBackups\AdvWorksData.bak'''
          'WITH'
          '    FORMAT,'
          '    COMPRESSION;'
          ''
        )
      end    
      item
        Caption = 'BackupRestore10'
        Lines.Strings = (
          'BACKUP DATABASE Sales'
          'TO URL = ''https://mystorageaccount.blob.core.windows.net/myfirstcontainer/Sales_20160726.bak'''
          'WITH STATS = 5;'
          ''
        )
      end    
      item
        Caption = 'BackupRestore11'
        Lines.Strings = (
          'BACKUP CERTIFICATE sales05 TO FILE = ''c:\storedcerts\sales05cert'';'
          ''
        )
      end    
      item
        Caption = 'BackupRestore12'
        Lines.Strings = (
          'BACKUP CERTIFICATE sales05 TO FILE = ''c:\storedcerts\sales05cert'''
          '    WITH PRIVATE KEY ( FILE = ''c:\storedkeys\sales05key'' ,'
          '    ENCRYPTION BY PASSWORD = ''997jkhUbhk$w4ez0876hKHJH5gh'' );'
          ''
        )
      end    
      item
        Caption = 'BackupRestore13'
        Lines.Strings = (
          'BACKUP CERTIFICATE sales09 TO FILE = ''c:\storedcerts\sales09cert'''
          '    WITH PRIVATE KEY ( DECRYPTION BY PASSWORD = ''9875t6#6rfid7vble7r'' ,'
          '    FILE = ''c:\storedkeys\sales09key'' ,'
          '    ENCRYPTION BY PASSWORD = ''9n34khUbhk$w4ecJH5gh'' );'
          ''
        )
      end    
      item
        Caption = 'BackupRestore14'
        Lines.Strings = (
          'RESTORE DATABASE AdventureWorks2012'
          '  FROM AdventureWorks2012Backups;'
          ''
        )
      end    
      item
        Caption = 'BackupRestore15'
        Lines.Strings = (
          'RESTORE DATABASE AdventureWorks2012'
          '    FROM DISK = ''Z:\SQLServerBackups\AdventureWorks2012.bak'''
          '    WITH FILE = 6'
          '      NORECOVERY;'
          ''
        )
      end    
      item
        Caption = 'BackupRestore16'
        Lines.Strings = (
          'RESTORE DATABASE AdventureWorks2012'
          '    FROM DISK = ''Z:\SQLServerBackups\AdventureWorks2012.bak'''
          '    WITH FILE = 9'
          '      RECOVERY;'
          ''
        )
      end    
      item
        Caption = 'BackupRestore17'
        Lines.Strings = (
          'RESTORE DATABASE AdventureWorks2012'
          '    FROM AdventureWorksBackups;'
          ''
        )
      end    
      item
        Caption = 'BackupRestore18'
        Lines.Strings = (
          'RESTORE DATABASE AdventureWorks2012'
          '    FROM AdventureWorksBackups WITH RESTART;'
          ''
        )
      end    
      item
        Caption = 'BackupRestore19'
        Lines.Strings = (
          'RESTORE DATABASE AdventureWorks2012'
          '    FROM AdventureWorksBackups'
          '    WITH NORECOVERY,'
          '      MOVE ''AdventureWorks2012_Data'' TO'
          '''C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\Data\NewAdvWorks.mdf'','
          '      MOVE ''AdventureWorks2012_Log'''
          'TO ''C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\Data\NewAdvWorks.ldf'';'
          ''
        )
      end    
      item
        Caption = 'BackupRestore20'
        Lines.Strings = (
          'RESTORE LOG AdventureWorks2012'
          '    FROM AdventureWorksBackups'
          '    WITH RECOVERY;'
          ''
        )
      end    
      item
        Caption = 'BackupRestore21'
        Lines.Strings = (
          'BACKUP DATABASE AdventureWorks2012'
          '    TO AdventureWorksBackups ;'
          ''
        )
      end    
      item
        Caption = 'BackupRestore22'
        Lines.Strings = (
          'RESTORE FILELISTONLY'
          '    FROM AdventureWorksBackups ;'
          ''
        )
      end    
      item
        Caption = 'BackupRestore23'
        Lines.Strings = (
          'RESTORE DATABASE TestDB'
          '    FROM AdventureWorksBackups'
          '    WITH MOVE ''AdventureWorks2012_Data'' TO ''C:\MySQLServer\testdb.mdf'','
          '    MOVE ''AdventureWorks2012_Log'' TO ''C:\MySQLServer\testdb.ldf'';'
          ''
        )
      end    
      item
        Caption = 'BackupRestore24'
        Lines.Strings = (
          'RESTORE DATABASE AdventureWorks2012'
          '    FROM AdventureWorksBackups'
          '    WITH FILE=3, NORECOVERY;'
          ''
        )
      end    
      item
        Caption = 'BackupRestore25'
        Lines.Strings = (
          'RESTORE LOG AdventureWorks2012'
          '    FROM AdventureWorksBackups'
          '    WITH FILE=4, NORECOVERY, STOPAT = ''Apr 15, 2020 12:00 AM'';'
          ''
        )
      end    
      item
        Caption = 'BackupRestore26'
        Lines.Strings = (
          'RESTORE LOG AdventureWorks2012'
          '    FROM AdventureWorksBackups'
          '    WITH FILE=5, NORECOVERY, STOPAT = ''Apr 15, 2020 12:00 AM'';'
          ''
        )
      end    
      item
        Caption = 'BackupRestore27'
        Lines.Strings = (
          'RESTORE DATABASE AdventureWorks2012 WITH RECOVERY;'
          ''
        )
      end    
      item
        Caption = 'BackupRestore28'
        Lines.Strings = (
          'RESTORE DATABASE AdventureWorks2012'
          'FROM AdventureWorksBackups'
          'WITH FILE = 3, NORECOVERY;'
          ''
        )
      end    
      item
        Caption = 'BackupRestore29'
        Lines.Strings = (
          'RESTORE LOG AdventureWorks2012'
          '  FROM AdventureWorksBackups'
          '    WITH FILE = 4,'
          '    RECOVERY,'
          '    STOPATMARK = ListPriceUpdate;'
          ''
        )
      end    
      item
        Caption = 'BackupRestore30'
        Lines.Strings = (
          'RESTORE DATABASE AdventureWorks2012'
          '    FROM TAPE = ''\\.\tape0'';'
          ''
        )
      end    
      item
        Caption = 'BackupRestore31'
        Lines.Strings = (
          'RESTORE DATABASE MyDatabase'
          '    FILE = ''MyDatabase_data_1'','
          '    FILE = ''MyDatabase_data_2'','
          '    FILEGROUP = ''new_customers'''
          '    FROM MyDatabaseBackups'
          '    WITH'
          '      FILE = 9,'
          '      NORECOVERY;'
          ''
        )
      end    
      item
        Caption = 'BackupRestore32'
        Lines.Strings = (
          'RESTORE LOG MyDatabase'
          '    FROM MyDatabaseBackups'
          '    WITH FILE = 10,'
          '      NORECOVERY;'
          ''
        )
      end    
      item
        Caption = 'BackupRestore33'
        Lines.Strings = (
          'RESTORE LOG MyDatabase'
          '    FROM MyDatabaseBackups'
          '    WITH FILE = 11,'
          '      NORECOVERY;'
          ''
        )
      end    
      item
        Caption = 'BackupRestore34'
        Lines.Strings = (
          'RESTORE LOG MyDatabase'
          '    FROM MyDatabaseBackups'
          '    WITH FILE = 12,'
          '      NORECOVERY;'
          ''
        )
      end    
      item
        Caption = 'BackupRestore35'
        Lines.Strings = (
          'RESTORE DATABASE MyDatabase WITH RECOVERY;'
          ''
        )
      end    
      item
        Caption = 'BackupRestore36'
        Lines.Strings = (
          'RESTORE DATABASE AdventureWorks2012 FROM DATABASE_SNAPSHOT = ''AdventureWorks_dbss1800'';'
          ''
        )
      end    
      item
        Caption = 'BackupRestore37'
        Lines.Strings = (
          'RESTORE FILELISTONLY FROM AdventureWorksBackups'
          '   WITH FILE=2;'
          ''
        )
      end    
      item
        Caption = 'BackupRestore38'
        Lines.Strings = (
          'RESTORE VERIFYONLY FROM DISK = ''D:\AdventureWorks.bak'';'
        )
      end    
      item
        Caption = 'Event1'
        Lines.Strings = (
          'CREATE EVENT NOTIFICATION log_ddl1'
          'ON SERVER'
          'FOR Object_Created'
          'TO SERVICE ''NotifyService'','
          '    ''8140a771-3c4b-4479-8ac0-81008ab17984'' ;'
          ''
        )
      end    
      item
        Caption = 'Event2'
        Lines.Strings = (
          'CREATE EVENT NOTIFICATION Notify_ALTER_T1'
          'ON DATABASE'
          'FOR ALTER_TABLE'
          'TO SERVICE ''NotifyService'','
          '    ''8140a771-3c4b-4479-8ac0-81008ab17984'';'
          ''
        )
      end    
      item
        Caption = 'Event3'
        Lines.Strings = (
          'CREATE EVENT NOTIFICATION NotifyALTER_T1'
          'ON DATABASE'
          'FOR ALTER_TABLE'
          'TO SERVICE ''NotifyService'','
          '    ''8140a771-3c4b-4479-8ac0-81008ab17984'';'
          ''
        )
      end    
      item
        Caption = 'Event4'
        Lines.Strings = (
          'DROP EVENT NOTIFICATION NotifyALTER_T1'
          'ON DATABASE;'
          ''
        )
      end    
      item
        Caption = 'Signature1'
        Lines.Strings = (
          'DROP SIGNATURE FROM HumanResources.uspUpdateEmployeeLogin'
          '    BY CERTIFICATE HumanResourcesDP;'
          ''
        )
      end    
      item
        Caption = 'Signature2'
        Lines.Strings = (
          'ADD SIGNATURE TO HumanResources.uspUpdateEmployeeLogin'
          '    BY CERTIFICATE HumanResourcesDP;'
          ''
        )
      end    
      item
        Caption = 'Signature3'
        Lines.Strings = (
          'ADD SIGNATURE TO [sp_signature_demo]'
          '    BY CERTIFICATE [cert_signature_demo]'
          '    WITH PASSWORD = ''pGFD4bb925DGvbd2439587y'' ;'
          ''
        )
      end    
      item
        Caption = 'Signature4'
        Lines.Strings = (
          'DROP SIGNATURE FROM [sp_signature_demo]'
          '    BY CERTIFICATE [cert_signature_demo];'
          ''
        )
      end    
      item
        Caption = 'Signature5'
        Lines.Strings = (
          'ADD SIGNATURE TO [sp_signature_demo]'
          '    BY CERTIFICATE [cert_signature_demo]'
          '    WITH SIGNATURE = 0x831F5530C86CC8ED606E5BC2720DA835351E46219A6D5DE9CE546297B88AEF3B6A7051891AF3EE7A68EAB37CD8380988B4C3F7469C8EABDD9579A2A5C507A4482905C2F24024FFB2F9BD7A953DD5E98470C4AA90CE83237739BB5FAE7BAC796E7710BDE291B03C43582F6F2D3B381F2102EEF8407731E01A51E24D808D54B373 ;'
          ''
        )
      end    
      item
        Caption = 'Signature6'
        Lines.Strings = (
          'ADD SIGNATURE TO procSelectT1ForAlice BY CERTIFICATE csSelectT'
          'WITH PASSWORD = ''SimplePwd01'';'
          ''
        )
      end    
      item
        Caption = 'Signature7'
        Lines.Strings = (
          'ADD COUNTER SIGNATURE TO procSelectT1 BY CERTIFICATE csSelectT'
          'WITH PASSWORD = ''SimplePwd01'';'
          ''
        )
      end    
      item
        Caption = 'Revert1'
        Lines.Strings = (
          'REVERT WITH COOKIE = @cookie;'
          ''
          ''
        )
      end    
      item
        Caption = 'Synonym1'
        Lines.Strings = (
          'CREATE SYNONYM MyProduct'
          'FOR AdventureWorks2012.Production.Product;'
          ''
        )
      end    
      item
        Caption = 'Synonym2'
        Lines.Strings = (
          'CREATE SYNONYM MyEmployee FOR Server_Remote.AdventureWorks2012.HumanResources.Employee;'
          ''
        )
      end    
      item
        Caption = 'Synonym3'
        Lines.Strings = (
          'CREATE SYNONYM dbo.CorrectOrder'
          'FOR dbo.OrderDozen;'
          ''
        )
      end    
      item
        Caption = 'Synonym4'
        Lines.Strings = (
          'CREATE SYNONYM MyProduct'
          'FOR AdventureWorks2012.Production.Product;'
          ''
        )
      end    
      item
        Caption = 'Synonym5'
        Lines.Strings = (
          'DROP SYNONYM MyProduct;'
          ''
        )
      end    
      item
        Caption = 'Reconfigure'
        Lines.Strings = (
          'RECONFIGURE;'
          ''
        )
      end    
      item
        Caption = 'Rebuild1'
        Lines.Strings = (
          'REBUILD WITH'
          '('
          'DATA_COMPRESSION = NONE ON PARTITIONS (1),'
          'DATA_COMPRESSION = ROW ON PARTITIONS (2, 4, 6 TO 8),'
          'DATA_COMPRESSION = PAGE ON PARTITIONS (3, 5)'
          ')'
          ''
        )
      end    
      item
        Caption = 'Rebuild2'
        Lines.Strings = (
          'REBUILD WITH'
          '('
          'DATA_COMPRESSION = COLUMNSTORE ON PARTITIONS (1, 3, 5),'
          'DATA_COMPRESSION = COLUMNSTORE_ARCHIVE ON PARTITIONS (2, 4, 6 TO 8)'
          ')'
          ''
        )
      end    
      item
        Caption = 'MessageType1'
        Lines.Strings = (
          'ALTER MESSAGE TYPE'
          '    [//Adventure-Works.com/Expenses/SubmitExpense]'
          '    VALIDATION = WELL_FORMED_XML ;'
          ''
        )
      end    
      item
        Caption = 'MessageType2'
        Lines.Strings = (
          'CREATE MESSAGE TYPE'
          '    [//Adventure-Works.com/Expenses/SubmitExpense]'
          '    VALIDATION = WELL_FORMED_XML ;'
          ''
        )
      end    
      item
        Caption = 'MessageType3'
        Lines.Strings = (
          'CREATE MESSAGE TYPE'
          '    [//Adventure-Works.com/Expenses/ExpenseApprovedOrDenied]'
          '    VALIDATION = WELL_FORMED_XML ;'
          ''
        )
      end    
      item
        Caption = 'MessageType4'
        Lines.Strings = (
          'CREATE MESSAGE TYPE'
          '    [//Adventure-Works.com/Expenses/ExpenseReimbursed]'
          '    VALIDATION= WELL_FORMED_XML ;'
          ''
        )
      end    
      item
        Caption = 'MessageType5'
        Lines.Strings = (
          'CREATE MESSAGE TYPE'
          '  [//Adventure-Works.com/Expenses/SubmitExpense]'
          '  VALIDATION = WELL_FORMED_XML ;'
          ''
        )
      end    
      item
        Caption = 'MessageType6'
        Lines.Strings = (
          'CREATE MESSAGE TYPE'
          '    [//Adventure-Works.com/Expenses/SubmitExpense]'
          '    VALIDATION = VALID_XML WITH SCHEMA COLLECTION ExpenseReportSchema ;'
          ''
        )
      end    
      item
        Caption = 'MessageType7'
        Lines.Strings = (
          'CREATE MESSAGE TYPE'
          '    [//Adventure-Works.com/Expenses/SubmitExpense]'
          '    VALIDATION = EMPTY ;'
          ''
        )
      end    
      item
        Caption = 'MessageType8'
        Lines.Strings = (
          'CREATE MESSAGE TYPE'
          '    [//Adventure-Works.com/Expenses/ReceiptImage]'
          '    VALIDATION = NONE ;'
          ''
        )
      end    
      item
        Caption = 'Filter1'
        Lines.Strings = (
          'DROP FILTER PREDICATE'
          '    ON myschema.mytable2,'
          'ADD FILTER PREDICATE schema_preds.SecPredicate2(column2, 1)'
          '    ON myschema.mytable3;'
          ''
          ''
          ''
        )
      end    
      item
        Caption = 'Transaction1'
        Lines.Strings = (
          'BEGIN TRANSACTION ListPriceUpdate'
          '    WITH MARK ''UPDATE Product list prices'';'
          ''
        )
      end    
      item
        Caption = 'Transaction2'
        Lines.Strings = (
          'COMMIT TRANSACTION ListPriceUpdate;'
          ''
        )
      end    
      item
        Caption = 'Default1'
        Lines.Strings = (
          'CREATE DEFAULT phonedflt AS ''unknown'';'
          ''
          ''
        )
      end    
      item
        Caption = 'Default2'
        Lines.Strings = (
          'DROP DEFAULT datedflt;'
          ''
        )
      end    
      item
        Caption = 'Default3'
        Lines.Strings = (
          'DROP DEFAULT IF EXISTS datedflt;'
          ''
        )
      end    
      item
        Caption = 'Default4'
        Lines.Strings = (
          'DROP DEFAULT phonedflt'
          ''
        )
      end    
      item
        Caption = 'Aggregate1'
        Lines.Strings = (
          'CREATE AGGREGATE Concatenate(@input nvarchar(4000))'
          'RETURNS nvarchar(4000)'
          'EXTERNAL NAME [StringUtilities].[Microsoft.Samples.SqlServer.Concatenate];'
          ''
          ''
        )
      end    
      item
        Caption = 'Aggregate2'
        Lines.Strings = (
          'DROP AGGREGATE dbo.Concatenate;'
          ''
          ''
          ''
        )
      end    
      item
        Caption = 'Contract1'
        Lines.Strings = (
          'CREATE CONTRACT'
          '    [//Adventure-Works.com/Expenses/ExpenseSubmission]'
          '    ( [//Adventure-Works.com/Expenses/SubmitExpense]'
          '          SENT BY INITIATOR,'
          '      [//Adventure-Works.com/Expenses/ExpenseApprovedOrDenied]'
          '          SENT BY TARGET,'
          '      [//Adventure-Works.com/Expenses/ExpenseReimbursed]'
          '          SENT BY TARGET'
          '    ) ;'
          ''
          ''
        )
      end    
      item
        Caption = 'Contract2'
        Lines.Strings = (
          'DROP CONTRACT [//Adventure-Works.com/Expenses/ExpenseSubmission] ;'
          ''
          ''
        )
      end    
      item
        Caption = 'Endpoint1'
        Lines.Strings = (
          'CREATE ENDPOINT endpoint_mirroring'
          '    STATE = STARTED'
          '    AS TCP ( LISTENER_PORT = 7022 )'
          '    FOR DATABASE_MIRRORING ('
          '       AUTHENTICATION = WINDOWS KERBEROS,'
          '       ENCRYPTION = SUPPORTED,'
          '       ROLE=ALL);'
          ''
        )
      end    
      item
        Caption = 'Endpoint2'
        Lines.Strings = (
          'CREATE ENDPOINT ipv4_endpoint_special'
          'STATE = STARTED'
          'AS TCP ('
          '    LISTENER_PORT = 55555, LISTENER_IP = (10.0.75.1)'
          ')'
          'FOR TSQL ();'
          ''
        )
      end    
      item
        Caption = 'Endpoint3'
        Lines.Strings = (
          'CREATE ENDPOINT ipv6_endpoint_special'
          'STATE = STARTED'
          'AS TCP ('
          '    LISTENER_PORT = 55555, LISTENER_IP = (''::1'')'
          ')'
          'FOR TSQL ();'
        )
      end    
      item
        Caption = 'Endpoint4'
        Lines.Strings = (
          'DROP ENDPOINT sql_endpoint;'
        )
      end    
      item
        Caption = 'Rule1'
        Lines.Strings = (
          'CREATE RULE range_rule'
          'AS'
          '@range>= $1000 AND @range <$20000;'
          ''
        )
      end    
      item
        Caption = 'Rule2'
        Lines.Strings = (
          'CREATE RULE list_rule'
          'AS'
          '@list IN (''1389'', ''0736'', ''0877'');'
          ''
        )
      end    
      item
        Caption = 'Rule3'
        Lines.Strings = (
          'CREATE RULE pattern_rule'
          'AS'
          '@value LIKE ''__-%[0-9]'''
          ''
        )
      end    
      item
        Caption = 'Rule4'
        Lines.Strings = (
          'DROP RULE VendorID_rule'
        )
      end    
      item
        Caption = 'DBCC1'
        Lines.Strings = (
          'DBCC SHRINKFILE (AdventureWorks2012_data, 100);'
          ''
          ''
        )
      end    
      item
        Caption = 'MessageType1'
        Lines.Strings = (
          'DROP MESSAGE TYPE [//Adventure-Works.com/Expenses/SubmitExpense] ;'
          ''
        )
      end    
      item
        Caption = 'Setuser1'
        Lines.Strings = (
          'SETUSER ''mary'';'
          ''
        )
      end    
      item
        Caption = 'DropSecurityPolicy1'
        Lines.Strings = (
          'DROP SECURITY POLICY secPolicy;'
        )
      end>
    Left = 389
    Top = 368
  end
  object sSecurity: TRxTextHolder
    Highlighter = rxSynSQL
    Items = <    
      item
        Caption = 'Grant1'
        Lines.Strings = (
          'GRANT ALTER ANY DATABASE SCOPED CONFIGURATION to [Joe] ;'
          ''
          ''
        )
      end    
      item
        Caption = 'Grant2'
        Lines.Strings = (
          'GRANT ALTER ON SERVER ROLE::Production TO Ted ;'
          ''
          ''
        )
      end    
      item
        Caption = 'Grant3'
        Lines.Strings = (
          'GRANT CONNECT ON ENDPOINT::[TSQL Default TCP] TO public;'
          ''
        )
      end    
      item
        Caption = 'Grant4'
        Lines.Strings = (
          'GRANT CONNECT ON ENDPOINT::ipv4_endpoint_special TO login_name;'
          ''
          ''
          ''
        )
      end    
      item
        Caption = 'Grant5'
        Lines.Strings = (
          'GRANT CONNECT ON ENDPOINT::[TSQL Default TCP] TO public;'
          ''
          ''
        )
      end    
      item
        Caption = 'Grant6'
        Lines.Strings = (
          'GRANT CONNECT ON ENDPOINT::ipv6_endpoint_special'
          ''
          ''
        )
      end    
      item
        Caption = 'Grant7'
        Lines.Strings = (
          'GRANT EXECUTE EXTERNAL SCRIPT ON EXTERNAL LANGUAGE ::Java TO mylogin;'
          ''
          ''
        )
      end    
      item
        Caption = 'Grant8'
        Lines.Strings = (
          'GRANT VIEW SERVER STATE TO login_test;'
          ''
          ''
        )
      end    
      item
        Caption = 'Grant9'
        Lines.Strings = (
          'GRANT IMPERSONATE ON USER::CustomApp TO [adventure-works\tengiz0] ;'
          ''
          ''
        )
      end    
      item
        Caption = 'Grant10'
        Lines.Strings = (
          'GRANT SELECT ON T1 TO ucsSelectT1;'
          ''
          ''
        )
      end    
      item
        Caption = 'Grant11'
        Lines.Strings = (
          'GRANT EXECUTE ON procSelectT1 to public;'
          ''
          ''
        )
      end    
      item
        Caption = 'Grant12'
        Lines.Strings = (
          'GRANT EXECUTE ON procSelectT1ForAlice TO PUBLIC;'
          ''
          ''
        )
      end    
      item
        Caption = 'Grant13'
        Lines.Strings = (
          'GRANT IMPERSONATE ON USER:: user2 TO user1;'
          ''
          ''
        )
      end    
      item
        Caption = 'Grant14'
        Lines.Strings = (
          'GRANT VIEW DEFINITION ON AVAILABILITY GROUP::MyAg TO ZArifin;'
          ''
        )
      end    
      item
        Caption = 'Grant15'
        Lines.Strings = (
          'GRANT TAKE OWNERSHIP ON AVAILABILITY GROUP::MyAg TO PKomosinski WITH GRANT OPTION;'
          ''
        )
      end    
      item
        Caption = 'Grant16'
        Lines.Strings = (
          'GRANT CONTROL ON AVAILABILITY GROUP::MyAg TO PKomosinski;'
          ''
        )
      end    
      item
        Caption = 'Grant17'
        Lines.Strings = (
          'GRANT CREATE TABLE TO MelanieK;'
          ''
        )
      end    
      item
        Caption = 'Grant18'
        Lines.Strings = (
          'GRANT SHOWPLAN TO AuditMonitor;'
          ''
        )
      end    
      item
        Caption = 'Grant19'
        Lines.Strings = (
          'GRANT CREATE VIEW TO CarmineEs WITH GRANT OPTION;'
          ''
        )
      end    
      item
        Caption = 'Grant20'
        Lines.Strings = (
          'GRANT CONTROL ON DATABASE::AdventureWorks2012 TO Sarah;'
          ''
        )
      end    
      item
        Caption = 'Grant21'
        Lines.Strings = (
          'GRANT CONTROL ON USER::Wanida TO RolandX;'
          ''
        )
      end    
      item
        Caption = 'Grant22'
        Lines.Strings = (
          'GRANT VIEW DEFINITION ON ROLE::SammamishParking TO JinghaoLiu WITH GRANT OPTION;'
          ''
        )
      end    
      item
        Caption = 'Grant23'
        Lines.Strings = (
          'GRANT IMPERSONATE ON USER::HamithaL TO AccountsPayable17;'
          ''
        )
      end    
      item
        Caption = 'Grant24'
        Lines.Strings = (
          'GRANT VIEW DEFINITION ON ENDPOINT::Mirror7 TO ZArifin;'
          ''
        )
      end    
      item
        Caption = 'Grant25'
        Lines.Strings = (
          'GRANT TAKE OWNERSHIP ON ENDPOINT::Shipping83 TO PKomosinski'
          '    WITH GRANT OPTION;'
          ''
        )
      end    
      item
        Caption = 'Grant26'
        Lines.Strings = (
          'GRANT CONTROL'
          '    ON FULLTEXT CATALOG :: ProductCatalog'
          '    TO Ted ;'
          ''
        )
      end    
      item
        Caption = 'Grant27'
        Lines.Strings = (
          'GRANT VIEW DEFINITION'
          '    ON FULLTEXT STOPLIST :: ProductStoplist'
          '    TO Mary ;'
          ''
          '    GRANT SELECT ON OBJECT::Person.Address TO RosaQdM;'
          ''
        )
      end    
      item
        Caption = 'Grant28'
        Lines.Strings = (
          'GRANT EXECUTE ON OBJECT::HumanResources.uspUpdateEmployeeHireInfo'
          '    TO Recruiting11;'
          ''
        )
      end    
      item
        Caption = 'Grant29'
        Lines.Strings = (
          'GRANT REFERENCES (BusinessEntityID) ON OBJECT::HumanResources.vEmployee'
          '    TO Wanida WITH GRANT OPTION;'
          ''
        )
      end    
      item
        Caption = 'Grant30'
        Lines.Strings = (
          'GRANT SELECT ON Person.Address TO RosaQdM;'
          ''
        )
      end    
      item
        Caption = 'Grant31'
        Lines.Strings = (
          'GRANT SELECT ON Person.Address TO [AdventureWorks2012\RosaQdM];'
          ''
        )
      end    
      item
        Caption = 'Grant32'
        Lines.Strings = (
          'GRANT EXECUTE ON dbo.uspGetBillOfMaterials TO newrole ;'
          ''
        )
      end    
      item
        Caption = 'Grant33'
        Lines.Strings = (
          'GRANT INSERT ON SCHEMA :: HumanResources TO guest;'
          ''
        )
      end    
      item
        Caption = 'Grant34'
        Lines.Strings = (
          'GRANT SELECT ON SCHEMA :: Person TO WilJo WITH GRANT OPTION;'
          ''
        )
      end    
      item
        Caption = 'Grant35'
        Lines.Strings = (
          'GRANT VIEW DEFINITION'
          '    ON SEARCH PROPERTY LIST :: DocumentTablePropertyList'
          '    TO Mary ;'
          ''
        )
      end    
      item
        Caption = 'Grant36'
        Lines.Strings = (
          'GRANT CONTROL SERVER TO TerryEminhizer;'
          ''
        )
      end    
      item
        Caption = 'Grant37'
        Lines.Strings = (
          'GRANT ALTER ANY EVENT NOTIFICATION TO JanethEsteves WITH GRANT OPTION;'
          ''
        )
      end    
      item
        Caption = 'Grant38'
        Lines.Strings = (
          'GRANT ALTER ANY DATABASE TO ITDevAdmin WITH GRANT OPTION ;'
          ''
        )
      end    
      item
        Caption = 'Grant39'
        Lines.Strings = (
          'GRANT ALTER ANY DATABASE TO ITDevelopers AS ITDevAdmin ;'
          ''
        )
      end    
      item
        Caption = 'Grant40'
        Lines.Strings = (
          'GRANT IMPERSONATE ON LOGIN::WanidaBenshoof to [AdvWorks\YoonM];'
          ''
        )
      end    
      item
        Caption = 'Grant41'
        Lines.Strings = (
          'GRANT VIEW DEFINITION ON LOGIN::EricKurjan TO RMeyyappan'
          '    WITH GRANT OPTION;'
          ''
        )
      end    
      item
        Caption = 'Grant42'
        Lines.Strings = (
          'GRANT VIEW DEFINITION ON SERVER ROLE::Sales TO Auditors ;'
          ''
        )
      end    
      item
        Caption = 'Grant43'
        Lines.Strings = (
          'GRANT ALTER ON SYMMETRIC KEY::SamInventory42 TO HamidS;'
          ''
        )
      end    
      item
        Caption = 'Grant44'
        Lines.Strings = (
          'GRANT SELECT ON sys.sql_logins TO Sylvester1;'
          ''
        )
      end    
      item
        Caption = 'Grant45'
        Lines.Strings = (
          'GRANT VIEW SERVER STATE to Sylvester1;'
          ''
        )
      end    
      item
        Caption = 'Grant46'
        Lines.Strings = (
          'GRANT EXECUTE ON xp_readmail TO Sylvester1;'
          ''
        )
      end    
      item
        Caption = 'Grant47'
        Lines.Strings = (
          'GRANT VIEW DEFINITION ON TYPE::Telemarketing.PhoneNumber'
          '    TO KhalidR WITH GRANT OPTION;'
          ''
        )
      end    
      item
        Caption = 'Grant48'
        Lines.Strings = (
          'GRANT EXECUTE ON XML SCHEMA COLLECTION::Sales.Invoices4 TO Wanida;'
          ''
        )
      end    
      item
        Caption = 'Grant49'
        Lines.Strings = (
          'GRANT CONTROL ON AVAILABILITY GROUP::MyAg TO PKomosinski'
          '    WITH GRANT OPTION;'
          ''
        )
      end    
      item
        Caption = 'Grant50'
        Lines.Strings = (
          'GRANT SELECT ON computer_types TO joe;'
        )
      end    
      item
        Caption = 'Revoke1'
        Lines.Strings = (
          'REVOKE GRANT OPTION FOR CONTROL ON AVAILABILITY GROUP::MyAg TO PKomosinski'
          'CASCADE'
          ''
          ''
          ''
        )
      end    
      item
        Caption = 'Revoke2'
        Lines.Strings = (
          'REVOKE VIEW DEFINITION ON AVAILABILITY GROUP::MyAg TO ZArifin;'
          ''
        )
      end    
      item
        Caption = 'Revoke3'
        Lines.Strings = (
          'REVOKE TAKE OWNERSHIP ON AVAILABILITY GROUP::MyAg TO PKomosinski'
          '    CASCADE;'
          ''
        )
      end    
      item
        Caption = 'Revoke4'
        Lines.Strings = (
          'REVOKE CREATE CERTIFICATE FROM MelanieK;'
          ''
        )
      end    
      item
        Caption = 'Revoke5'
        Lines.Strings = (
          'REVOKE REFERENCES FROM AuditMonitor;'
          ''
        )
      end    
      item
        Caption = 'Revoke6'
        Lines.Strings = (
          'REVOKE VIEW DEFINITION FROM CarmineEs CASCADE;'
          ''
        )
      end    
      item
        Caption = 'Revoke7'
        Lines.Strings = (
          'REVOKE CONTROL ON USER::Wanida FROM RolandX;'
          ''
        )
      end    
      item
        Caption = 'Revoke8'
        Lines.Strings = (
          'REVOKE VIEW DEFINITION ON ROLE::SammamishParking'
          '    FROM JinghaoLiu CASCADE;'
          ''
        )
      end    
      item
        Caption = 'Revoke9'
        Lines.Strings = (
          'REVOKE IMPERSONATE ON USER::HamithaL FROM AccountsPayable17;'
          ''
        )
      end    
      item
        Caption = 'Revoke10'
        Lines.Strings = (
          'REVOKE VIEW DEFINITION ON ENDPOINT::Mirror7 FROM ZArifin;'
          ''
        )
      end    
      item
        Caption = 'Revoke11'
        Lines.Strings = (
          'REVOKE TAKE OWNERSHIP ON ENDPOINT::Shipping83 FROM PKomosinski'
          '    CASCADE;'
          ''
        )
      end    
      item
        Caption = 'Revoke12'
        Lines.Strings = (
          'REVOKE SELECT ON OBJECT::Person.Address FROM RosaQdM;'
          ''
        )
      end    
      item
        Caption = 'Revoke13'
        Lines.Strings = (
          'REVOKE EXECUTE ON OBJECT::HumanResources.uspUpdateEmployeeHireInfo FROM Recruiting11;'
          ''
        )
      end    
      item
        Caption = 'Revoke14'
        Lines.Strings = (
          'REVOKE REFERENCES (BusinessEntityID) ON OBJECT::HumanResources.vEmployee FROM Wanida CASCADE;'
          ''
        )
      end    
      item
        Caption = 'Revoke15'
        Lines.Strings = (
          'REVOKE VIEW SERVER STATE FROM WanidaBenshoof;'
          ''
        )
      end    
      item
        Caption = 'Revoke16'
        Lines.Strings = (
          'REVOKE GRANT OPTION FOR CONNECT SQL FROM JanethEsteves;'
          ''
        )
      end    
      item
        Caption = 'Revoke17'
        Lines.Strings = (
          'REVOKE IMPERSONATE ON LOGIN::WanidaBenshoof FROM [AdvWorks\YoonM];'
          ''
        )
      end    
      item
        Caption = 'Revoke18'
        Lines.Strings = (
          'REVOKE VIEW DEFINITION ON LOGIN::EricKurjan FROM RMeyyappan CASCADE;'
          ''
        )
      end    
      item
        Caption = 'Revoke19'
        Lines.Strings = (
          'REVOKE VIEW DEFINITION ON SERVER ROLE::Sales TO Auditors ;'
          ''
        )
      end    
      item
        Caption = 'Revoke20'
        Lines.Strings = (
          'REVOKE ALTER ON SYMMETRIC KEY::SamInventory42 TO HamidS CASCADE;'
          ''
        )
      end    
      item
        Caption = 'Revoke21'
        Lines.Strings = (
          'REVOKE VIEW DEFINITION ON TYPE::Telemarketing.PhoneNumber FROM KhalidR CASCADE;'
          ''
        )
      end    
      item
        Caption = 'Revoke22'
        Lines.Strings = (
          'REVOKE EXECUTE ON XML SCHEMA COLLECTION::Sales.Invoices4 FROM Wanida;'
          ''
        )
      end    
      item
        Caption = 'AlterAuthorization1'
        Lines.Strings = (
          'ALTER AUTHORIZATION ON OBJECT::Parts.Sprockets TO MichikoOsada;'
          ''
        )
      end    
      item
        Caption = 'AlterAuthorization2'
        Lines.Strings = (
          'ALTER AUTHORIZATION ON Parts.Sprockets TO MichikoOsada;'
          ''
        )
      end    
      item
        Caption = 'AlterAuthorization3'
        Lines.Strings = (
          'ALTER AUTHORIZATION ON Sprockets TO MichikoOsada;'
          ''
        )
      end    
      item
        Caption = 'AlterAuthorization4'
        Lines.Strings = (
          'ALTER AUTHORIZATION ON OBJECT::Sprockets TO MichikoOsada;'
          ''
        )
      end    
      item
        Caption = 'AlterAuthorization5'
        Lines.Strings = (
          'ALTER AUTHORIZATION ON OBJECT::Production.ProductionView06 TO SCHEMA OWNER;'
          ''
        )
      end    
      item
        Caption = 'AlterAuthorization6'
        Lines.Strings = (
          'ALTER AUTHORIZATION ON SCHEMA::SeattleProduction11 TO SandraAlayo;'
          ''
        )
      end    
      item
        Caption = 'AlterAuthorization7'
        Lines.Strings = (
          'ALTER AUTHORIZATION ON ENDPOINT::CantabSalesServer1 TO JaePak;'
          ''
        )
      end    
      item
        Caption = 'AlterAuthorization8'
        Lines.Strings = (
          'ALTER AUTHORIZATION ON Sprockets TO MichikoOsada;'
          ''
        )
      end    
      item
        Caption = 'AlterAuthorization9'
        Lines.Strings = (
          'ALTER AUTHORIZATION ON dbo.Sprockets TO MichikoOsada;'
          ''
        )
      end    
      item
        Caption = 'AlterAuthorization10'
        Lines.Strings = (
          'ALTER AUTHORIZATION ON OBJECT::Sprockets TO MichikoOsada;'
          ''
        )
      end    
      item
        Caption = 'AlterAuthorization11'
        Lines.Strings = (
          'ALTER AUTHORIZATION ON OBJECT::dbo.Sprockets TO MichikoOsada;'
          ''
        )
      end    
      item
        Caption = 'AlterAuthorization12'
        Lines.Strings = (
          'ALTER AUTHORIZATION ON DATABASE::Parts TO MichikoOsada;'
          ''
        )
      end    
      item
        Caption = 'AlterAuthorization13'
        Lines.Strings = (
          'ALTER AUTHORIZATION ON database::targetDB TO [rachel@cqclinic.onmicrosoft.com];'
        )
      end    
      item
        Caption = 'CreateRole1'
        Lines.Strings = (
          'CREATE ROLE Sales;'
        )
      end    
      item
        Caption = 'CreateRole2'
        Lines.Strings = (
          'CREATE ROLE SalesUK'
        )
      end    
      item
        Caption = 'CreateRole3'
        Lines.Strings = (
          'CREATE ROLE buyers AUTHORIZATION BenMiller;'
          ''
        )
      end    
      item
        Caption = 'CreateRole4'
        Lines.Strings = (
          'CREATE ROLE auditors AUTHORIZATION db_securityadmin;'
          ''
        )
      end    
      item
        Caption = 'CreateRole5'
        Lines.Strings = (
          'CREATE ROLE newrole ;'
          ''
          ''
        )
      end    
      item
        Caption = 'AlterRole1'
        Lines.Strings = (
          'ALTER ROLE buyers WITH NAME = purchasing;'
        )
      end    
      item
        Caption = 'AlterRole2'
        Lines.Strings = (
          'ALTER ROLE Sales DROP MEMBER Barry;'
        )
      end    
      item
        Caption = 'AlterRole3'
        Lines.Strings = (
          'ALTER ROLE Sales ADD MEMBER Barry;'
        )
      end    
      item
        Caption = 'DropRole1'
        Lines.Strings = (
          'DROP ROLE purchasing;'
        )
      end    
      item
        Caption = 'CreateRole6'
        Lines.Strings = (
          'CREATE APPLICATION ROLE weekly_receipts'
          '    WITH PASSWORD = ''987Gbv8$76sPYY5m23'' ,'
          '    DEFAULT_SCHEMA = Sales;'
          ''
        )
      end    
      item
        Caption = 'CreateRole7'
        Lines.Strings = (
          'ALTER APPLICATION ROLE weekly_receipts'
          '    WITH NAME = receipts_ledger;'
          ''
        )
      end    
      item
        Caption = 'CreateRole8'
        Lines.Strings = (
          'USE AdventureWorks2012;'
          'CREATE APPLICATION ROLE weekly_receipts'
          '    WITH PASSWORD = ''987Gbv8$76sPYY5m23'' ,'
          '    DEFAULT_SCHEMA = Sales;'
          ''
        )
      end    
      item
        Caption = 'CreateRole9'
        Lines.Strings = (
          'ALTER APPLICATION ROLE weekly_receipts'
          '    WITH NAME = receipts_ledger;'
          ''
        )
      end    
      item
        Caption = 'CreateRole10'
        Lines.Strings = (
          'ALTER APPLICATION ROLE receipts_ledger'
          '    WITH PASSWORD = ''897yUUbv867y$200nk2i'';'
          ''
        )
      end    
      item
        Caption = 'CreateRole11'
        Lines.Strings = (
          'ALTER APPLICATION ROLE receipts_ledger'
          '    WITH NAME = weekly_ledger,'
          '    PASSWORD = ''897yUUbv77bsrEE00nk2i'','
          '    DEFAULT_SCHEMA = Production;'
          ''
        )
      end    
      item
        Caption = 'CreateRole12'
        Lines.Strings = (
          'CREATE APPLICATION ROLE weekly_receipts'
          '    WITH PASSWORD = ''987G^bv876sPY)Y5m23'''
          '    , DEFAULT_SCHEMA = Sales;'
          ''
        )
      end    
      item
        Caption = 'DropRole2'
        Lines.Strings = (
          'DROP APPLICATION ROLE weekly_ledger;'
        )
      end    
      item
        Caption = 'CreateLogin1'
        Lines.Strings = (
          'CREATE LOGIN <login_name> WITH PASSWORD = ''<enterStrongPasswordHere>'';'
          ''
        )
      end    
      item
        Caption = 'CreateLogin2'
        Lines.Strings = (
          'CREATE LOGIN <login_name> WITH PASSWORD = ''<enterStrongPasswordHere>'''
          '    MUST_CHANGE, CHECK_EXPIRATION = ON;'
          ''
        )
      end    
      item
        Caption = 'CreateLogin3'
        Lines.Strings = (
          'CREATE LOGIN <login_name> WITH PASSWORD = ''<enterStrongPasswordHere>'','
          '    CREDENTIAL = <credentialName>;'
          ''
        )
      end    
      item
        Caption = 'CreateLogin4'
        Lines.Strings = (
          'CREATE LOGIN <login_name> FROM CERTIFICATE <certificateName>;'
          ''
        )
      end    
      item
        Caption = 'CreateLogin5'
        Lines.Strings = (
          'CREATE LOGIN [<domainName>\<login_name>] FROM WINDOWS;'
          ''
        )
      end    
      item
        Caption = 'CreateLogin6'
        Lines.Strings = (
          'CREATE LOGIN TestLogin WITH PASSWORD = ''SuperSecret52&&'';'
          ''
        )
      end    
      item
        Caption = 'CreateLogin7'
        Lines.Strings = (
          'CREATE LOGIN TestLogin'
          'WITH PASSWORD = ''SuperSecret52&&'', SID = 0x241C11948AEEB749B0D22646DB1A19F2;'
          ''
        )
      end    
      item
        Caption = 'CreateLogin8'
        Lines.Strings = (
          'CREATE LOGIN [MyUser]'
          'WITH PASSWORD = ''MyPassword'','
          'DEFAULT_DATABASE = MyDatabase,'
          'CHECK_POLICY = OFF,'
          'CHECK_EXPIRATION = OFF ;'
          ''
        )
      end    
      item
        Caption = 'CreateLogin9'
        Lines.Strings = (
          'CREATE LOGIN login_test WITH PASSWORD = ''3KHJ6dhx(0xVYsdf'' MUST_CHANGE,'
          '    CHECK_EXPIRATION = ON;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateLogin10'
        Lines.Strings = (
          'CREATE LOGIN AbolrousHazem'
          '    WITH PASSWORD = ''340$Uuxwp7Mcxo7Khy'';'
          ''
        )
      end    
      item
        Caption = 'CreateLogin11'
        Lines.Strings = (
          'CREATE LOGIN WanidaBenshoof'
          '    WITH PASSWORD = ''8fdKJl3$nlNv3049jsKK'';'
          ''
        )
      end    
      item
        Caption = 'CreateLogin12'
        Lines.Strings = (
          'CREATE LOGIN Alice WITH PASSWORD = ''SimplePwd01'';'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateLogin13'
        Lines.Strings = (
          'CREATE LOGIN login1 WITH PASSWORD = ''J345#$)thb'';'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateLogin14'
        Lines.Strings = (
          'CREATE LOGIN login2 WITH PASSWORD = ''Uor80$23b'';'
          ''
        )
      end    
      item
        Caption = 'CreateLogin15'
        Lines.Strings = (
          'CREATE LOGIN login1 WITH PASSWORD = ''J345#$)thb'';'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateLogin16'
        Lines.Strings = (
          'CREATE LOGIN login2 WITH PASSWORD = ''Uor80$23b'';'
          ''
        )
      end    
      item
        Caption = 'AlterLogin1'
        Lines.Strings = (
          'ALTER LOGIN Mary5 ENABLE;'
          ''
        )
      end    
      item
        Caption = 'AlterLogin2'
        Lines.Strings = (
          'ALTER LOGIN Mary5 WITH PASSWORD = ''<enterStrongPasswordHere>'';'
          ''
        )
      end    
      item
        Caption = 'AlterLogin3'
        Lines.Strings = (
          'ALTER LOGIN Mary5 WITH PASSWORD = ''<enterStrongPasswordHere>'' OLD_PASSWORD = ''<oldWeakPasswordHere>'';'
          ''
        )
      end    
      item
        Caption = 'AlterLogin4'
        Lines.Strings = (
          'ALTER LOGIN Mary5 WITH NAME = John2;'
          ''
        )
      end    
      item
        Caption = 'AlterLogin5'
        Lines.Strings = (
          'ALTER LOGIN John2 WITH CREDENTIAL = Custodian04;'
          ''
        )
      end    
      item
        Caption = 'AlterLogin6'
        Lines.Strings = (
          'ALTER LOGIN Mary5'
          'ADD CREDENTIAL EKMProvider1;'
          ''
        )
      end    
      item
        Caption = 'AlterLogin7'
        Lines.Strings = (
          'ALTER LOGIN [Mary5] WITH PASSWORD = ''****'' UNLOCK ;'
          ''
        )
      end    
      item
        Caption = 'AlterLogin8'
        Lines.Strings = (
          'ALTER LOGIN [Mary5] WITH CHECK_POLICY = OFF;'
          ''
        )
      end    
      item
        Caption = 'AlterLogin9'
        Lines.Strings = (
          'ALTER LOGIN [Mary5] WITH CHECK_POLICY = ON;'
          ''
        )
      end    
      item
        Caption = 'AlterLogin10'
        Lines.Strings = (
          'ALTER LOGIN TestUser WITH PASSWORD = 0x01000CF35567C60BFB41EBDE4CF700A985A13D773D6B45B90900 HASHED ;'
          ''
        )
      end    
      item
        Caption = 'AlterLogin11'
        Lines.Strings = (
          'ALTER LOGIN User1'
          'ADD CREDENTIAL CredentialForEKM;'
        )
      end    
      item
        Caption = 'DropLogin1'
        Lines.Strings = (
          'DROP LOGIN TestLogin;'
          ''
        )
      end    
      item
        Caption = 'DropLogin2'
        Lines.Strings = (
          'DROP LOGIN WilliJo;'
          ''
          ''
        )
      end    
      item
        Caption = 'DropLogin3'
        Lines.Strings = (
          'DROP LOGIN Alice;'
          ''
          ''
        )
      end    
      item
        Caption = 'DropLogin4'
        Lines.Strings = (
          'DROP LOGIN login1;'
          ''
          ''
        )
      end    
      item
        Caption = 'DropLogin5'
        Lines.Strings = (
          'DROP LOGIN login2;'
          ''
          ''
        )
      end    
      item
        Caption = 'DropLogin6'
        Lines.Strings = (
          'DROP LOGIN login1;'
          ''
          ''
        )
      end    
      item
        Caption = 'DropLogin7'
        Lines.Strings = (
          'DROP LOGIN login2;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateUser1'
        Lines.Strings = (
          'CREATE USER AbolrousHazem FOR LOGIN AbolrousHazem;'
          ''
        )
      end    
      item
        Caption = 'CreateUser2'
        Lines.Strings = (
          'CREATE USER Wanida FOR LOGIN WanidaBenshoof'
          '    WITH DEFAULT_SCHEMA = Marketing;'
          ''
        )
      end    
      item
        Caption = 'CreateUser3'
        Lines.Strings = (
          'CREATE USER JinghaoLiu FOR CERTIFICATE CarnationProduction50;'
          ''
        )
      end    
      item
        Caption = 'CreateUser4'
        Lines.Strings = (
          'CREATE USER CustomApp WITHOUT LOGIN ;'
          ''
        )
      end    
      item
        Caption = 'CreateUser5'
        Lines.Strings = (
          'CREATE USER Carlo'
          'WITH PASSWORD=''RN92piTCh%$!~3K9844 Bl*'''
          '    , DEFAULT_LANGUAGE=[Brazilian]'
          '    , DEFAULT_SCHEMA=[dbo]'
          ''
        )
      end    
      item
        Caption = 'CreateUser6'
        Lines.Strings = (
          'CREATE USER [Contoso\Fritz] ;'
          ''
        )
      end    
      item
        Caption = 'CreateUser7'
        Lines.Strings = (
          'CREATE USER CarmenW WITH PASSWORD = ''a8ea v*(Rd##+'''
          ', SID = 0x01050000000000090300000063FF0451A9E7664BA705B10E37DDC4B7;'
          ''
        )
      end    
      item
        Caption = 'CreateUser8'
        Lines.Strings = (
          'CREATE USER [Chin]'
          'WITH'
          '      DEFAULT_SCHEMA = dbo'
          '    , ALLOW_ENCRYPTED_VALUE_MODIFICATIONS = ON ;'
          ''
        )
      end    
      item
        Caption = 'CreateUser9'
        Lines.Strings = (
          'CREATE USER TestUser WITHOUT LOGIN;'
          ''
        )
      end    
      item
        Caption = 'CreateUser10'
        Lines.Strings = (
          'CREATE USER ucsSelectT1 FROM CERTIFICATE csSelectT;'
          ''
        )
      end    
      item
        Caption = 'CreateUser11'
        Lines.Strings = (
          'CREATE USER Alice;'
          ''
        )
      end    
      item
        Caption = 'CreateUser12'
        Lines.Strings = (
          'CREATE USER user1 FOR LOGIN login1;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateUser13'
        Lines.Strings = (
          'CREATE USER user2 FOR LOGIN login2;'
        )
      end    
      item
        Caption = 'AlterUser1'
        Lines.Strings = (
          'ALTER USER Mary5 WITH NAME = Mary51;'
          ''
        )
      end    
      item
        Caption = 'AlterUser2'
        Lines.Strings = (
          'ALTER USER Mary51 WITH DEFAULT_SCHEMA = Purchasing;'
          ''
        )
      end    
      item
        Caption = 'AlterUser3'
        Lines.Strings = (
          'ALTER USER Philip'
          'WITH NAME = Philipe'
          ', DEFAULT_SCHEMA = Development'
          ', PASSWORD = ''W1r77TT98%ab@#'' OLD_PASSWORD = ''New Devel0per'''
          ', DEFAULT_LANGUAGE= French ;'
          ''
        )
      end    
      item
        Caption = 'DropUser1'
        Lines.Strings = (
          'DROP USER AbolrousHazem;'
          ''
          ''
        )
      end    
      item
        Caption = 'DropUser2'
        Lines.Strings = (
          'DROP USER user2;'
          ''
          ''
        )
      end    
      item
        Caption = 'DropUser3'
        Lines.Strings = (
          'DROP USER user1;'
          ''
          ''
        )
      end    
      item
        Caption = 'DropUser4'
        Lines.Strings = (
          'DROP USER user2;'
          ''
          ''
        )
      end    
      item
        Caption = 'Deny1'
        Lines.Strings = (
          'DENY VIEW DEFINITION ON AVAILABILITY GROUP::MyAg TO ZArifin;'
          ''
        )
      end    
      item
        Caption = 'Deny2'
        Lines.Strings = (
          'DENY TAKE OWNERSHIP ON AVAILABILITY GROUP::MyAg TO PKomosinski'
          '    CASCADE;'
          ''
        )
      end    
      item
        Caption = 'Deny3'
        Lines.Strings = (
          'DENY CREATE CERTIFICATE TO MelanieK;'
          ''
        )
      end    
      item
        Caption = 'Deny4'
        Lines.Strings = (
          'DENY REFERENCES TO AuditMonitor;'
          ''
        )
      end    
      item
        Caption = 'Deny5'
        Lines.Strings = (
          'DENY VIEW DEFINITION TO CarmineEs CASCADE;'
          ''
        )
      end    
      item
        Caption = 'Deny6'
        Lines.Strings = (
          'DENY CONTROL ON USER::Wanida TO RolandX;'
          ''
        )
      end    
      item
        Caption = 'Deny7'
        Lines.Strings = (
          'DENY VIEW DEFINITION ON ROLE::SammamishParking'
          '    TO JinghaoLiu CASCADE;'
          ''
        )
      end    
      item
        Caption = 'Deny8'
        Lines.Strings = (
          'DENY IMPERSONATE ON USER::HamithaL TO AccountsPayable17;'
          ''
        )
      end    
      item
        Caption = 'Deny9'
        Lines.Strings = (
          'DENY VIEW DEFINITION ON ENDPOINT::Mirror7 TO ZArifin;'
          ''
        )
      end    
      item
        Caption = 'Deny10'
        Lines.Strings = (
          'DENY TAKE OWNERSHIP ON ENDPOINT::Shipping83 TO PKomosinski'
          '    CASCADE;'
          ''
        )
      end    
      item
        Caption = 'Deny11'
        Lines.Strings = (
          'DENY SELECT ON OBJECT::Person.Address TO RosaQdM;'
          ''
        )
      end    
      item
        Caption = 'Deny12'
        Lines.Strings = (
          'DENY EXECUTE ON OBJECT::HumanResources.uspUpdateEmployeeHireInfo'
          '    TO Recruiting11;'
          ''
        )
      end    
      item
        Caption = 'Deny13'
        Lines.Strings = (
          'DENY REFERENCES (BusinessEntityID) ON OBJECT::HumanResources.vEmployee'
          '    TO Wanida CASCADE;'
          ''
        )
      end    
      item
        Caption = 'Deny14'
        Lines.Strings = (
          'DENY CONNECT SQL TO Annika CASCADE;'
          ''
        )
      end    
      item
        Caption = 'Deny15'
        Lines.Strings = (
          'DENY CREATE ENDPOINT TO ArifS AS MandarP;'
          ''
        )
      end    
      item
        Caption = 'Deny16'
        Lines.Strings = (
          'DENY IMPERSONATE ON LOGIN::WanidaBenshoof TO [AdvWorks\YoonM];'
          ''
        )
      end    
      item
        Caption = 'Deny17'
        Lines.Strings = (
          'DENY VIEW DEFINITION ON LOGIN::EricKurjan TO RMeyyappan'
          '    CASCADE;'
          ''
        )
      end    
      item
        Caption = 'Deny18'
        Lines.Strings = (
          'DENY VIEW DEFINITION ON SERVER ROLE::Sales TO Auditors ;'
          ''
        )
      end    
      item
        Caption = 'Deny19'
        Lines.Strings = (
          'DENY ALTER ON SYMMETRIC KEY::SamInventory42 TO HamidS;'
          ''
        )
      end    
      item
        Caption = 'Deny20'
        Lines.Strings = (
          'DENY EXECUTE ON sys.xp_cmdshell TO public;'
          ''
        )
      end    
      item
        Caption = 'Deny21'
        Lines.Strings = (
          'DENY VIEW DEFINITION ON TYPE::Telemarketing.PhoneNumber'
          '    TO KhalidR CASCADE;'
          ''
        )
      end    
      item
        Caption = 'Deny22'
        Lines.Strings = (
          'DENY EXECUTE ON XML SCHEMA COLLECTION::Sales.Invoices4 TO Wanida;'
          ''
        )
      end    
      item
        Caption = 'Authorization '
        Lines.Strings = (
          'ALTER AUTHORIZATION ON T1 TO TestUser;'
          ''
          ''
        )
      end>
    Left = 448
    Top = 368
  end
  object sSequence: TRxTextHolder
    Highlighter = rxSynSQL
    Items = <    
      item
        Caption = 'CreateSequence1'
        Lines.Strings = (
          'CREATE SEQUENCE Test.TestSeq'
          '    AS int'
          '    START WITH 125'
          '    INCREMENT BY 25'
          '    MINVALUE 100'
          '    MAXVALUE 200'
          '    CYCLE'
          '    CACHE 3'
          ';'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateSequence2'
        Lines.Strings = (
          'CREATE SEQUENCE Test.CountBy1 ;'
          ''
          ''
        )
      end    
      item
        Caption = 'CreateSequence3'
        Lines.Strings = (
          'CREATE SEQUENCE Test.CountBy1'
          '    START WITH 1'
          '    INCREMENT BY 1 ;'
          ''
        )
      end    
      item
        Caption = 'CreateSequence4'
        Lines.Strings = (
          'CREATE SEQUENCE Test.CountByNeg1'
          '    START WITH 0'
          '    INCREMENT BY -1 ;'
          ''
        )
      end    
      item
        Caption = 'CreateSequence5'
        Lines.Strings = (
          'CREATE SEQUENCE Test.CountBy1'
          '    START WITH 5'
          '    INCREMENT BY 5 ;'
          ''
        )
      end    
      item
        Caption = 'CreateSequence6'
        Lines.Strings = (
          'CREATE SEQUENCE Test.ID_Seq'
          '    START WITH 24329'
          '    INCREMENT BY 1 ;'
          ''
        )
      end    
      item
        Caption = 'CreateSequence7'
        Lines.Strings = (
          'CREATE SEQUENCE Test.TestSequence ;'
          ''
        )
      end    
      item
        Caption = 'CreateSequence8'
        Lines.Strings = (
          'CREATE SEQUENCE SmallSeq'
          '    AS smallint ;'
          ''
        )
      end    
      item
        Caption = 'CreateSequence9'
        Lines.Strings = (
          'CREATE SEQUENCE Test.DecSeq'
          '    AS decimal(3,0)'
          '    START WITH 125'
          '    INCREMENT BY 25'
          '    MINVALUE 100'
          '    MAXVALUE 200'
          '    CYCLE'
          '    CACHE 3'
          ';'
          ''
        )
      end    
      item
        Caption = 'AlterSequence1'
        Lines.Strings = (
          'ALTER SEQUENCE Test. TestSeq'
          '    RESTART WITH 100'
          '    INCREMENT BY 50'
          '    MINVALUE 50'
          '    MAXVALUE 200'
          '    NO CYCLE'
          '    NO CACHE'
          ';'
          ''
        )
      end    
      item
        Caption = 'AlterSequence2'
        Lines.Strings = (
          'ALTER SEQUENCE Test.CountBy1 RESTART WITH 1 ;'
          ''
        )
      end    
      item
        Caption = 'AlterSequence3'
        Lines.Strings = (
          'ALTER SEQUENCE Test.CountBy1'
          '    CYCLE'
          '    CACHE 20 ;'
        )
      end>
    Left = 496
    Top = 368
  end
end
